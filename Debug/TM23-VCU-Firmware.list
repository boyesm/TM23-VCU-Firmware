
TM23-VCU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ac  080052ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b4  080052b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  0800532c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800532c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2c9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002046  00000000  00000000  0002d369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230f4  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d338  00000000  00000000  0005384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8032  00000000  00000000  00060b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138bb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d58  00000000  00000000  00138c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800522c 	.word	0x0800522c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800522c 	.word	0x0800522c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t TxMailbox;

char msg[256];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f001 fddf 	bl	8002196 <HAL_CAN_GetRxMessage>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80005de:	f000 fb49 	bl	8000c74 <Error_Handler>
	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

	sprintf(msg, "CAN Data = %d \r\n", RxData[0]);
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	490b      	ldr	r1, [pc, #44]	; (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80005ec:	f004 f9b0 	bl	8004950 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80005f2:	f7ff fe0d 	bl	8000210 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	4907      	ldr	r1, [pc, #28]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000602:	f003 fdfe 	bl	8004202 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000033c 	.word	0x2000033c
 8000614:	20000318 	.word	0x20000318
 8000618:	08005244 	.word	0x08005244
 800061c:	20000348 	.word	0x20000348
 8000620:	200002ac 	.word	0x200002ac

08000624 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b0c2      	sub	sp, #264	; 0x108
 8000628:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800062a:	f000 fe0b 	bl	8001244 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062e:	f000 f869 	bl	8000704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000632:	f000 fa7b 	bl	8000b2c <MX_GPIO_Init>
	MX_DMA_Init();
 8000636:	f000 fa49 	bl	8000acc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800063a:	f000 fa1d 	bl	8000a78 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800063e:	f000 f8d3 	bl	80007e8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000642:	f000 f923 	bl	800088c <MX_ADC2_Init>
	MX_ADC3_Init();
 8000646:	f000 f973 	bl	8000930 <MX_ADC3_Init>
	MX_CAN1_Init();
 800064a:	f000 f9c3 	bl	80009d4 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 800064e:	2201      	movs	r2, #1
 8000650:	4921      	ldr	r1, [pc, #132]	; (80006d8 <main+0xb4>)
 8000652:	4822      	ldr	r0, [pc, #136]	; (80006dc <main+0xb8>)
 8000654:	f000 fed0 	bl	80013f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000658:	2201      	movs	r2, #1
 800065a:	4921      	ldr	r1, [pc, #132]	; (80006e0 <main+0xbc>)
 800065c:	4821      	ldr	r0, [pc, #132]	; (80006e4 <main+0xc0>)
 800065e:	f000 fecb 	bl	80013f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000662:	2201      	movs	r2, #1
 8000664:	4920      	ldr	r1, [pc, #128]	; (80006e8 <main+0xc4>)
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <main+0xc8>)
 8000668:	f000 fec6 	bl	80013f8 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <main+0xcc>)
 800066e:	f001 fc73 	bl	8001f58 <HAL_CAN_Start>

//	NOT WORKING
//	Initialize the CAN RX Interrupt
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000672:	2102      	movs	r1, #2
 8000674:	481e      	ldr	r0, [pc, #120]	; (80006f0 <main+0xcc>)
 8000676:	f001 fea0 	bl	80023ba <HAL_CAN_ActivateNotification>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <main+0x60>
			!= HAL_OK) {
		Error_Handler();
 8000680:	f000 faf8 	bl	8000c74 <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0xd0>)
 8000686:	2208      	movs	r2, #8
 8000688:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <main+0xd0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <main+0xd0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <main+0xd0>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x23;	//CAN ID of this device
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <main+0xd0>)
 800069e:	2223      	movs	r2, #35	; 0x23
 80006a0:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <main+0xd0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	751a      	strb	r2, [r3, #20]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a8:	2120      	movs	r1, #32
 80006aa:	4813      	ldr	r0, [pc, #76]	; (80006f8 <main+0xd4>)
 80006ac:	f002 ff09 	bl	80034c2 <HAL_GPIO_TogglePin>
		TxData[0] = 0x1A; //Message ID for "Set AC Current" for motor controller
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <main+0xd8>)
 80006b2:	221a      	movs	r2, #26
 80006b4:	701a      	strb	r2, [r3, #0]
//		Send out CAN message
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <main+0xdc>)
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <main+0xd8>)
 80006ba:	490e      	ldr	r1, [pc, #56]	; (80006f4 <main+0xd0>)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <main+0xcc>)
 80006be:	f001 fc8f 	bl	8001fe0 <HAL_CAN_AddTxMessage>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <main+0xa8>
				!= HAL_OK) {
			Error_Handler();
 80006c8:	f000 fad4 	bl	8000c74 <Error_Handler>
////				} //end else
//
//			} //end else
//
//		} //end else
		HAL_Delay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f000 fe2a 	bl	8001328 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006d4:	e7e8      	b.n	80006a8 <main+0x84>
 80006d6:	bf00      	nop
 80006d8:	200002f0 	.word	0x200002f0
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	200002f8 	.word	0x200002f8
 80006e4:	2000011c 	.word	0x2000011c
 80006e8:	200002f4 	.word	0x200002f4
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	20000284 	.word	0x20000284
 80006f4:	20000300 	.word	0x20000300
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000334 	.word	0x20000334
 8000700:	20000344 	.word	0x20000344

08000704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 f914 	bl	8004940 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <SystemClock_Config+0xdc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <SystemClock_Config+0xdc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xdc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <SystemClock_Config+0xe0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xe0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000778:	23b4      	movs	r3, #180	; 0xb4
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fa4d 	bl	8003c2c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
		Error_Handler();
 8000798:	f000 fa6c 	bl	8000c74 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800079c:	f002 feac 	bl	80034f8 <HAL_PWREx_EnableOverDrive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa6>
		Error_Handler();
 80007a6:	f000 fa65 	bl	8000c74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2105      	movs	r1, #5
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fee5 	bl	8003598 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xd4>
		Error_Handler();
 80007d4:	f000 fa4e 	bl	8000c74 <Error_Handler>
	}
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_ADC1_Init+0x98>)
 8000802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000806:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0x98>)
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_ADC1_Init+0xa0>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_ADC1_Init+0x98>)
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_ADC1_Init+0x98>)
 800083c:	2201      	movs	r2, #1
 800083e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_ADC1_Init+0x98>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_ADC1_Init+0x98>)
 800084a:	f000 fd91 	bl	8001370 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000854:	f000 fa0e 	bl	8000c74 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC1_Init+0x98>)
 800086a:	f000 fee9 	bl	8001640 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000874:	f000 f9fe 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000008c 	.word	0x2000008c
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC2_Init+0x98>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <MX_ADC2_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC2_Init+0x98>)
 80008a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008aa:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ADC2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ADC2_Init+0x98>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC2_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_ADC2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_ADC2_Init+0x98>)
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_ADC2_Init+0xa0>)
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_ADC2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_ADC2_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ADC2_Init+0x98>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_ADC2_Init+0x98>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_ADC2_Init+0x98>)
 80008ee:	f000 fd3f 	bl	8001370 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC2_Init+0x70>
		Error_Handler();
 80008f8:	f000 f9bc 	bl	8000c74 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_ADC2_Init+0x98>)
 800090e:	f000 fe97 	bl	8001640 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000918:	f000 f9ac 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000d4 	.word	0x200000d4
 8000928:	40012100 	.word	0x40012100
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000944:	4a21      	ldr	r2, [pc, #132]	; (80009cc <MX_ADC3_Init+0x9c>)
 8000946:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_ADC3_Init+0x98>)
 800094a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_ADC3_Init+0x98>)
 800095e:	2201      	movs	r2, #1
 8000960:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_ADC3_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_ADC3_Init+0xa0>)
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_ADC3_Init+0x98>)
 800097e:	2201      	movs	r2, #1
 8000980:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_ADC3_Init+0x98>)
 800098c:	2201      	movs	r2, #1
 800098e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC3_Init+0x98>)
 8000992:	f000 fced 	bl	8001370 <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC3_Init+0x70>
		Error_Handler();
 800099c:	f000 f96a 	bl	8000c74 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80009a0:	230a      	movs	r3, #10
 80009a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_ADC3_Init+0x98>)
 80009b2:	f000 fe45 	bl	8001640 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC3_Init+0x90>
		Error_Handler();
 80009bc:	f000 f95a 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	40012200 	.word	0x40012200
 80009d0:	0f000001 	.word	0x0f000001

080009d4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009dc:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <MX_CAN1_Init+0xa0>)
 80009de:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009e2:	2212      	movs	r2, #18
 80009e4:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_CAN1_Init+0x9c>)
 80009fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a00:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a28:	f001 f8ba 	bl	8001ba0 <HAL_CAN_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_CAN1_Init+0x62>
		Error_Handler();
 8000a32:	f000 f91f 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_CAN1_Init+0x9c>)
 8000a64:	f001 f998 	bl	8001d98 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000284 	.word	0x20000284
 8000a74:	40006400 	.word	0x40006400

08000a78 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f003 fb5a 	bl	8004168 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000aba:	f000 f8db 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200002ac 	.word	0x200002ac
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_DMA_Init+0x5c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_DMA_Init+0x5c>)
 8000adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_DMA_Init+0x5c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2038      	movs	r0, #56	; 0x38
 8000af4:	f001 ff91 	bl	8002a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000af8:	2038      	movs	r0, #56	; 0x38
 8000afa:	f001 ffaa 	bl	8002a52 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2039      	movs	r0, #57	; 0x39
 8000b04:	f001 ff89 	bl	8002a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b08:	2039      	movs	r0, #57	; 0x39
 8000b0a:	f001 ffa2 	bl	8002a52 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	203a      	movs	r0, #58	; 0x3a
 8000b14:	f001 ff81 	bl	8002a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b18:	203a      	movs	r0, #58	; 0x3a
 8000b1a:	f001 ff9a 	bl	8002a52 <HAL_NVIC_EnableIRQ>

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <MX_GPIO_Init+0x128>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4828      	ldr	r0, [pc, #160]	; (8000c58 <MX_GPIO_Init+0x12c>)
 8000bb8:	f002 fc6a 	bl	8003490 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000bc2:	f002 fc65 	bl	8003490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x12c>)
 8000bde:	f002 fac3 	bl	8003168 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 8000be2:	2302      	movs	r3, #2
 8000be4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x12c>)
 8000bf6:	f002 fab7 	bl	8003168 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_GPIO_Init+0x12c>)
 8000c12:	f002 faa9 	bl	8003168 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000c2e:	f002 fa9b 	bl	8003168 <HAL_GPIO_Init>

	/*Configure GPIO pin : HV_Present_Pin */
	GPIO_InitStruct.Pin = HV_Present_Pin;
 8000c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(HV_Present_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_GPIO_Init+0x130>)
 8000c48:	f002 fa8e 	bl	8003168 <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_ADC_ConvHalfCpltCallback>:
	if (apps_PP[1] > 100) {
		apps_PP[1] = 100;
	}

} //end APPS_Mapping()
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f001 fea0 	bl	8002a04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a9b      	ldr	r2, [pc, #620]	; (8000f5c <HAL_ADC_MspInit+0x28c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d161      	bne.n	8000db6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	4b9a      	ldr	r3, [pc, #616]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a99      	ldr	r2, [pc, #612]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b97      	ldr	r3, [pc, #604]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	4b93      	ldr	r3, [pc, #588]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a92      	ldr	r2, [pc, #584]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b90      	ldr	r3, [pc, #576]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4889      	ldr	r0, [pc, #548]	; (8000f64 <HAL_ADC_MspInit+0x294>)
 8000d3e:	f002 fa13 	bl	8003168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d44:	4a89      	ldr	r2, [pc, #548]	; (8000f6c <HAL_ADC_MspInit+0x29c>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d48:	4b87      	ldr	r3, [pc, #540]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4e:	4b86      	ldr	r3, [pc, #536]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b83      	ldr	r3, [pc, #524]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d62:	4b81      	ldr	r3, [pc, #516]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6a:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d72:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d92:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d98:	4873      	ldr	r0, [pc, #460]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000d9a:	f001 fe75 	bl	8002a88 <HAL_DMA_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000da4:	f7ff ff66 	bl	8000c74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a6f      	ldr	r2, [pc, #444]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_ADC_MspInit+0x298>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000db4:	e0ce      	b.n	8000f54 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6d      	ldr	r2, [pc, #436]	; (8000f70 <HAL_ADC_MspInit+0x2a0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d162      	bne.n	8000e86 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	4b66      	ldr	r3, [pc, #408]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a5e      	ldr	r2, [pc, #376]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4856      	ldr	r0, [pc, #344]	; (8000f64 <HAL_ADC_MspInit+0x294>)
 8000e0c:	f002 f9ac 	bl	8003168 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000e10:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e12:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <HAL_ADC_MspInit+0x2a8>)
 8000e14:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e30:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e32:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3a:	4b4e      	ldr	r3, [pc, #312]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e40:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e42:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e48:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e50:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e58:	2203      	movs	r2, #3
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e68:	4842      	ldr	r0, [pc, #264]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e6a:	f001 fe0d 	bl	8002a88 <HAL_DMA_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8000e74:	f7ff fefe 	bl	8000c74 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_ADC_MspInit+0x2a4>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e84:	e066      	b.n	8000f54 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_ADC_MspInit+0x2ac>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d161      	bne.n	8000f54 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_ADC_MspInit+0x290>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <HAL_ADC_MspInit+0x2b0>)
 8000edc:	f002 f944 	bl	8003168 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <HAL_ADC_MspInit+0x2b8>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000ee8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f00:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f08:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f10:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f3a:	f001 fda5 	bl	8002a88 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8000f44:	f7ff fe96 	bl	8000c74 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_ADC_MspInit+0x2b4>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f54:	bf00      	nop
 8000f56:	3738      	adds	r7, #56	; 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	20000164 	.word	0x20000164
 8000f6c:	40026410 	.word	0x40026410
 8000f70:	40012100 	.word	0x40012100
 8000f74:	200001c4 	.word	0x200001c4
 8000f78:	40026440 	.word	0x40026440
 8000f7c:	40012200 	.word	0x40012200
 8000f80:	40020800 	.word	0x40020800
 8000f84:	20000224 	.word	0x20000224
 8000f88:	40026428 	.word	0x40026428

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_CAN_MspInit+0x94>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d134      	bne.n	8001018 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_CAN_MspInit+0x98>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fe6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_CAN_MspInit+0x9c>)
 8001004:	f002 f8b0 	bl	8003168 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2014      	movs	r0, #20
 800100e:	f001 fd04 	bl	8002a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001012:	2014      	movs	r0, #20
 8001014:	f001 fd1d 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40006400 	.word	0x40006400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001086:	230c      	movs	r3, #12
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0x8c>)
 80010a2:	f002 f861 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f8ee 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <CAN1_RX0_IRQHandler+0x10>)
 8001116:	f001 f976 	bl	8002406 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000284 	.word	0x20000284

08001124 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Stream0_IRQHandler+0x10>)
 800112a:	f001 fdb3 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000164 	.word	0x20000164

08001138 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA2_Stream1_IRQHandler+0x10>)
 800113e:	f001 fda9 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000224 	.word	0x20000224

0800114c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA2_Stream2_IRQHandler+0x10>)
 8001152:	f001 fd9f 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001c4 	.word	0x200001c4

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 fbac 	bl	80048ec <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20020000 	.word	0x20020000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000448 	.word	0x20000448
 80011c8:	20000460 	.word	0x20000460

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800120c:	4c0b      	ldr	r4, [pc, #44]	; (800123c <LoopFillZerobss+0x26>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800121a:	f7ff ffd7 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f003 fb6b 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff f9ff 	bl	8000624 <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001234:	080052bc 	.word	0x080052bc
  ldr r2, =_sbss
 8001238:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800123c:	20000460 	.word	0x20000460

08001240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_Init+0x40>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_Init+0x40>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x40>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f001 fbc9 	bl	8002a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fd02 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fbe1 	bl	8002a6e <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f001 fba9 	bl	8002a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008
 800130c:	2000044c 	.word	0x2000044c

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000044c 	.word	0x2000044c

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e033      	b.n	80013ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fc9e 	bl	8000cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d118      	bne.n	80013e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b6:	f023 0302 	bic.w	r3, r3, #2
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fa6e 	bl	80018a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
 80013de:	e001      	b.n	80013e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Start_DMA+0x1e>
 8001412:	2302      	movs	r3, #2
 8001414:	e0e9      	b.n	80015ea <HAL_ADC_Start_DMA+0x1f2>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d018      	beq.n	800145e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800143c:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_ADC_Start_DMA+0x1fc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6d      	ldr	r2, [pc, #436]	; (80015f8 <HAL_ADC_Start_DMA+0x200>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9a      	lsrs	r2, r3, #18
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001450:	e002      	b.n	8001458 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	3b01      	subs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f9      	bne.n	8001452 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146c:	d107      	bne.n	800147e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800147c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	f040 80a1 	bne.w	80015d0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014cc:	d106      	bne.n	80014dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f023 0206 	bic.w	r2, r3, #6
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
 80014da:	e002      	b.n	80014e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ea:	4b44      	ldr	r3, [pc, #272]	; (80015fc <HAL_ADC_Start_DMA+0x204>)
 80014ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_ADC_Start_DMA+0x208>)
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_ADC_Start_DMA+0x20c>)
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4a41      	ldr	r2, [pc, #260]	; (8001608 <HAL_ADC_Start_DMA+0x210>)
 8001504:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800150e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800151e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800152e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	334c      	adds	r3, #76	; 0x4c
 800153a:	4619      	mov	r1, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f001 fb50 	bl	8002be4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12a      	bne.n	80015a6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_ADC_Start_DMA+0x214>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d015      	beq.n	8001586 <HAL_ADC_Start_DMA+0x18e>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <HAL_ADC_Start_DMA+0x218>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d105      	bne.n	8001570 <HAL_ADC_Start_DMA+0x178>
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_ADC_Start_DMA+0x204>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00a      	beq.n	8001586 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <HAL_ADC_Start_DMA+0x21c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d136      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_ADC_Start_DMA+0x204>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d130      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d129      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e020      	b.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_ADC_Start_DMA+0x214>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d11b      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d114      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e00b      	b.n	80015e8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	40012300 	.word	0x40012300
 8001600:	08001a9d 	.word	0x08001a9d
 8001604:	08001b57 	.word	0x08001b57
 8001608:	08001b73 	.word	0x08001b73
 800160c:	40012000 	.word	0x40012000
 8001610:	40012100 	.word	0x40012100
 8001614:	40012200 	.word	0x40012200

08001618 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1c>
 8001658:	2302      	movs	r3, #2
 800165a:	e113      	b.n	8001884 <HAL_ADC_ConfigChannel+0x244>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d925      	bls.n	80016b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d9      	ldr	r1, [r3, #12]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b1e      	subs	r3, #30
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68d9      	ldr	r1, [r3, #12]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4403      	add	r3, r0
 80016aa:	3b1e      	subs	r3, #30
 80016ac:	409a      	lsls	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	e022      	b.n	80016fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6919      	ldr	r1, [r3, #16]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	2207      	movs	r2, #7
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	400a      	ands	r2, r1
 80016da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4403      	add	r3, r0
 80016f4:	409a      	lsls	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b06      	cmp	r3, #6
 8001704:	d824      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b05      	subs	r3, #5
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b05      	subs	r3, #5
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	e04c      	b.n	80017ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d824      	bhi.n	80017a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b23      	subs	r3, #35	; 0x23
 800176a:	221f      	movs	r2, #31
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b23      	subs	r3, #35	; 0x23
 8001794:	fa00 f203 	lsl.w	r2, r0, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
 80017a0:	e023      	b.n	80017ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b41      	subs	r3, #65	; 0x41
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b41      	subs	r3, #65	; 0x41
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <HAL_ADC_ConfigChannel+0x250>)
 80017ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_ADC_ConfigChannel+0x254>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d10f      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d8>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b12      	cmp	r3, #18
 80017fe:	d10b      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_ADC_ConfigChannel+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_ADC_ConfigChannel+0x23a>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_ADC_ConfigChannel+0x258>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d003      	beq.n	8001834 <HAL_ADC_ConfigChannel+0x1f4>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b11      	cmp	r3, #17
 8001832:	d122      	bne.n	800187a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_ADC_ConfigChannel+0x258>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d111      	bne.n	800187a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_ADC_ConfigChannel+0x25c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_ADC_ConfigChannel+0x260>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9a      	lsrs	r2, r3, #18
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800186c:	e002      	b.n	8001874 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40012300 	.word	0x40012300
 8001894:	40012000 	.word	0x40012000
 8001898:	10000012 	.word	0x10000012
 800189c:	20000000 	.word	0x20000000
 80018a0:	431bde83 	.word	0x431bde83

080018a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <ADC_Init+0x1f0>)
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	021a      	lsls	r2, r3, #8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <ADC_Init+0x1f4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800194a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800196c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6899      	ldr	r1, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e00f      	b.n	80019a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0202 	bic.w	r2, r2, #2
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e1b      	ldrb	r3, [r3, #24]
 80019bc:	005a      	lsls	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01b      	beq.n	8001a08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	3b01      	subs	r3, #1
 80019fc:	035a      	lsls	r2, r3, #13
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	e007      	b.n	8001a18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	051a      	lsls	r2, r3, #20
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6899      	ldr	r1, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a5a:	025a      	lsls	r2, r3, #9
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6899      	ldr	r1, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	029a      	lsls	r2, r3, #10
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40012300 	.word	0x40012300
 8001a98:	0f000001 	.word	0x0f000001

08001a9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d13c      	bne.n	8001b30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d12b      	bne.n	8001b28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d127      	bne.n	8001b28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d119      	bne.n	8001b28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0220 	bic.w	r2, r2, #32
 8001b02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fd75 	bl	8001618 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b2e:	e00e      	b.n	8001b4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff fd75 	bl	800162c <HAL_ADC_ErrorCallback>
}
 8001b42:	e004      	b.n	8001b4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff f87b 	bl	8000c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f043 0204 	orr.w	r2, r3, #4
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fd4a 	bl	800162c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0ed      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff f9e4 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff fb9c 	bl	8001310 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bda:	e012      	b.n	8001c02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bdc:	f7ff fb98 	bl	8001310 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d90b      	bls.n	8001c02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0c5      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0e5      	beq.n	8001bdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0202 	bic.w	r2, r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c20:	f7ff fb76 	bl	8001310 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c26:	e012      	b.n	8001c4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c28:	f7ff fb72 	bl	8001310 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d90b      	bls.n	8001c4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e09f      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e5      	bne.n	8001c28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7e1b      	ldrb	r3, [r3, #24]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d108      	bne.n	8001c76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e007      	b.n	8001c86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e5b      	ldrb	r3, [r3, #25]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d108      	bne.n	8001ca0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e9b      	ldrb	r3, [r3, #26]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0220 	bic.w	r2, r2, #32
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7edb      	ldrb	r3, [r3, #27]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0210 	bic.w	r2, r2, #16
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e007      	b.n	8001d04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0210 	orr.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7f1b      	ldrb	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d108      	bne.n	8001d1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0208 	bic.w	r2, r2, #8
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7f5b      	ldrb	r3, [r3, #29]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0204 	orr.w	r2, r2, #4
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0204 	bic.w	r2, r2, #4
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	ea42 0103 	orr.w	r1, r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_ConfigFilter+0x26>
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 80be 	bne.w	8001f3a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_CAN_ConfigFilter+0x1bc>)
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2201      	movs	r2, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	401a      	ands	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d123      	bne.n	8001e68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3248      	adds	r2, #72	; 0x48
 8001e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	3348      	adds	r3, #72	; 0x48
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d122      	bne.n	8001eb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3248      	adds	r2, #72	; 0x48
 8001e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	3348      	adds	r3, #72	; 0x48
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ed0:	e007      	b.n	8001ee2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f2c:	f023 0201 	bic.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e006      	b.n	8001f48 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40006400 	.word	0x40006400

08001f58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d12e      	bne.n	8001fca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff f9c4 	bl	8001310 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f8a:	e012      	b.n	8001fb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f8c:	f7ff f9c0 	bl	8001310 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d90b      	bls.n	8001fb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e012      	b.n	8001fd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e5      	bne.n	8001f8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e006      	b.n	8001fd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d003      	beq.n	800200c <HAL_CAN_AddTxMessage+0x2c>
 8002004:	7ffb      	ldrb	r3, [r7, #31]
 8002006:	2b02      	cmp	r3, #2
 8002008:	f040 80b8 	bne.w	800217c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80a0 	beq.w	800216c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	0e1b      	lsrs	r3, r3, #24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d907      	bls.n	800204c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e09e      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800204c:	2201      	movs	r2, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	409a      	lsls	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e00f      	b.n	800209a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002084:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800208e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3318      	adds	r3, #24
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	440b      	add	r3, r1
 8002098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3318      	adds	r3, #24
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	440b      	add	r3, r1
 80020aa:	3304      	adds	r3, #4
 80020ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	7d1b      	ldrb	r3, [r3, #20]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d111      	bne.n	80020da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3318      	adds	r3, #24
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3318      	adds	r3, #24
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	3304      	adds	r3, #4
 80020d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3307      	adds	r3, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	061a      	lsls	r2, r3, #24
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4313      	orrs	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	3204      	adds	r2, #4
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	4610      	mov	r0, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	ea43 0200 	orr.w	r2, r3, r0
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002110:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3303      	adds	r3, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	061a      	lsls	r2, r3, #24
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3302      	adds	r3, #2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4313      	orrs	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	4610      	mov	r0, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	6811      	ldr	r1, [r2, #0]
 8002138:	ea43 0200 	orr.w	r2, r3, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3318      	adds	r3, #24
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6811      	ldr	r1, [r2, #0]
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3318      	adds	r3, #24
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	440b      	add	r3, r1
 8002166:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e00e      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e006      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002196:	b480      	push	{r7}
 8002198:	b087      	sub	sp, #28
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d003      	beq.n	80021ba <HAL_CAN_GetRxMessage+0x24>
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	f040 80f3 	bne.w	80023a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10e      	bne.n	80021de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0e7      	b.n	80023ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d8      	b.n	80023ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	331b      	adds	r3, #27
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4413      	add	r3, r2
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0204 	and.w	r2, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	331b      	adds	r3, #27
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0d5b      	lsrs	r3, r3, #21
 800222a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00b      	b.n	800224c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	331b      	adds	r3, #27
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	331b      	adds	r3, #27
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0202 	and.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	331b      	adds	r3, #27
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	331b      	adds	r3, #27
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b2da      	uxtb	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	331b      	adds	r3, #27
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0a1a      	lsrs	r2, r3, #8
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0c1a      	lsrs	r2, r3, #16
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	3302      	adds	r3, #2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e1a      	lsrs	r2, r3, #24
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	3303      	adds	r3, #3
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3304      	adds	r3, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0a1a      	lsrs	r2, r3, #8
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	3305      	adds	r3, #5
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0c1a      	lsrs	r2, r3, #16
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3306      	adds	r3, #6
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e1a      	lsrs	r2, r3, #24
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3307      	adds	r3, #7
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	e007      	b.n	800239c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e006      	b.n	80023ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
  }
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d002      	beq.n	80023d8 <HAL_CAN_ActivateNotification+0x1e>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d109      	bne.n	80023ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6959      	ldr	r1, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e006      	b.n	80023fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b08a      	sub	sp, #40	; 0x28
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d07c      	beq.n	8002546 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d023      	beq.n	800249e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f983 	bl	8002774 <HAL_CAN_TxMailbox0CompleteCallback>
 800246e:	e016      	b.n	800249e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	e00c      	b.n	800249e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	e002      	b.n	800249e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f989 	bl	80027b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d024      	beq.n	80024f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f963 	bl	8002788 <HAL_CAN_TxMailbox1CompleteCallback>
 80024c2:	e016      	b.n	80024f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e00c      	b.n	80024f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	e002      	b.n	80024f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f969 	bl	80027c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d024      	beq.n	8002546 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002504:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f943 	bl	800279c <HAL_CAN_TxMailbox2CompleteCallback>
 8002516:	e016      	b.n	8002546 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	e00c      	b.n	8002546 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	e002      	b.n	8002546 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f949 	bl	80027d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00c      	beq.n	800256a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002560:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00b      	beq.n	800258c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f930 	bl	80027ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fe f80d 	bl	80005c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2208      	movs	r2, #8
 80025e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f912 	bl	8002814 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8f9 	bl	8002800 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2210      	movs	r2, #16
 8002628:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8fc 	bl	8002828 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2208      	movs	r2, #8
 800264a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8f5 	bl	800283c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d07b      	beq.n	8002754 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d072      	beq.n	800274c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03e      	beq.n	800274c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026d4:	2b60      	cmp	r3, #96	; 0x60
 80026d6:	d02b      	beq.n	8002730 <HAL_CAN_IRQHandler+0x32a>
 80026d8:	2b60      	cmp	r3, #96	; 0x60
 80026da:	d82e      	bhi.n	800273a <HAL_CAN_IRQHandler+0x334>
 80026dc:	2b50      	cmp	r3, #80	; 0x50
 80026de:	d022      	beq.n	8002726 <HAL_CAN_IRQHandler+0x320>
 80026e0:	2b50      	cmp	r3, #80	; 0x50
 80026e2:	d82a      	bhi.n	800273a <HAL_CAN_IRQHandler+0x334>
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d019      	beq.n	800271c <HAL_CAN_IRQHandler+0x316>
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d826      	bhi.n	800273a <HAL_CAN_IRQHandler+0x334>
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d010      	beq.n	8002712 <HAL_CAN_IRQHandler+0x30c>
 80026f0:	2b30      	cmp	r3, #48	; 0x30
 80026f2:	d822      	bhi.n	800273a <HAL_CAN_IRQHandler+0x334>
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d002      	beq.n	80026fe <HAL_CAN_IRQHandler+0x2f8>
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d005      	beq.n	8002708 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026fc:	e01d      	b.n	800273a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002706:	e019      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002710:	e014      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f043 0320 	orr.w	r3, r3, #32
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800271a:	e00f      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002724:	e00a      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800272e:	e005      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002738:	e000      	b.n	800273c <HAL_CAN_IRQHandler+0x336>
            break;
 800273a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800274a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f872 	bl	8002850 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800276c:	bf00      	nop
 800276e:	3728      	adds	r7, #40	; 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800288c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <__NVIC_GetPriorityGrouping+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 0307 	and.w	r3, r3, #7
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	db0b      	blt.n	80028f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <__NVIC_EnableIRQ+0x38>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2001      	movs	r0, #1
 80028ea:	fa00 f202 	lsl.w	r2, r0, r2
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	2b04      	cmp	r3, #4
 8002974:	bf28      	it	cs
 8002976:	2304      	movcs	r3, #4
 8002978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3304      	adds	r3, #4
 800297e:	2b06      	cmp	r3, #6
 8002980:	d902      	bls.n	8002988 <NVIC_EncodePriority+0x30>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3b03      	subs	r3, #3
 8002986:	e000      	b.n	800298a <NVIC_EncodePriority+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	401a      	ands	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	4313      	orrs	r3, r2
         );
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d0:	d301      	bcc.n	80029d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00f      	b.n	80029f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <SysTick_Config+0x40>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029de:	210f      	movs	r1, #15
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f7ff ff8e 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <SysTick_Config+0x40>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <SysTick_Config+0x40>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	e000e010 	.word	0xe000e010

08002a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff29 	bl	8002864 <__NVIC_SetPriorityGrouping>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2c:	f7ff ff3e 	bl	80028ac <__NVIC_GetPriorityGrouping>
 8002a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f7ff ff8e 	bl	8002958 <NVIC_EncodePriority>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff5d 	bl	8002904 <__NVIC_SetPriority>
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff31 	bl	80028c8 <__NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ffa2 	bl	80029c0 <SysTick_Config>
 8002a7c:	4603      	mov	r3, r0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7fe fc3c 	bl	8001310 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e099      	b.n	8002bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	e00f      	b.n	8002ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac6:	f7fe fc23 	bl	8001310 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d908      	bls.n	8002ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e078      	b.n	8002bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e8      	bne.n	8002ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_DMA_Init+0x158>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d117      	bne.n	8002baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa6f 	bl	8003070 <DMA_CheckFifoParam>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e016      	b.n	8002bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa26 	bl	8003004 <DMA_CalcBaseAndBitshift>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	223f      	movs	r2, #63	; 0x3f
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	f010803f 	.word	0xf010803f

08002be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_Start_IT+0x26>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e040      	b.n	8002c8c <HAL_DMA_Start_IT+0xa8>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d12f      	bne.n	8002c7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9b8 	bl	8002fa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	223f      	movs	r2, #63	; 0x3f
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0216 	orr.w	r2, r2, #22
 8002c52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0208 	orr.w	r2, r2, #8
 8002c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e005      	b.n	8002c8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca0:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_DMA_IRQHandler+0x248>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a8e      	ldr	r2, [pc, #568]	; (8002ee0 <HAL_DMA_IRQHandler+0x24c>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0a9b      	lsrs	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2208      	movs	r2, #8
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	2201      	movs	r2, #1
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d012      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2201      	movs	r2, #1
 8002d24:	409a      	lsls	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2204      	movs	r2, #4
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2210      	movs	r2, #16
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d043      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03c      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2210      	movs	r2, #16
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
 8002dc2:	e01f      	b.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
 8002dd4:	e016      	b.n	8002e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0208 	bic.w	r2, r2, #8
 8002df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2220      	movs	r2, #32
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 808f 	beq.w	8002f34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8087 	beq.w	8002f34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d136      	bne.n	8002eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0216 	bic.w	r2, r2, #22
 8002e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x1da>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0208 	bic.w	r2, r2, #8
 8002e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	223f      	movs	r2, #63	; 0x3f
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d07e      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
        }
        return;
 8002eaa:	e079      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d031      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e02c      	b.n	8002f34 <HAL_DMA_IRQHandler+0x2a0>
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
 8002ef4:	e01e      	b.n	8002f34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10f      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0210 	bic.w	r2, r2, #16
 8002f12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d032      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d022      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3301      	adds	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d307      	bcc.n	8002f7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f2      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x2cc>
 8002f7a:	e000      	b.n	8002f7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fa0:	bf00      	nop
    }
  }
}
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d108      	bne.n	8002fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fe6:	e007      	b.n	8002ff8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3b10      	subs	r3, #16
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <DMA_CalcBaseAndBitshift+0x64>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800301e:	4a13      	ldr	r2, [pc, #76]	; (800306c <DMA_CalcBaseAndBitshift+0x68>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d909      	bls.n	8003046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58
 8003044:	e007      	b.n	8003056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	aaaaaaab 	.word	0xaaaaaaab
 800306c:	08005270 	.word	0x08005270

08003070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11f      	bne.n	80030ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d856      	bhi.n	800313e <DMA_CheckFifoParam+0xce>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <DMA_CheckFifoParam+0x28>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030bb 	.word	0x080030bb
 80030a0:	080030a9 	.word	0x080030a9
 80030a4:	0800313f 	.word	0x0800313f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d046      	beq.n	8003142 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e043      	b.n	8003142 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c2:	d140      	bne.n	8003146 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c8:	e03d      	b.n	8003146 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	d121      	bne.n	8003118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d837      	bhi.n	800314a <DMA_CheckFifoParam+0xda>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <DMA_CheckFifoParam+0x70>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	080030f7 	.word	0x080030f7
 80030e8:	080030f1 	.word	0x080030f1
 80030ec:	08003109 	.word	0x08003109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e030      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d025      	beq.n	800314e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003106:	e022      	b.n	800314e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003110:	d11f      	bne.n	8003152 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003116:	e01c      	b.n	8003152 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d903      	bls.n	8003126 <DMA_CheckFifoParam+0xb6>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d003      	beq.n	800312c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003124:	e018      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      break;
 800312a:	e015      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e00b      	b.n	8003156 <DMA_CheckFifoParam+0xe6>
      break;
 800313e:	bf00      	nop
 8003140:	e00a      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e008      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e006      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;   
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
    }
  } 
  
  return status; 
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e165      	b.n	8003450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8154 	bne.w	800344a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d005      	beq.n	80031ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d130      	bne.n	800321c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0201 	and.w	r2, r3, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80ae 	beq.w	800344a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_GPIO_Init+0x300>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a5c      	ldr	r2, [pc, #368]	; (8003468 <HAL_GPIO_Init+0x300>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_GPIO_Init+0x300>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330a:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_GPIO_Init+0x304>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4f      	ldr	r2, [pc, #316]	; (8003470 <HAL_GPIO_Init+0x308>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x21a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_GPIO_Init+0x30c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x216>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4d      	ldr	r2, [pc, #308]	; (8003478 <HAL_GPIO_Init+0x310>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x212>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4c      	ldr	r2, [pc, #304]	; (800347c <HAL_GPIO_Init+0x314>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x20e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4b      	ldr	r2, [pc, #300]	; (8003480 <HAL_GPIO_Init+0x318>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x20a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <HAL_GPIO_Init+0x31c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x206>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a49      	ldr	r2, [pc, #292]	; (8003488 <HAL_GPIO_Init+0x320>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x202>
 8003366:	2306      	movs	r3, #6
 8003368:	e00c      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 800336a:	2307      	movs	r3, #7
 800336c:	e00a      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 800336e:	2305      	movs	r3, #5
 8003370:	e008      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 8003372:	2304      	movs	r3, #4
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_GPIO_Init+0x21c>
 8003382:	2300      	movs	r3, #0
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f002 0203 	and.w	r2, r2, #3
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4093      	lsls	r3, r2
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003394:	4935      	ldr	r1, [pc, #212]	; (800346c <HAL_GPIO_Init+0x304>)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_GPIO_Init+0x324>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a31      	ldr	r2, [pc, #196]	; (800348c <HAL_GPIO_Init+0x324>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_GPIO_Init+0x324>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <HAL_GPIO_Init+0x324>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_GPIO_Init+0x324>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_GPIO_Init+0x324>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_GPIO_Init+0x324>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_GPIO_Init+0x324>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3301      	adds	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	f67f ae96 	bls.w	8003184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40013800 	.word	0x40013800
 8003470:	40020000 	.word	0x40020000
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021000 	.word	0x40021000
 8003484:	40021400 	.word	0x40021400
 8003488:	40021800 	.word	0x40021800
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a0:	787b      	ldrb	r3, [r7, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034ac:	e003      	b.n	80034b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	619a      	str	r2, [r3, #24]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	041a      	lsls	r2, r3, #16
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43d9      	mvns	r1, r3
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	400b      	ands	r3, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	619a      	str	r2, [r3, #24]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_PWREx_EnableOverDrive+0x90>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_PWREx_EnableOverDrive+0x90>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_EnableOverDrive+0x90>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_PWREx_EnableOverDrive+0x94>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003524:	f7fd fef4 	bl	8001310 <HAL_GetTick>
 8003528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800352a:	e009      	b.n	8003540 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800352c:	f7fd fef0 	bl	8001310 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353a:	d901      	bls.n	8003540 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e01f      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_PWREx_EnableOverDrive+0x98>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d1ee      	bne.n	800352c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003554:	f7fd fedc 	bl	8001310 <HAL_GetTick>
 8003558:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800355a:	e009      	b.n	8003570 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800355c:	f7fd fed8 	bl	8001310 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356a:	d901      	bls.n	8003570 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e007      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_PWREx_EnableOverDrive+0x98>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357c:	d1ee      	bne.n	800355c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	420e0040 	.word	0x420e0040
 8003590:	40007000 	.word	0x40007000
 8003594:	420e0044 	.word	0x420e0044

08003598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0cc      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d90c      	bls.n	80035d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0b8      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a58      	ldr	r2, [pc, #352]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	494d      	ldr	r1, [pc, #308]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d044      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d119      	bne.n	8003676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e07f      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d003      	beq.n	8003656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	2b03      	cmp	r3, #3
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06f      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e067      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4934      	ldr	r1, [pc, #208]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003688:	f7fd fe42 	bl	8001310 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fd fe3e 	bl	8001310 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e04f      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d20c      	bcs.n	80036e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e032      	b.n	8003746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4916      	ldr	r1, [pc, #88]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371e:	f000 f855 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003722:	4602      	mov	r2, r0
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	490a      	ldr	r1, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	5ccb      	ldrb	r3, [r1, r3]
 8003732:	fa22 f303 	lsr.w	r3, r2, r3
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fda2 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023c00 	.word	0x40023c00
 8003754:	40023800 	.word	0x40023800
 8003758:	08005258 	.word	0x08005258
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000000 	.word	0x20000000

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08005268 	.word	0x08005268

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037a8:	f7ff ffdc 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0b5b      	lsrs	r3, r3, #13
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08005268 	.word	0x08005268

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d0:	b0ae      	sub	sp, #184	; 0xb8
 80037d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f2:	4bcb      	ldr	r3, [pc, #812]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	f200 8206 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x440>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003c0d 	.word	0x08003c0d
 8003810:	08003c0d 	.word	0x08003c0d
 8003814:	08003c0d 	.word	0x08003c0d
 8003818:	08003845 	.word	0x08003845
 800381c:	08003c0d 	.word	0x08003c0d
 8003820:	08003c0d 	.word	0x08003c0d
 8003824:	08003c0d 	.word	0x08003c0d
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003c0d 	.word	0x08003c0d
 8003830:	08003c0d 	.word	0x08003c0d
 8003834:	08003c0d 	.word	0x08003c0d
 8003838:	08003a3d 	.word	0x08003a3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800383c:	4bb9      	ldr	r3, [pc, #740]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x358>)
 800383e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003842:	e1e7      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003844:	4bb8      	ldr	r3, [pc, #736]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800384a:	e1e3      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384c:	4bb4      	ldr	r3, [pc, #720]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003858:	4bb1      	ldr	r3, [pc, #708]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d071      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003864:	4bae      	ldr	r3, [pc, #696]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003870:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800388a:	4622      	mov	r2, r4
 800388c:	462b      	mov	r3, r5
 800388e:	f04f 0000 	mov.w	r0, #0
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	0159      	lsls	r1, r3, #5
 8003898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389c:	0150      	lsls	r0, r2, #5
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4621      	mov	r1, r4
 80038a4:	1a51      	subs	r1, r2, r1
 80038a6:	6439      	str	r1, [r7, #64]	; 0x40
 80038a8:	4629      	mov	r1, r5
 80038aa:	eb63 0301 	sbc.w	r3, r3, r1
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80038bc:	4649      	mov	r1, r9
 80038be:	018b      	lsls	r3, r1, #6
 80038c0:	4641      	mov	r1, r8
 80038c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c6:	4641      	mov	r1, r8
 80038c8:	018a      	lsls	r2, r1, #6
 80038ca:	4641      	mov	r1, r8
 80038cc:	1a51      	subs	r1, r2, r1
 80038ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80038d0:	4649      	mov	r1, r9
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80038e4:	4649      	mov	r1, r9
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	4641      	mov	r1, r8
 80038ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ee:	4641      	mov	r1, r8
 80038f0:	00ca      	lsls	r2, r1, #3
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	4622      	mov	r2, r4
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 80038fe:	462b      	mov	r3, r5
 8003900:	460a      	mov	r2, r1
 8003902:	eb42 0303 	adc.w	r3, r2, r3
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003914:	4629      	mov	r1, r5
 8003916:	024b      	lsls	r3, r1, #9
 8003918:	4621      	mov	r1, r4
 800391a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800391e:	4621      	mov	r1, r4
 8003920:	024a      	lsls	r2, r1, #9
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003934:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003938:	f7fc fcc2 	bl	80002c0 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003946:	e067      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003948:	4b75      	ldr	r3, [pc, #468]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003954:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
 8003962:	2300      	movs	r3, #0
 8003964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003966:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800396a:	4622      	mov	r2, r4
 800396c:	462b      	mov	r3, r5
 800396e:	f04f 0000 	mov.w	r0, #0
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	0159      	lsls	r1, r3, #5
 8003978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397c:	0150      	lsls	r0, r2, #5
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4621      	mov	r1, r4
 8003984:	1a51      	subs	r1, r2, r1
 8003986:	62b9      	str	r1, [r7, #40]	; 0x28
 8003988:	4629      	mov	r1, r5
 800398a:	eb63 0301 	sbc.w	r3, r3, r1
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800399c:	4649      	mov	r1, r9
 800399e:	018b      	lsls	r3, r1, #6
 80039a0:	4641      	mov	r1, r8
 80039a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a6:	4641      	mov	r1, r8
 80039a8:	018a      	lsls	r2, r1, #6
 80039aa:	4641      	mov	r1, r8
 80039ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b0:	4649      	mov	r1, r9
 80039b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ca:	4692      	mov	sl, r2
 80039cc:	469b      	mov	fp, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	eb1a 0303 	adds.w	r3, sl, r3
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	462b      	mov	r3, r5
 80039d8:	eb4b 0303 	adc.w	r3, fp, r3
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039ea:	4629      	mov	r1, r5
 80039ec:	028b      	lsls	r3, r1, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f4:	4621      	mov	r1, r4
 80039f6:	028a      	lsls	r2, r1, #10
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a00:	2200      	movs	r2, #0
 8003a02:	673b      	str	r3, [r7, #112]	; 0x70
 8003a04:	677a      	str	r2, [r7, #116]	; 0x74
 8003a06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a0a:	f7fc fc59 	bl	80002c0 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4613      	mov	r3, r2
 8003a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a18:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a3a:	e0eb      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3c:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d06b      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	663b      	str	r3, [r7, #96]	; 0x60
 8003a68:	2300      	movs	r3, #0
 8003a6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a70:	4622      	mov	r2, r4
 8003a72:	462b      	mov	r3, r5
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	0159      	lsls	r1, r3, #5
 8003a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a82:	0150      	lsls	r0, r2, #5
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4621      	mov	r1, r4
 8003a8a:	1a51      	subs	r1, r2, r1
 8003a8c:	61b9      	str	r1, [r7, #24]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	eb63 0301 	sbc.w	r3, r3, r1
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	018b      	lsls	r3, r1, #6
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aac:	4651      	mov	r1, sl
 8003aae:	018a      	lsls	r2, r1, #6
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ab6:	4659      	mov	r1, fp
 8003ab8:	eb63 0901 	sbc.w	r9, r3, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003acc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad0:	4690      	mov	r8, r2
 8003ad2:	4699      	mov	r9, r3
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	eb18 0303 	adds.w	r3, r8, r3
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	462b      	mov	r3, r5
 8003ade:	eb49 0303 	adc.w	r3, r9, r3
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003af0:	4629      	mov	r1, r5
 8003af2:	024b      	lsls	r3, r1, #9
 8003af4:	4621      	mov	r1, r4
 8003af6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003afa:	4621      	mov	r1, r4
 8003afc:	024a      	lsls	r2, r1, #9
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b06:	2200      	movs	r2, #0
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b10:	f7fc fbd6 	bl	80002c0 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b1e:	e065      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x420>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	2200      	movs	r2, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	4611      	mov	r1, r2
 8003b38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b3e:	2300      	movs	r3, #0
 8003b40:	657b      	str	r3, [r7, #84]	; 0x54
 8003b42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b46:	4642      	mov	r2, r8
 8003b48:	464b      	mov	r3, r9
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b58:	0150      	lsls	r0, r2, #5
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4641      	mov	r1, r8
 8003b60:	1a51      	subs	r1, r2, r1
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	4649      	mov	r1, r9
 8003b66:	eb63 0301 	sbc.w	r3, r3, r1
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	018b      	lsls	r3, r1, #6
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b82:	4651      	mov	r1, sl
 8003b84:	018a      	lsls	r2, r1, #6
 8003b86:	4651      	mov	r1, sl
 8003b88:	1a54      	subs	r4, r2, r1
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	eb63 0501 	sbc.w	r5, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	00eb      	lsls	r3, r5, #3
 8003b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9e:	00e2      	lsls	r2, r4, #3
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	4643      	mov	r3, r8
 8003ba6:	18e3      	adds	r3, r4, r3
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	464b      	mov	r3, r9
 8003bac:	eb45 0303 	adc.w	r3, r5, r3
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	028b      	lsls	r3, r1, #10
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc8:	4621      	mov	r1, r4
 8003bca:	028a      	lsls	r2, r1, #10
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bde:	f7fc fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4613      	mov	r3, r2
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0f1b      	lsrs	r3, r3, #28
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	37b8      	adds	r7, #184	; 0xb8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400

08003c2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e28d      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8083 	beq.w	8003d52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c4c:	4b94      	ldr	r3, [pc, #592]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d019      	beq.n	8003c8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c58:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c64:	4b8e      	ldr	r3, [pc, #568]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d00c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c72:	4b8b      	ldr	r3, [pc, #556]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05b      	beq.n	8003d50 <HAL_RCC_OscConfig+0x124>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d157      	bne.n	8003d50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e25a      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x90>
 8003cae:	4b7c      	ldr	r3, [pc, #496]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7b      	ldr	r2, [pc, #492]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0xcc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xb4>
 8003cc6:	4b76      	ldr	r3, [pc, #472]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a75      	ldr	r2, [pc, #468]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b73      	ldr	r3, [pc, #460]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a72      	ldr	r2, [pc, #456]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0xcc>
 8003ce0:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6e      	ldr	r2, [pc, #440]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6b      	ldr	r2, [pc, #428]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fb06 	bl	8001310 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fb02 	bl	8001310 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e21f      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0xdc>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd faf2 	bl	8001310 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd faee 	bl	8001310 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e20b      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	4b57      	ldr	r3, [pc, #348]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x104>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06f      	beq.n	8003e3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d5e:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d017      	beq.n	8003d9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d105      	bne.n	8003d82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d11c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8e:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_RCC_OscConfig+0x186>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e1d3      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4937      	ldr	r1, [pc, #220]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc6:	e03a      	b.n	8003e3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd0:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_OscConfig+0x278>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fa9b 	bl	8001310 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dde:	f7fd fa97 	bl	8001310 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1b4      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfc:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4925      	ldr	r1, [pc, #148]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	e015      	b.n	8003e3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_OscConfig+0x278>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd fa7a 	bl	8001310 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e20:	f7fd fa76 	bl	8001310 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e193      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d036      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x27c>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd fa5a 	bl	8001310 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fd fa56 	bl	8001310 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e173      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_OscConfig+0x274>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x234>
 8003e7e:	e01b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd fa43 	bl	8001310 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	e00e      	b.n	8003eac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fa3f 	bl	8001310 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d907      	bls.n	8003eac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e15c      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	42470000 	.word	0x42470000
 8003ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b8a      	ldr	r3, [pc, #552]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ea      	bne.n	8003e8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8097 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eca:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	4b7f      	ldr	r3, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a7e      	ldr	r2, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef6:	4b79      	ldr	r3, [pc, #484]	; (80040dc <HAL_RCC_OscConfig+0x4b0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d118      	bne.n	8003f34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f02:	4b76      	ldr	r3, [pc, #472]	; (80040dc <HAL_RCC_OscConfig+0x4b0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a75      	ldr	r2, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x4b0>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd f9ff 	bl	8001310 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fd f9fb 	bl	8001310 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e118      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	4b6c      	ldr	r3, [pc, #432]	; (80040dc <HAL_RCC_OscConfig+0x4b0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCC_OscConfig+0x31e>
 8003f3c:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	e01c      	b.n	8003f84 <HAL_RCC_OscConfig+0x358>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x340>
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a5d      	ldr	r2, [pc, #372]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0x358>
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a59      	ldr	r2, [pc, #356]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd f9c0 	bl	8001310 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f94:	f7fd f9bc 	bl	8001310 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0d7      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003faa:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ee      	beq.n	8003f94 <HAL_RCC_OscConfig+0x368>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd f9aa 	bl	8001310 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fd f9a6 	bl	8001310 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0c1      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd6:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ee      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80ad 	beq.w	8004158 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d060      	beq.n	80040cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d145      	bne.n	800409e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x4b4>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd f97a 	bl	8001310 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd f976 	bl	8001310 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e093      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	3b01      	subs	r3, #1
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	491b      	ldr	r1, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4b4>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd f94b 	bl	8001310 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd f947 	bl	8001310 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e064      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x452>
 800409c:	e05c      	b.n	8004158 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x4b4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd f934 	bl	8001310 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fd f930 	bl	8001310 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e04d      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x480>
 80040ca:	e045      	b.n	8004158 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e040      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x538>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d030      	beq.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d129      	bne.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d122      	bne.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	4293      	cmp	r3, r2
 800411e:	d119      	bne.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	3b01      	subs	r3, #1
 800412e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d10f      	bne.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d107      	bne.n	8004154 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800

08004168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e03f      	b.n	80041fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc ff4c 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f929 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af02      	add	r7, sp, #8
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d17c      	bne.n	800431c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_Transmit+0x2c>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e075      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x3e>
 800423c:	2302      	movs	r3, #2
 800423e:	e06e      	b.n	800431e <HAL_UART_Transmit+0x11c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fd f85b 	bl	8001310 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x82>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004294:	e02a      	b.n	80042ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f840 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e036      	b.n	800431e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cf      	bne.n	8004296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f810 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b090      	sub	sp, #64	; 0x40
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004336:	e050      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d04c      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x30>
 8004346:	f7fc ffe3 	bl	8001310 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004352:	429a      	cmp	r2, r3
 8004354:	d241      	bcs.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004376:	637a      	str	r2, [r7, #52]	; 0x34
 8004378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043aa:	623a      	str	r2, [r7, #32]
 80043ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69f9      	ldr	r1, [r7, #28]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d09f      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3740      	adds	r7, #64	; 0x40
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b0c0      	sub	sp, #256	; 0x100
 800440a:	af00      	add	r7, sp, #0
 800440c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	ea40 0301 	orr.w	r3, r0, r1
 800442c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800445c:	f021 010c 	bic.w	r1, r1, #12
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446a:	430b      	orrs	r3, r1
 800446c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	6999      	ldr	r1, [r3, #24]
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	ea40 0301 	orr.w	r3, r0, r1
 800448a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b8f      	ldr	r3, [pc, #572]	; (80046d0 <UART_SetConfig+0x2cc>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <UART_SetConfig+0xa0>
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b8d      	ldr	r3, [pc, #564]	; (80046d4 <UART_SetConfig+0x2d0>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d104      	bne.n	80044ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7ff f97e 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 80044a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044ac:	e003      	b.n	80044b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ae:	f7ff f965 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 80044b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c0:	f040 810c 	bne.w	80046dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	1891      	adds	r1, r2, r2
 80044dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044de:	415b      	adcs	r3, r3
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044e6:	4621      	mov	r1, r4
 80044e8:	eb12 0801 	adds.w	r8, r2, r1
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb43 0901 	adc.w	r9, r3, r1
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004506:	4690      	mov	r8, r2
 8004508:	4699      	mov	r9, r3
 800450a:	4623      	mov	r3, r4
 800450c:	eb18 0303 	adds.w	r3, r8, r3
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004514:	462b      	mov	r3, r5
 8004516:	eb49 0303 	adc.w	r3, r9, r3
 800451a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800452a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800452e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004532:	460b      	mov	r3, r1
 8004534:	18db      	adds	r3, r3, r3
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 8004538:	4613      	mov	r3, r2
 800453a:	eb42 0303 	adc.w	r3, r2, r3
 800453e:	657b      	str	r3, [r7, #84]	; 0x54
 8004540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004548:	f7fb feba 	bl	80002c0 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <UART_SetConfig+0x2d4>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011c      	lsls	r4, r3, #4
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	1891      	adds	r1, r2, r2
 8004572:	64b9      	str	r1, [r7, #72]	; 0x48
 8004574:	415b      	adcs	r3, r3
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800457c:	4641      	mov	r1, r8
 800457e:	eb12 0a01 	adds.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb43 0b01 	adc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459c:	4692      	mov	sl, r2
 800459e:	469b      	mov	fp, r3
 80045a0:	4643      	mov	r3, r8
 80045a2:	eb1a 0303 	adds.w	r3, sl, r3
 80045a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb4b 0303 	adc.w	r3, fp, r3
 80045b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045c8:	460b      	mov	r3, r1
 80045ca:	18db      	adds	r3, r3, r3
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
 80045d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045de:	f7fb fe6f 	bl	80002c0 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <UART_SetConfig+0x2d4>)
 80045ea:	fba3 2301 	umull	r2, r3, r3, r1
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2264      	movs	r2, #100	; 0x64
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	1acb      	subs	r3, r1, r3
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <UART_SetConfig+0x2d4>)
 8004600:	fba3 2302 	umull	r2, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800460c:	441c      	add	r4, r3
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800461c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	63b9      	str	r1, [r7, #56]	; 0x38
 8004628:	415b      	adcs	r3, r3
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6339      	str	r1, [r7, #48]	; 0x30
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800467c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004684:	460b      	mov	r3, r1
 8004686:	18db      	adds	r3, r3, r3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	4613      	mov	r3, r2
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800469a:	f7fb fe11 	bl	80002c0 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <UART_SetConfig+0x2d4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <UART_SetConfig+0x2d4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 0207 	and.w	r2, r3, #7
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046cc:	e105      	b.n	80048da <UART_SetConfig+0x4d6>
 80046ce:	bf00      	nop
 80046d0:	40011000 	.word	0x40011000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ee:	4642      	mov	r2, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	1891      	adds	r1, r2, r2
 80046f4:	6239      	str	r1, [r7, #32]
 80046f6:	415b      	adcs	r3, r3
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fe:	4641      	mov	r1, r8
 8004700:	1854      	adds	r4, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb43 0501 	adc.w	r5, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	4643      	mov	r3, r8
 800471e:	18e3      	adds	r3, r4, r3
 8004720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004724:	464b      	mov	r3, r9
 8004726:	eb45 0303 	adc.w	r3, r5, r3
 800472a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800473a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800474a:	4629      	mov	r1, r5
 800474c:	008b      	lsls	r3, r1, #2
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004754:	4621      	mov	r1, r4
 8004756:	008a      	lsls	r2, r1, #2
 8004758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800475c:	f7fb fdb0 	bl	80002c0 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004766:	fba3 2302 	umull	r2, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800477c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	61b9      	str	r1, [r7, #24]
 8004788:	415b      	adcs	r3, r3
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6139      	str	r1, [r7, #16]
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047e8:	4649      	mov	r1, r9
 80047ea:	008b      	lsls	r3, r1, #2
 80047ec:	4641      	mov	r1, r8
 80047ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f2:	4641      	mov	r1, r8
 80047f4:	008a      	lsls	r2, r1, #2
 80047f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047fa:	f7fb fd61 	bl	80002c0 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a34      	ldr	r2, [pc, #208]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004822:	441c      	add	r4, r3
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	673b      	str	r3, [r7, #112]	; 0x70
 800482c:	677a      	str	r2, [r7, #116]	; 0x74
 800482e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	1891      	adds	r1, r2, r2
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	415b      	adcs	r3, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004842:	4641      	mov	r1, r8
 8004844:	1851      	adds	r1, r2, r1
 8004846:	6039      	str	r1, [r7, #0]
 8004848:	4649      	mov	r1, r9
 800484a:	414b      	adcs	r3, r1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800485a:	4659      	mov	r1, fp
 800485c:	00cb      	lsls	r3, r1, #3
 800485e:	4651      	mov	r1, sl
 8004860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004864:	4651      	mov	r1, sl
 8004866:	00ca      	lsls	r2, r1, #3
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	4603      	mov	r3, r0
 800486e:	4642      	mov	r2, r8
 8004870:	189b      	adds	r3, r3, r2
 8004872:	66bb      	str	r3, [r7, #104]	; 0x68
 8004874:	464b      	mov	r3, r9
 8004876:	460a      	mov	r2, r1
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	663b      	str	r3, [r7, #96]	; 0x60
 8004888:	667a      	str	r2, [r7, #100]	; 0x64
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004896:	4649      	mov	r1, r9
 8004898:	008b      	lsls	r3, r1, #2
 800489a:	4641      	mov	r1, r8
 800489c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a0:	4641      	mov	r1, r8
 80048a2:	008a      	lsls	r2, r1, #2
 80048a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048a8:	f7fb fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <UART_SetConfig+0x4e4>)
 80048b2:	fba3 1302 	umull	r1, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2164      	movs	r1, #100	; 0x64
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	3332      	adds	r3, #50	; 0x32
 80048c4:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <UART_SetConfig+0x4e4>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	f003 020f 	and.w	r2, r3, #15
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4422      	add	r2, r4
 80048d8:	609a      	str	r2, [r3, #8]
}
 80048da:	bf00      	nop
 80048dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	51eb851f 	.word	0x51eb851f

080048ec <__errno>:
 80048ec:	4b01      	ldr	r3, [pc, #4]	; (80048f4 <__errno+0x8>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	; (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	; (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	; (800493c <__libc_init_array+0x44>)
 800490c:	f000 fc8e 	bl	800522c <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	080052b4 	.word	0x080052b4
 8004934:	080052b4 	.word	0x080052b4
 8004938:	080052b4 	.word	0x080052b4
 800493c:	080052b8 	.word	0x080052b8

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <siprintf>:
 8004950:	b40e      	push	{r1, r2, r3}
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <siprintf+0x38>)
 8004962:	9107      	str	r1, [sp, #28]
 8004964:	9104      	str	r1, [sp, #16]
 8004966:	4909      	ldr	r1, [pc, #36]	; (800498c <siprintf+0x3c>)
 8004968:	f853 2b04 	ldr.w	r2, [r3], #4
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	a902      	add	r1, sp, #8
 8004974:	f000 f868 	bl	8004a48 <_svfiprintf_r>
 8004978:	9b02      	ldr	r3, [sp, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	b01c      	add	sp, #112	; 0x70
 8004980:	f85d eb04 	ldr.w	lr, [sp], #4
 8004984:	b003      	add	sp, #12
 8004986:	4770      	bx	lr
 8004988:	2000000c 	.word	0x2000000c
 800498c:	ffff0208 	.word	0xffff0208

08004990 <__ssputs_r>:
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	688e      	ldr	r6, [r1, #8]
 8004996:	429e      	cmp	r6, r3
 8004998:	4682      	mov	sl, r0
 800499a:	460c      	mov	r4, r1
 800499c:	4690      	mov	r8, r2
 800499e:	461f      	mov	r7, r3
 80049a0:	d838      	bhi.n	8004a14 <__ssputs_r+0x84>
 80049a2:	898a      	ldrh	r2, [r1, #12]
 80049a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049a8:	d032      	beq.n	8004a10 <__ssputs_r+0x80>
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	6909      	ldr	r1, [r1, #16]
 80049ae:	eba5 0901 	sub.w	r9, r5, r1
 80049b2:	6965      	ldr	r5, [r4, #20]
 80049b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049bc:	3301      	adds	r3, #1
 80049be:	444b      	add	r3, r9
 80049c0:	106d      	asrs	r5, r5, #1
 80049c2:	429d      	cmp	r5, r3
 80049c4:	bf38      	it	cc
 80049c6:	461d      	movcc	r5, r3
 80049c8:	0553      	lsls	r3, r2, #21
 80049ca:	d531      	bpl.n	8004a30 <__ssputs_r+0xa0>
 80049cc:	4629      	mov	r1, r5
 80049ce:	f000 fb63 	bl	8005098 <_malloc_r>
 80049d2:	4606      	mov	r6, r0
 80049d4:	b950      	cbnz	r0, 80049ec <__ssputs_r+0x5c>
 80049d6:	230c      	movs	r3, #12
 80049d8:	f8ca 3000 	str.w	r3, [sl]
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	6921      	ldr	r1, [r4, #16]
 80049ee:	464a      	mov	r2, r9
 80049f0:	f000 fabe 	bl	8004f70 <memcpy>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	6126      	str	r6, [r4, #16]
 8004a02:	6165      	str	r5, [r4, #20]
 8004a04:	444e      	add	r6, r9
 8004a06:	eba5 0509 	sub.w	r5, r5, r9
 8004a0a:	6026      	str	r6, [r4, #0]
 8004a0c:	60a5      	str	r5, [r4, #8]
 8004a0e:	463e      	mov	r6, r7
 8004a10:	42be      	cmp	r6, r7
 8004a12:	d900      	bls.n	8004a16 <__ssputs_r+0x86>
 8004a14:	463e      	mov	r6, r7
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	4632      	mov	r2, r6
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	f000 fab6 	bl	8004f8c <memmove>
 8004a20:	68a3      	ldr	r3, [r4, #8]
 8004a22:	1b9b      	subs	r3, r3, r6
 8004a24:	60a3      	str	r3, [r4, #8]
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	4433      	add	r3, r6
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e7db      	b.n	80049e8 <__ssputs_r+0x58>
 8004a30:	462a      	mov	r2, r5
 8004a32:	f000 fba5 	bl	8005180 <_realloc_r>
 8004a36:	4606      	mov	r6, r0
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1e1      	bne.n	8004a00 <__ssputs_r+0x70>
 8004a3c:	6921      	ldr	r1, [r4, #16]
 8004a3e:	4650      	mov	r0, sl
 8004a40:	f000 fabe 	bl	8004fc0 <_free_r>
 8004a44:	e7c7      	b.n	80049d6 <__ssputs_r+0x46>
	...

08004a48 <_svfiprintf_r>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	4698      	mov	r8, r3
 8004a4e:	898b      	ldrh	r3, [r1, #12]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	b09d      	sub	sp, #116	; 0x74
 8004a54:	4607      	mov	r7, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	4614      	mov	r4, r2
 8004a5a:	d50e      	bpl.n	8004a7a <_svfiprintf_r+0x32>
 8004a5c:	690b      	ldr	r3, [r1, #16]
 8004a5e:	b963      	cbnz	r3, 8004a7a <_svfiprintf_r+0x32>
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	f000 fb19 	bl	8005098 <_malloc_r>
 8004a66:	6028      	str	r0, [r5, #0]
 8004a68:	6128      	str	r0, [r5, #16]
 8004a6a:	b920      	cbnz	r0, 8004a76 <_svfiprintf_r+0x2e>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e0d1      	b.n	8004c1a <_svfiprintf_r+0x1d2>
 8004a76:	2340      	movs	r3, #64	; 0x40
 8004a78:	616b      	str	r3, [r5, #20]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7e:	2320      	movs	r3, #32
 8004a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a88:	2330      	movs	r3, #48	; 0x30
 8004a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c34 <_svfiprintf_r+0x1ec>
 8004a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a92:	f04f 0901 	mov.w	r9, #1
 8004a96:	4623      	mov	r3, r4
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a9e:	b10a      	cbz	r2, 8004aa4 <_svfiprintf_r+0x5c>
 8004aa0:	2a25      	cmp	r2, #37	; 0x25
 8004aa2:	d1f9      	bne.n	8004a98 <_svfiprintf_r+0x50>
 8004aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa8:	d00b      	beq.n	8004ac2 <_svfiprintf_r+0x7a>
 8004aaa:	465b      	mov	r3, fp
 8004aac:	4622      	mov	r2, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f7ff ff6d 	bl	8004990 <__ssputs_r>
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f000 80aa 	beq.w	8004c10 <_svfiprintf_r+0x1c8>
 8004abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004abe:	445a      	add	r2, fp
 8004ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80a2 	beq.w	8004c10 <_svfiprintf_r+0x1c8>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad6:	f10a 0a01 	add.w	sl, sl, #1
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	9307      	str	r3, [sp, #28]
 8004ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ae4:	4654      	mov	r4, sl
 8004ae6:	2205      	movs	r2, #5
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	4851      	ldr	r0, [pc, #324]	; (8004c34 <_svfiprintf_r+0x1ec>)
 8004aee:	f7fb fb97 	bl	8000220 <memchr>
 8004af2:	9a04      	ldr	r2, [sp, #16]
 8004af4:	b9d8      	cbnz	r0, 8004b2e <_svfiprintf_r+0xe6>
 8004af6:	06d0      	lsls	r0, r2, #27
 8004af8:	bf44      	itt	mi
 8004afa:	2320      	movmi	r3, #32
 8004afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b00:	0711      	lsls	r1, r2, #28
 8004b02:	bf44      	itt	mi
 8004b04:	232b      	movmi	r3, #43	; 0x2b
 8004b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b10:	d015      	beq.n	8004b3e <_svfiprintf_r+0xf6>
 8004b12:	9a07      	ldr	r2, [sp, #28]
 8004b14:	4654      	mov	r4, sl
 8004b16:	2000      	movs	r0, #0
 8004b18:	f04f 0c0a 	mov.w	ip, #10
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b22:	3b30      	subs	r3, #48	; 0x30
 8004b24:	2b09      	cmp	r3, #9
 8004b26:	d94e      	bls.n	8004bc6 <_svfiprintf_r+0x17e>
 8004b28:	b1b0      	cbz	r0, 8004b58 <_svfiprintf_r+0x110>
 8004b2a:	9207      	str	r2, [sp, #28]
 8004b2c:	e014      	b.n	8004b58 <_svfiprintf_r+0x110>
 8004b2e:	eba0 0308 	sub.w	r3, r0, r8
 8004b32:	fa09 f303 	lsl.w	r3, r9, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	46a2      	mov	sl, r4
 8004b3c:	e7d2      	b.n	8004ae4 <_svfiprintf_r+0x9c>
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	1d19      	adds	r1, r3, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	9103      	str	r1, [sp, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfbb      	ittet	lt
 8004b4a:	425b      	neglt	r3, r3
 8004b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b50:	9307      	strge	r3, [sp, #28]
 8004b52:	9307      	strlt	r3, [sp, #28]
 8004b54:	bfb8      	it	lt
 8004b56:	9204      	strlt	r2, [sp, #16]
 8004b58:	7823      	ldrb	r3, [r4, #0]
 8004b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b5c:	d10c      	bne.n	8004b78 <_svfiprintf_r+0x130>
 8004b5e:	7863      	ldrb	r3, [r4, #1]
 8004b60:	2b2a      	cmp	r3, #42	; 0x2a
 8004b62:	d135      	bne.n	8004bd0 <_svfiprintf_r+0x188>
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	1d1a      	adds	r2, r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	9203      	str	r2, [sp, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bfb8      	it	lt
 8004b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b74:	3402      	adds	r4, #2
 8004b76:	9305      	str	r3, [sp, #20]
 8004b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c44 <_svfiprintf_r+0x1fc>
 8004b7c:	7821      	ldrb	r1, [r4, #0]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	4650      	mov	r0, sl
 8004b82:	f7fb fb4d 	bl	8000220 <memchr>
 8004b86:	b140      	cbz	r0, 8004b9a <_svfiprintf_r+0x152>
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	eba0 000a 	sub.w	r0, r0, sl
 8004b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	4303      	orrs	r3, r0
 8004b96:	3401      	adds	r4, #1
 8004b98:	9304      	str	r3, [sp, #16]
 8004b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9e:	4826      	ldr	r0, [pc, #152]	; (8004c38 <_svfiprintf_r+0x1f0>)
 8004ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ba4:	2206      	movs	r2, #6
 8004ba6:	f7fb fb3b 	bl	8000220 <memchr>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d038      	beq.n	8004c20 <_svfiprintf_r+0x1d8>
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <_svfiprintf_r+0x1f4>)
 8004bb0:	bb1b      	cbnz	r3, 8004bfa <_svfiprintf_r+0x1b2>
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	3307      	adds	r3, #7
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	3308      	adds	r3, #8
 8004bbc:	9303      	str	r3, [sp, #12]
 8004bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc0:	4433      	add	r3, r6
 8004bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc4:	e767      	b.n	8004a96 <_svfiprintf_r+0x4e>
 8004bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bca:	460c      	mov	r4, r1
 8004bcc:	2001      	movs	r0, #1
 8004bce:	e7a5      	b.n	8004b1c <_svfiprintf_r+0xd4>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	3401      	adds	r4, #1
 8004bd4:	9305      	str	r3, [sp, #20]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f04f 0c0a 	mov.w	ip, #10
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be2:	3a30      	subs	r2, #48	; 0x30
 8004be4:	2a09      	cmp	r2, #9
 8004be6:	d903      	bls.n	8004bf0 <_svfiprintf_r+0x1a8>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0c5      	beq.n	8004b78 <_svfiprintf_r+0x130>
 8004bec:	9105      	str	r1, [sp, #20]
 8004bee:	e7c3      	b.n	8004b78 <_svfiprintf_r+0x130>
 8004bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e7f0      	b.n	8004bdc <_svfiprintf_r+0x194>
 8004bfa:	ab03      	add	r3, sp, #12
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <_svfiprintf_r+0x1f8>)
 8004c02:	a904      	add	r1, sp, #16
 8004c04:	4638      	mov	r0, r7
 8004c06:	f3af 8000 	nop.w
 8004c0a:	1c42      	adds	r2, r0, #1
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	d1d6      	bne.n	8004bbe <_svfiprintf_r+0x176>
 8004c10:	89ab      	ldrh	r3, [r5, #12]
 8004c12:	065b      	lsls	r3, r3, #25
 8004c14:	f53f af2c 	bmi.w	8004a70 <_svfiprintf_r+0x28>
 8004c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c1a:	b01d      	add	sp, #116	; 0x74
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	ab03      	add	r3, sp, #12
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	462a      	mov	r2, r5
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <_svfiprintf_r+0x1f8>)
 8004c28:	a904      	add	r1, sp, #16
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f000 f87a 	bl	8004d24 <_printf_i>
 8004c30:	e7eb      	b.n	8004c0a <_svfiprintf_r+0x1c2>
 8004c32:	bf00      	nop
 8004c34:	08005278 	.word	0x08005278
 8004c38:	08005282 	.word	0x08005282
 8004c3c:	00000000 	.word	0x00000000
 8004c40:	08004991 	.word	0x08004991
 8004c44:	0800527e 	.word	0x0800527e

08004c48 <_printf_common>:
 8004c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	4616      	mov	r6, r2
 8004c4e:	4699      	mov	r9, r3
 8004c50:	688a      	ldr	r2, [r1, #8]
 8004c52:	690b      	ldr	r3, [r1, #16]
 8004c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bfb8      	it	lt
 8004c5c:	4613      	movlt	r3, r2
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c64:	4607      	mov	r7, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	b10a      	cbz	r2, 8004c6e <_printf_common+0x26>
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	0699      	lsls	r1, r3, #26
 8004c72:	bf42      	ittt	mi
 8004c74:	6833      	ldrmi	r3, [r6, #0]
 8004c76:	3302      	addmi	r3, #2
 8004c78:	6033      	strmi	r3, [r6, #0]
 8004c7a:	6825      	ldr	r5, [r4, #0]
 8004c7c:	f015 0506 	ands.w	r5, r5, #6
 8004c80:	d106      	bne.n	8004c90 <_printf_common+0x48>
 8004c82:	f104 0a19 	add.w	sl, r4, #25
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	6832      	ldr	r2, [r6, #0]
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	42ab      	cmp	r3, r5
 8004c8e:	dc26      	bgt.n	8004cde <_printf_common+0x96>
 8004c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c94:	1e13      	subs	r3, r2, #0
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	bf18      	it	ne
 8004c9a:	2301      	movne	r3, #1
 8004c9c:	0692      	lsls	r2, r2, #26
 8004c9e:	d42b      	bmi.n	8004cf8 <_printf_common+0xb0>
 8004ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	47c0      	blx	r8
 8004caa:	3001      	adds	r0, #1
 8004cac:	d01e      	beq.n	8004cec <_printf_common+0xa4>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	68e5      	ldr	r5, [r4, #12]
 8004cb2:	6832      	ldr	r2, [r6, #0]
 8004cb4:	f003 0306 	and.w	r3, r3, #6
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	bf08      	it	eq
 8004cbc:	1aad      	subeq	r5, r5, r2
 8004cbe:	68a3      	ldr	r3, [r4, #8]
 8004cc0:	6922      	ldr	r2, [r4, #16]
 8004cc2:	bf0c      	ite	eq
 8004cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc8:	2500      	movne	r5, #0
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	bfc4      	itt	gt
 8004cce:	1a9b      	subgt	r3, r3, r2
 8004cd0:	18ed      	addgt	r5, r5, r3
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	341a      	adds	r4, #26
 8004cd6:	42b5      	cmp	r5, r6
 8004cd8:	d11a      	bne.n	8004d10 <_printf_common+0xc8>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e008      	b.n	8004cf0 <_printf_common+0xa8>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4652      	mov	r2, sl
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	47c0      	blx	r8
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d103      	bne.n	8004cf4 <_printf_common+0xac>
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	e7c6      	b.n	8004c86 <_printf_common+0x3e>
 8004cf8:	18e1      	adds	r1, r4, r3
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	2030      	movs	r0, #48	; 0x30
 8004cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d02:	4422      	add	r2, r4
 8004d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	e7c7      	b.n	8004ca0 <_printf_common+0x58>
 8004d10:	2301      	movs	r3, #1
 8004d12:	4622      	mov	r2, r4
 8004d14:	4649      	mov	r1, r9
 8004d16:	4638      	mov	r0, r7
 8004d18:	47c0      	blx	r8
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d0e6      	beq.n	8004cec <_printf_common+0xa4>
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7d9      	b.n	8004cd6 <_printf_common+0x8e>
	...

08004d24 <_printf_i>:
 8004d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	7e0f      	ldrb	r7, [r1, #24]
 8004d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d2c:	2f78      	cmp	r7, #120	; 0x78
 8004d2e:	4691      	mov	r9, r2
 8004d30:	4680      	mov	r8, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	469a      	mov	sl, r3
 8004d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d3a:	d807      	bhi.n	8004d4c <_printf_i+0x28>
 8004d3c:	2f62      	cmp	r7, #98	; 0x62
 8004d3e:	d80a      	bhi.n	8004d56 <_printf_i+0x32>
 8004d40:	2f00      	cmp	r7, #0
 8004d42:	f000 80d8 	beq.w	8004ef6 <_printf_i+0x1d2>
 8004d46:	2f58      	cmp	r7, #88	; 0x58
 8004d48:	f000 80a3 	beq.w	8004e92 <_printf_i+0x16e>
 8004d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d54:	e03a      	b.n	8004dcc <_printf_i+0xa8>
 8004d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d5a:	2b15      	cmp	r3, #21
 8004d5c:	d8f6      	bhi.n	8004d4c <_printf_i+0x28>
 8004d5e:	a101      	add	r1, pc, #4	; (adr r1, 8004d64 <_printf_i+0x40>)
 8004d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004dd1 	.word	0x08004dd1
 8004d6c:	08004d4d 	.word	0x08004d4d
 8004d70:	08004d4d 	.word	0x08004d4d
 8004d74:	08004d4d 	.word	0x08004d4d
 8004d78:	08004d4d 	.word	0x08004d4d
 8004d7c:	08004dd1 	.word	0x08004dd1
 8004d80:	08004d4d 	.word	0x08004d4d
 8004d84:	08004d4d 	.word	0x08004d4d
 8004d88:	08004d4d 	.word	0x08004d4d
 8004d8c:	08004d4d 	.word	0x08004d4d
 8004d90:	08004edd 	.word	0x08004edd
 8004d94:	08004e01 	.word	0x08004e01
 8004d98:	08004ebf 	.word	0x08004ebf
 8004d9c:	08004d4d 	.word	0x08004d4d
 8004da0:	08004d4d 	.word	0x08004d4d
 8004da4:	08004eff 	.word	0x08004eff
 8004da8:	08004d4d 	.word	0x08004d4d
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004d4d 	.word	0x08004d4d
 8004db4:	08004d4d 	.word	0x08004d4d
 8004db8:	08004ec7 	.word	0x08004ec7
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	602a      	str	r2, [r5, #0]
 8004dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0a3      	b.n	8004f18 <_printf_i+0x1f4>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	6829      	ldr	r1, [r5, #0]
 8004dd4:	0606      	lsls	r6, r0, #24
 8004dd6:	f101 0304 	add.w	r3, r1, #4
 8004dda:	d50a      	bpl.n	8004df2 <_printf_i+0xce>
 8004ddc:	680e      	ldr	r6, [r1, #0]
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	2e00      	cmp	r6, #0
 8004de2:	da03      	bge.n	8004dec <_printf_i+0xc8>
 8004de4:	232d      	movs	r3, #45	; 0x2d
 8004de6:	4276      	negs	r6, r6
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dec:	485e      	ldr	r0, [pc, #376]	; (8004f68 <_printf_i+0x244>)
 8004dee:	230a      	movs	r3, #10
 8004df0:	e019      	b.n	8004e26 <_printf_i+0x102>
 8004df2:	680e      	ldr	r6, [r1, #0]
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dfa:	bf18      	it	ne
 8004dfc:	b236      	sxthne	r6, r6
 8004dfe:	e7ef      	b.n	8004de0 <_printf_i+0xbc>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	1d19      	adds	r1, r3, #4
 8004e06:	6029      	str	r1, [r5, #0]
 8004e08:	0601      	lsls	r1, r0, #24
 8004e0a:	d501      	bpl.n	8004e10 <_printf_i+0xec>
 8004e0c:	681e      	ldr	r6, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <_printf_i+0xf2>
 8004e10:	0646      	lsls	r6, r0, #25
 8004e12:	d5fb      	bpl.n	8004e0c <_printf_i+0xe8>
 8004e14:	881e      	ldrh	r6, [r3, #0]
 8004e16:	4854      	ldr	r0, [pc, #336]	; (8004f68 <_printf_i+0x244>)
 8004e18:	2f6f      	cmp	r7, #111	; 0x6f
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2308      	moveq	r3, #8
 8004e1e:	230a      	movne	r3, #10
 8004e20:	2100      	movs	r1, #0
 8004e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e26:	6865      	ldr	r5, [r4, #4]
 8004e28:	60a5      	str	r5, [r4, #8]
 8004e2a:	2d00      	cmp	r5, #0
 8004e2c:	bfa2      	ittt	ge
 8004e2e:	6821      	ldrge	r1, [r4, #0]
 8004e30:	f021 0104 	bicge.w	r1, r1, #4
 8004e34:	6021      	strge	r1, [r4, #0]
 8004e36:	b90e      	cbnz	r6, 8004e3c <_printf_i+0x118>
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	d04d      	beq.n	8004ed8 <_printf_i+0x1b4>
 8004e3c:	4615      	mov	r5, r2
 8004e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e42:	fb03 6711 	mls	r7, r3, r1, r6
 8004e46:	5dc7      	ldrb	r7, [r0, r7]
 8004e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e4c:	4637      	mov	r7, r6
 8004e4e:	42bb      	cmp	r3, r7
 8004e50:	460e      	mov	r6, r1
 8004e52:	d9f4      	bls.n	8004e3e <_printf_i+0x11a>
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d10b      	bne.n	8004e70 <_printf_i+0x14c>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07de      	lsls	r6, r3, #31
 8004e5c:	d508      	bpl.n	8004e70 <_printf_i+0x14c>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	6861      	ldr	r1, [r4, #4]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	bfde      	ittt	le
 8004e66:	2330      	movle	r3, #48	; 0x30
 8004e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e70:	1b52      	subs	r2, r2, r5
 8004e72:	6122      	str	r2, [r4, #16]
 8004e74:	f8cd a000 	str.w	sl, [sp]
 8004e78:	464b      	mov	r3, r9
 8004e7a:	aa03      	add	r2, sp, #12
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4640      	mov	r0, r8
 8004e80:	f7ff fee2 	bl	8004c48 <_printf_common>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d14c      	bne.n	8004f22 <_printf_i+0x1fe>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	b004      	add	sp, #16
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	4835      	ldr	r0, [pc, #212]	; (8004f68 <_printf_i+0x244>)
 8004e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e98:	6829      	ldr	r1, [r5, #0]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ea0:	6029      	str	r1, [r5, #0]
 8004ea2:	061d      	lsls	r5, r3, #24
 8004ea4:	d514      	bpl.n	8004ed0 <_printf_i+0x1ac>
 8004ea6:	07df      	lsls	r7, r3, #31
 8004ea8:	bf44      	itt	mi
 8004eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004eae:	6023      	strmi	r3, [r4, #0]
 8004eb0:	b91e      	cbnz	r6, 8004eba <_printf_i+0x196>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f023 0320 	bic.w	r3, r3, #32
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	2310      	movs	r3, #16
 8004ebc:	e7b0      	b.n	8004e20 <_printf_i+0xfc>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	f043 0320 	orr.w	r3, r3, #32
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	2378      	movs	r3, #120	; 0x78
 8004ec8:	4828      	ldr	r0, [pc, #160]	; (8004f6c <_printf_i+0x248>)
 8004eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ece:	e7e3      	b.n	8004e98 <_printf_i+0x174>
 8004ed0:	0659      	lsls	r1, r3, #25
 8004ed2:	bf48      	it	mi
 8004ed4:	b2b6      	uxthmi	r6, r6
 8004ed6:	e7e6      	b.n	8004ea6 <_printf_i+0x182>
 8004ed8:	4615      	mov	r5, r2
 8004eda:	e7bb      	b.n	8004e54 <_printf_i+0x130>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6826      	ldr	r6, [r4, #0]
 8004ee0:	6961      	ldr	r1, [r4, #20]
 8004ee2:	1d18      	adds	r0, r3, #4
 8004ee4:	6028      	str	r0, [r5, #0]
 8004ee6:	0635      	lsls	r5, r6, #24
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	d501      	bpl.n	8004ef0 <_printf_i+0x1cc>
 8004eec:	6019      	str	r1, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <_printf_i+0x1d2>
 8004ef0:	0670      	lsls	r0, r6, #25
 8004ef2:	d5fb      	bpl.n	8004eec <_printf_i+0x1c8>
 8004ef4:	8019      	strh	r1, [r3, #0]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6123      	str	r3, [r4, #16]
 8004efa:	4615      	mov	r5, r2
 8004efc:	e7ba      	b.n	8004e74 <_printf_i+0x150>
 8004efe:	682b      	ldr	r3, [r5, #0]
 8004f00:	1d1a      	adds	r2, r3, #4
 8004f02:	602a      	str	r2, [r5, #0]
 8004f04:	681d      	ldr	r5, [r3, #0]
 8004f06:	6862      	ldr	r2, [r4, #4]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7fb f988 	bl	8000220 <memchr>
 8004f10:	b108      	cbz	r0, 8004f16 <_printf_i+0x1f2>
 8004f12:	1b40      	subs	r0, r0, r5
 8004f14:	6060      	str	r0, [r4, #4]
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	6123      	str	r3, [r4, #16]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f20:	e7a8      	b.n	8004e74 <_printf_i+0x150>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	462a      	mov	r2, r5
 8004f26:	4649      	mov	r1, r9
 8004f28:	4640      	mov	r0, r8
 8004f2a:	47d0      	blx	sl
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d0ab      	beq.n	8004e88 <_printf_i+0x164>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	079b      	lsls	r3, r3, #30
 8004f34:	d413      	bmi.n	8004f5e <_printf_i+0x23a>
 8004f36:	68e0      	ldr	r0, [r4, #12]
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	4298      	cmp	r0, r3
 8004f3c:	bfb8      	it	lt
 8004f3e:	4618      	movlt	r0, r3
 8004f40:	e7a4      	b.n	8004e8c <_printf_i+0x168>
 8004f42:	2301      	movs	r3, #1
 8004f44:	4632      	mov	r2, r6
 8004f46:	4649      	mov	r1, r9
 8004f48:	4640      	mov	r0, r8
 8004f4a:	47d0      	blx	sl
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d09b      	beq.n	8004e88 <_printf_i+0x164>
 8004f50:	3501      	adds	r5, #1
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	9903      	ldr	r1, [sp, #12]
 8004f56:	1a5b      	subs	r3, r3, r1
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dcf2      	bgt.n	8004f42 <_printf_i+0x21e>
 8004f5c:	e7eb      	b.n	8004f36 <_printf_i+0x212>
 8004f5e:	2500      	movs	r5, #0
 8004f60:	f104 0619 	add.w	r6, r4, #25
 8004f64:	e7f5      	b.n	8004f52 <_printf_i+0x22e>
 8004f66:	bf00      	nop
 8004f68:	08005289 	.word	0x08005289
 8004f6c:	0800529a 	.word	0x0800529a

08004f70 <memcpy>:
 8004f70:	440a      	add	r2, r1
 8004f72:	4291      	cmp	r1, r2
 8004f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f78:	d100      	bne.n	8004f7c <memcpy+0xc>
 8004f7a:	4770      	bx	lr
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f86:	4291      	cmp	r1, r2
 8004f88:	d1f9      	bne.n	8004f7e <memcpy+0xe>
 8004f8a:	bd10      	pop	{r4, pc}

08004f8c <memmove>:
 8004f8c:	4288      	cmp	r0, r1
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	eb01 0402 	add.w	r4, r1, r2
 8004f94:	d902      	bls.n	8004f9c <memmove+0x10>
 8004f96:	4284      	cmp	r4, r0
 8004f98:	4623      	mov	r3, r4
 8004f9a:	d807      	bhi.n	8004fac <memmove+0x20>
 8004f9c:	1e43      	subs	r3, r0, #1
 8004f9e:	42a1      	cmp	r1, r4
 8004fa0:	d008      	beq.n	8004fb4 <memmove+0x28>
 8004fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004faa:	e7f8      	b.n	8004f9e <memmove+0x12>
 8004fac:	4402      	add	r2, r0
 8004fae:	4601      	mov	r1, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d100      	bne.n	8004fb6 <memmove+0x2a>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fbe:	e7f7      	b.n	8004fb0 <memmove+0x24>

08004fc0 <_free_r>:
 8004fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d044      	beq.n	8005050 <_free_r+0x90>
 8004fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fca:	9001      	str	r0, [sp, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f1a1 0404 	sub.w	r4, r1, #4
 8004fd2:	bfb8      	it	lt
 8004fd4:	18e4      	addlt	r4, r4, r3
 8004fd6:	f000 f913 	bl	8005200 <__malloc_lock>
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <_free_r+0x94>)
 8004fdc:	9801      	ldr	r0, [sp, #4]
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	b933      	cbnz	r3, 8004ff0 <_free_r+0x30>
 8004fe2:	6063      	str	r3, [r4, #4]
 8004fe4:	6014      	str	r4, [r2, #0]
 8004fe6:	b003      	add	sp, #12
 8004fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fec:	f000 b90e 	b.w	800520c <__malloc_unlock>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d908      	bls.n	8005006 <_free_r+0x46>
 8004ff4:	6825      	ldr	r5, [r4, #0]
 8004ff6:	1961      	adds	r1, r4, r5
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	bf01      	itttt	eq
 8004ffc:	6819      	ldreq	r1, [r3, #0]
 8004ffe:	685b      	ldreq	r3, [r3, #4]
 8005000:	1949      	addeq	r1, r1, r5
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	e7ed      	b.n	8004fe2 <_free_r+0x22>
 8005006:	461a      	mov	r2, r3
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	b10b      	cbz	r3, 8005010 <_free_r+0x50>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d9fa      	bls.n	8005006 <_free_r+0x46>
 8005010:	6811      	ldr	r1, [r2, #0]
 8005012:	1855      	adds	r5, r2, r1
 8005014:	42a5      	cmp	r5, r4
 8005016:	d10b      	bne.n	8005030 <_free_r+0x70>
 8005018:	6824      	ldr	r4, [r4, #0]
 800501a:	4421      	add	r1, r4
 800501c:	1854      	adds	r4, r2, r1
 800501e:	42a3      	cmp	r3, r4
 8005020:	6011      	str	r1, [r2, #0]
 8005022:	d1e0      	bne.n	8004fe6 <_free_r+0x26>
 8005024:	681c      	ldr	r4, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	6053      	str	r3, [r2, #4]
 800502a:	4421      	add	r1, r4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	e7da      	b.n	8004fe6 <_free_r+0x26>
 8005030:	d902      	bls.n	8005038 <_free_r+0x78>
 8005032:	230c      	movs	r3, #12
 8005034:	6003      	str	r3, [r0, #0]
 8005036:	e7d6      	b.n	8004fe6 <_free_r+0x26>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	1961      	adds	r1, r4, r5
 800503c:	428b      	cmp	r3, r1
 800503e:	bf04      	itt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	bf04      	itt	eq
 8005048:	1949      	addeq	r1, r1, r5
 800504a:	6021      	streq	r1, [r4, #0]
 800504c:	6054      	str	r4, [r2, #4]
 800504e:	e7ca      	b.n	8004fe6 <_free_r+0x26>
 8005050:	b003      	add	sp, #12
 8005052:	bd30      	pop	{r4, r5, pc}
 8005054:	20000450 	.word	0x20000450

08005058 <sbrk_aligned>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0e      	ldr	r6, [pc, #56]	; (8005094 <sbrk_aligned+0x3c>)
 800505c:	460c      	mov	r4, r1
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	4605      	mov	r5, r0
 8005062:	b911      	cbnz	r1, 800506a <sbrk_aligned+0x12>
 8005064:	f000 f8bc 	bl	80051e0 <_sbrk_r>
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8b7 	bl	80051e0 <_sbrk_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	d00a      	beq.n	800508c <sbrk_aligned+0x34>
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d007      	beq.n	8005090 <sbrk_aligned+0x38>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f8ac 	bl	80051e0 <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d101      	bne.n	8005090 <sbrk_aligned+0x38>
 800508c:	f04f 34ff 	mov.w	r4, #4294967295
 8005090:	4620      	mov	r0, r4
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	20000454 	.word	0x20000454

08005098 <_malloc_r>:
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	1ccd      	adds	r5, r1, #3
 800509e:	f025 0503 	bic.w	r5, r5, #3
 80050a2:	3508      	adds	r5, #8
 80050a4:	2d0c      	cmp	r5, #12
 80050a6:	bf38      	it	cc
 80050a8:	250c      	movcc	r5, #12
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	4607      	mov	r7, r0
 80050ae:	db01      	blt.n	80050b4 <_malloc_r+0x1c>
 80050b0:	42a9      	cmp	r1, r5
 80050b2:	d905      	bls.n	80050c0 <_malloc_r+0x28>
 80050b4:	230c      	movs	r3, #12
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	2600      	movs	r6, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	4e2e      	ldr	r6, [pc, #184]	; (800517c <_malloc_r+0xe4>)
 80050c2:	f000 f89d 	bl	8005200 <__malloc_lock>
 80050c6:	6833      	ldr	r3, [r6, #0]
 80050c8:	461c      	mov	r4, r3
 80050ca:	bb34      	cbnz	r4, 800511a <_malloc_r+0x82>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ffc2 	bl	8005058 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	4604      	mov	r4, r0
 80050d8:	d14d      	bne.n	8005176 <_malloc_r+0xde>
 80050da:	6834      	ldr	r4, [r6, #0]
 80050dc:	4626      	mov	r6, r4
 80050de:	2e00      	cmp	r6, #0
 80050e0:	d140      	bne.n	8005164 <_malloc_r+0xcc>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4631      	mov	r1, r6
 80050e6:	4638      	mov	r0, r7
 80050e8:	eb04 0803 	add.w	r8, r4, r3
 80050ec:	f000 f878 	bl	80051e0 <_sbrk_r>
 80050f0:	4580      	cmp	r8, r0
 80050f2:	d13a      	bne.n	800516a <_malloc_r+0xd2>
 80050f4:	6821      	ldr	r1, [r4, #0]
 80050f6:	3503      	adds	r5, #3
 80050f8:	1a6d      	subs	r5, r5, r1
 80050fa:	f025 0503 	bic.w	r5, r5, #3
 80050fe:	3508      	adds	r5, #8
 8005100:	2d0c      	cmp	r5, #12
 8005102:	bf38      	it	cc
 8005104:	250c      	movcc	r5, #12
 8005106:	4629      	mov	r1, r5
 8005108:	4638      	mov	r0, r7
 800510a:	f7ff ffa5 	bl	8005058 <sbrk_aligned>
 800510e:	3001      	adds	r0, #1
 8005110:	d02b      	beq.n	800516a <_malloc_r+0xd2>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	442b      	add	r3, r5
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	e00e      	b.n	8005138 <_malloc_r+0xa0>
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	1b52      	subs	r2, r2, r5
 800511e:	d41e      	bmi.n	800515e <_malloc_r+0xc6>
 8005120:	2a0b      	cmp	r2, #11
 8005122:	d916      	bls.n	8005152 <_malloc_r+0xba>
 8005124:	1961      	adds	r1, r4, r5
 8005126:	42a3      	cmp	r3, r4
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	bf18      	it	ne
 800512c:	6059      	strne	r1, [r3, #4]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	bf08      	it	eq
 8005132:	6031      	streq	r1, [r6, #0]
 8005134:	5162      	str	r2, [r4, r5]
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	4638      	mov	r0, r7
 800513a:	f104 060b 	add.w	r6, r4, #11
 800513e:	f000 f865 	bl	800520c <__malloc_unlock>
 8005142:	f026 0607 	bic.w	r6, r6, #7
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	1af2      	subs	r2, r6, r3
 800514a:	d0b6      	beq.n	80050ba <_malloc_r+0x22>
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	50a3      	str	r3, [r4, r2]
 8005150:	e7b3      	b.n	80050ba <_malloc_r+0x22>
 8005152:	6862      	ldr	r2, [r4, #4]
 8005154:	42a3      	cmp	r3, r4
 8005156:	bf0c      	ite	eq
 8005158:	6032      	streq	r2, [r6, #0]
 800515a:	605a      	strne	r2, [r3, #4]
 800515c:	e7ec      	b.n	8005138 <_malloc_r+0xa0>
 800515e:	4623      	mov	r3, r4
 8005160:	6864      	ldr	r4, [r4, #4]
 8005162:	e7b2      	b.n	80050ca <_malloc_r+0x32>
 8005164:	4634      	mov	r4, r6
 8005166:	6876      	ldr	r6, [r6, #4]
 8005168:	e7b9      	b.n	80050de <_malloc_r+0x46>
 800516a:	230c      	movs	r3, #12
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4638      	mov	r0, r7
 8005170:	f000 f84c 	bl	800520c <__malloc_unlock>
 8005174:	e7a1      	b.n	80050ba <_malloc_r+0x22>
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	e7de      	b.n	8005138 <_malloc_r+0xa0>
 800517a:	bf00      	nop
 800517c:	20000450 	.word	0x20000450

08005180 <_realloc_r>:
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	4680      	mov	r8, r0
 8005186:	4614      	mov	r4, r2
 8005188:	460e      	mov	r6, r1
 800518a:	b921      	cbnz	r1, 8005196 <_realloc_r+0x16>
 800518c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	4611      	mov	r1, r2
 8005192:	f7ff bf81 	b.w	8005098 <_malloc_r>
 8005196:	b92a      	cbnz	r2, 80051a4 <_realloc_r+0x24>
 8005198:	f7ff ff12 	bl	8004fc0 <_free_r>
 800519c:	4625      	mov	r5, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a4:	f000 f838 	bl	8005218 <_malloc_usable_size_r>
 80051a8:	4284      	cmp	r4, r0
 80051aa:	4607      	mov	r7, r0
 80051ac:	d802      	bhi.n	80051b4 <_realloc_r+0x34>
 80051ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b2:	d812      	bhi.n	80051da <_realloc_r+0x5a>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff ff6e 	bl	8005098 <_malloc_r>
 80051bc:	4605      	mov	r5, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0ed      	beq.n	800519e <_realloc_r+0x1e>
 80051c2:	42bc      	cmp	r4, r7
 80051c4:	4622      	mov	r2, r4
 80051c6:	4631      	mov	r1, r6
 80051c8:	bf28      	it	cs
 80051ca:	463a      	movcs	r2, r7
 80051cc:	f7ff fed0 	bl	8004f70 <memcpy>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fef4 	bl	8004fc0 <_free_r>
 80051d8:	e7e1      	b.n	800519e <_realloc_r+0x1e>
 80051da:	4635      	mov	r5, r6
 80051dc:	e7df      	b.n	800519e <_realloc_r+0x1e>
	...

080051e0 <_sbrk_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_sbrk_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb ffb8 	bl	8001160 <_sbrk>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_sbrk_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_sbrk_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000458 	.word	0x20000458

08005200 <__malloc_lock>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__malloc_lock+0x8>)
 8005202:	f000 b811 	b.w	8005228 <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	2000045c 	.word	0x2000045c

0800520c <__malloc_unlock>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__malloc_unlock+0x8>)
 800520e:	f000 b80c 	b.w	800522a <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	2000045c 	.word	0x2000045c

08005218 <_malloc_usable_size_r>:
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f18      	subs	r0, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfbc      	itt	lt
 8005222:	580b      	ldrlt	r3, [r1, r0]
 8005224:	18c0      	addlt	r0, r0, r3
 8005226:	4770      	bx	lr

08005228 <__retarget_lock_acquire_recursive>:
 8005228:	4770      	bx	lr

0800522a <__retarget_lock_release_recursive>:
 800522a:	4770      	bx	lr

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
