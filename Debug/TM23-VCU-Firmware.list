
TM23-VCU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f88  08005f88  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000080  08006010  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08006010  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3ed  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002046  00000000  00000000  0002d49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023118  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d434  00000000  00000000  000539a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d81ea  00000000  00000000  00060ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f40  00000000  00000000  00139018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005eac 	.word	0x08005eac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08005eac 	.word	0x08005eac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_CAN_RxFifo0MsgPendingCallback>:

char msg[256];
char msg1[256];
uint32_t current_time, time_diff, prev_time, main_loop_count;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f001 ff91 	bl	8002de6 <HAL_CAN_GetRxMessage>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000eca:	f000 fcfb 	bl	80018c4 <Error_Handler>
	}

	//Received message from BMS about current limit (Need to config. CAN filter, so VCU only accepts messages from BMS based on BMS CAN I.D)
	if (RxHeader.ExtId == BMS_Current_Limit_ID) {
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d11e      	bne.n	8000f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
		bms_Current_Limit_Ready = true;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		BMS_Current_Limit = RxData[1] / 10;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		sprintf(msg, "BMS_Current_Limit (%ld) = %d \r\n", RxHeader.ExtId,
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	490f      	ldr	r1, [pc, #60]	; (8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000efe:	f004 fb67 	bl	80055d0 <siprintf>
				BMS_Current_Limit);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000f04:	f7ff f984 	bl	8000210 <strlen>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	490a      	ldr	r1, [pc, #40]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000f14:	f003 ffb5 	bl	8004e82 <HAL_UART_Transmit>
	} //end if
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000350 	.word	0x20000350
 8000f24:	2000032c 	.word	0x2000032c
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	20000312 	.word	0x20000312
 8000f30:	cccccccd 	.word	0xcccccccd
 8000f34:	20000310 	.word	0x20000310
 8000f38:	08005ec4 	.word	0x08005ec4
 8000f3c:	2000035c 	.word	0x2000035c
 8000f40:	200002bc 	.word	0x200002bc
 8000f44:	00000000 	.word	0x00000000

08000f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b0c6      	sub	sp, #280	; 0x118
 8000f4c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4e:	f000 ffa1 	bl	8001e94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f52:	f000 f96f 	bl	8001234 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f56:	f000 fb81 	bl	800165c <MX_GPIO_Init>
	MX_DMA_Init();
 8000f5a:	f000 fb4f 	bl	80015fc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000f5e:	f000 fb23 	bl	80015a8 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000f62:	f000 f9d9 	bl	8001318 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f66:	f000 fa29 	bl	80013bc <MX_ADC2_Init>
	MX_ADC3_Init();
 8000f6a:	f000 fa79 	bl	8001460 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000f6e:	f000 fac9 	bl	8001504 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Rotational Sensor) in DMA mode
 8000f72:	2201      	movs	r2, #1
 8000f74:	4998      	ldr	r1, [pc, #608]	; (80011d8 <main+0x290>)
 8000f76:	4899      	ldr	r0, [pc, #612]	; (80011dc <main+0x294>)
 8000f78:	f001 f866 	bl	8002048 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Linear Sensor) in DMA mode
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4998      	ldr	r1, [pc, #608]	; (80011e0 <main+0x298>)
 8000f80:	4898      	ldr	r0, [pc, #608]	; (80011e4 <main+0x29c>)
 8000f82:	f001 f861 	bl	8002048 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000f86:	2201      	movs	r2, #1
 8000f88:	4997      	ldr	r1, [pc, #604]	; (80011e8 <main+0x2a0>)
 8000f8a:	4898      	ldr	r0, [pc, #608]	; (80011ec <main+0x2a4>)
 8000f8c:	f001 f85c 	bl	8002048 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000f90:	4897      	ldr	r0, [pc, #604]	; (80011f0 <main+0x2a8>)
 8000f92:	f001 fe09 	bl	8002ba8 <HAL_CAN_Start>

//	Initialize the CAN RX Interrupt
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000f96:	2102      	movs	r1, #2
 8000f98:	4895      	ldr	r0, [pc, #596]	; (80011f0 <main+0x2a8>)
 8000f9a:	f002 f836 	bl	800300a <HAL_CAN_ActivateNotification>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <main+0x60>
			!= HAL_OK) {
		Error_Handler();
 8000fa4:	f000 fc8e 	bl	80018c4 <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000fa8:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <main+0x2ac>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	611a      	str	r2, [r3, #16]
//	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
	TxHeader.IDE = CAN_ID_EXT; //specify Extended CAN ID
 8000fae:	4b91      	ldr	r3, [pc, #580]	; (80011f4 <main+0x2ac>)
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000fb4:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <main+0x2ac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000fba:	4b8e      	ldr	r3, [pc, #568]	; (80011f4 <main+0x2ac>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	751a      	strb	r2, [r3, #20]

//	 Ready to Drive check (returns true if ready and false if not ready)
	ready_to_drive = Ready_to_Drive();
 8000fc0:	f000 fbe8 	bl	8001794 <Ready_to_Drive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <main+0x2b0>)
 8000fca:	701a      	strb	r2, [r3, #0]

	if (ready_to_drive) {
 8000fcc:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <main+0x2b0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <main+0x96>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4888      	ldr	r0, [pc, #544]	; (80011fc <main+0x2b4>)
 8000fda:	f003 f899 	bl	8004110 <HAL_GPIO_WritePin>
	char msg[256];
	uint32_t AC_Current_Command;
//	uint32_t ERPM_command;

	//initialize counters
	prev_time = 0;
 8000fde:	4b88      	ldr	r3, [pc, #544]	; (8001200 <main+0x2b8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
	current_time = 0;
 8000fe4:	4b87      	ldr	r3, [pc, #540]	; (8001204 <main+0x2bc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
	time_diff = 0;
 8000fea:	4b87      	ldr	r3, [pc, #540]	; (8001208 <main+0x2c0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
	main_loop_count = 0;
 8000ff0:	4b86      	ldr	r3, [pc, #536]	; (800120c <main+0x2c4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		time_diff = current_time - prev_time; //calculate time difference
 8000ff6:	4b83      	ldr	r3, [pc, #524]	; (8001204 <main+0x2bc>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b81      	ldr	r3, [pc, #516]	; (8001200 <main+0x2b8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	4a81      	ldr	r2, [pc, #516]	; (8001208 <main+0x2c0>)
 8001002:	6013      	str	r3, [r2, #0]

		if (time_diff >= LOOP_TIME_INTERVAL) {
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <main+0x2c0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b63      	cmp	r3, #99	; 0x63
 800100a:	f240 80d3 	bls.w	80011b4 <main+0x26c>

			// if 100ms have elapsed since last time this condition became true,
			// then execute your program functions

			/* execute your program functions*/
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800100e:	2120      	movs	r1, #32
 8001010:	487a      	ldr	r0, [pc, #488]	; (80011fc <main+0x2b4>)
 8001012:	f003 f896 	bl	8004142 <HAL_GPIO_TogglePin>
//			sprintf(msg1, "BPS1 = %d \r\n BPS2 = %d \r\n",bpsVal[0],bpsVal[1]);
			APPS_Mapping(&appsVal[0], &appsVal[1], apps_Pedal_Position);
 8001016:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800101a:	461a      	mov	r2, r3
 800101c:	4970      	ldr	r1, [pc, #448]	; (80011e0 <main+0x298>)
 800101e:	486e      	ldr	r0, [pc, #440]	; (80011d8 <main+0x290>)
 8001020:	f000 fbe2 	bl	80017e8 <APPS_Mapping>

			AC_Current_Command = apps_Pedal_Position[0] / 100.0
 8001024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa8b 	bl	8000544 <__aeabi_ui2d>
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <main+0x2c8>)
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4614      	mov	r4, r2
 800103e:	461d      	mov	r5, r3
					* AC_Max_Current;
 8001040:	4b74      	ldr	r3, [pc, #464]	; (8001214 <main+0x2cc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa9f 	bl	8000588 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff faf1 	bl	8000638 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
			AC_Current_Command = apps_Pedal_Position[0] / 100.0
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd85 	bl	8000b6c <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (AC_Current_Command > BMS_Current_Limit * SQRT_2) {
 8001068:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800106c:	f7ff fa6a 	bl	8000544 <__aeabi_ui2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <main+0x2d0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa73 	bl	8000564 <__aeabi_i2d>
 800107e:	a354      	add	r3, pc, #336	; (adr r3, 80011d0 <main+0x288>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fad8 	bl	8000638 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff fd62 	bl	8000b58 <__aeabi_dcmpgt>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d012      	beq.n	80010c0 <main+0x178>
				AC_Current_Command = BMS_Current_Limit * SQRT_2;
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <main+0x2d0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa60 	bl	8000564 <__aeabi_i2d>
 80010a4:	a34a      	add	r3, pc, #296	; (adr r3, 80011d0 <main+0x288>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fac5 	bl	8000638 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fd59 	bl	8000b6c <__aeabi_d2uiz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			} //end if

			//Sending Drive Enable CAN message
			TxHeader.ExtId = Drive_Enable_ID; //Message ID for "Drive Enable" for motor controller
 80010c0:	4b56      	ldr	r3, [pc, #344]	; (800121c <main+0x2d4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <main+0x2ac>)
 80010c6:	6053      	str	r3, [r2, #4]
//			TxHeader.ExtId = 3079; //Message ID for "Drive Enable" for motor controller

			TxData[0] = 1;
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <main+0x2d8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x00;
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <main+0x2d8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x00;
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <main+0x2d8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <main+0x2d8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <main+0x2d8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <main+0x2d8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <main+0x2d8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <main+0x2d8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	71da      	strb	r2, [r3, #7]

			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <main+0x2dc>)
 80010fa:	4a49      	ldr	r2, [pc, #292]	; (8001220 <main+0x2d8>)
 80010fc:	493d      	ldr	r1, [pc, #244]	; (80011f4 <main+0x2ac>)
 80010fe:	483c      	ldr	r0, [pc, #240]	; (80011f0 <main+0x2a8>)
 8001100:	f001 fd96 	bl	8002c30 <HAL_CAN_AddTxMessage>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <main+0x1c6>
					!= HAL_OK) {
				Error_Handler();
 800110a:	f000 fbdb 	bl	80018c4 <Error_Handler>
			} //end if

			//Sending AC Current CAN message
			TxHeader.ExtId = Set_AC_Current_ID; //Message ID for "Set AC Current" for motor controller
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <main+0x2e0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a38      	ldr	r2, [pc, #224]	; (80011f4 <main+0x2ac>)
 8001114:	6053      	str	r3, [r2, #4]
//			TxHeader.ExtId = 263; //Message ID for "Set ERPM" for motor controller

//			Shifting and masking bits to split the 16 - bit value into two 8 bit values to fit in the CAN data frame
			uint8_t AC_Current_Command_high_byte = (AC_Current_Command >> 8)
 8001116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
					& 0xFF; // shift right by 8 bits and mask with 0xFF
			uint8_t AC_Current_Command_low_byte = AC_Current_Command & 0xFF; // mask with 0xFF to get the lower 8 bits
 8001120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001124:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

			//AC Current (Peak not RMS)
			TxData[0] = AC_Current_Command_high_byte;
 8001128:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <main+0x2d8>)
 800112a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800112e:	7013      	strb	r3, [r2, #0]
			TxData[1] = AC_Current_Command_low_byte;
 8001130:	4a3b      	ldr	r2, [pc, #236]	; (8001220 <main+0x2d8>)
 8001132:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8001136:	7053      	strb	r3, [r2, #1]
			TxData[2] = 0x00;
 8001138:	4b39      	ldr	r3, [pc, #228]	; (8001220 <main+0x2d8>)
 800113a:	2200      	movs	r2, #0
 800113c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <main+0x2d8>)
 8001140:	2200      	movs	r2, #0
 8001142:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <main+0x2d8>)
 8001146:	2200      	movs	r2, #0
 8001148:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <main+0x2d8>)
 800114c:	2200      	movs	r2, #0
 800114e:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <main+0x2d8>)
 8001152:	2200      	movs	r2, #0
 8001154:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <main+0x2d8>)
 8001158:	2200      	movs	r2, #0
 800115a:	71da      	strb	r2, [r3, #7]

			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <main+0x2dc>)
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <main+0x2d8>)
 8001160:	4924      	ldr	r1, [pc, #144]	; (80011f4 <main+0x2ac>)
 8001162:	4823      	ldr	r0, [pc, #140]	; (80011f0 <main+0x2a8>)
 8001164:	f001 fd64 	bl	8002c30 <HAL_CAN_AddTxMessage>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <main+0x22a>
					!= HAL_OK) {
				Error_Handler();
 800116e:	f000 fba9 	bl	80018c4 <Error_Handler>
			} //end if

			sprintf(msg,
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <main+0x290>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <main+0x290>)
 8001178:	685c      	ldr	r4, [r3, #4]
 800117a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800117e:	4638      	mov	r0, r7
 8001180:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001184:	9201      	str	r2, [sp, #4]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	460a      	mov	r2, r1
 800118c:	4927      	ldr	r1, [pc, #156]	; (800122c <main+0x2e4>)
 800118e:	f004 fa1f 	bl	80055d0 <siprintf>
					"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t AC_Current_Command = %lu \r\n",
					appsVal[0], appsVal[1], apps_Pedal_Position[0],
					AC_Current_Command);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8001192:	463b      	mov	r3, r7
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f83b 	bl	8000210 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	4639      	mov	r1, r7
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	4822      	ldr	r0, [pc, #136]	; (8001230 <main+0x2e8>)
 80011a6:	f003 fe6c 	bl	8004e82 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			prev_time = current_time; // update previous time
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <main+0x2bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <main+0x2b8>)
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e004      	b.n	80011be <main+0x276>

		} else {
			current_time = HAL_GetTick();
 80011b4:	f000 fed4 	bl	8001f60 <HAL_GetTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <main+0x2bc>)
 80011bc:	6013      	str	r3, [r2, #0]
		}
		main_loop_count++;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <main+0x2c4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <main+0x2c4>)
 80011c6:	6013      	str	r3, [r2, #0]
		time_diff = current_time - prev_time; //calculate time difference
 80011c8:	e715      	b.n	8000ff6 <main+0xae>
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	2de00d1b 	.word	0x2de00d1b
 80011d4:	3ff6a090 	.word	0x3ff6a090
 80011d8:	20000300 	.word	0x20000300
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	20000304 	.word	0x20000304
 80011e4:	200000e4 	.word	0x200000e4
 80011e8:	20000308 	.word	0x20000308
 80011ec:	2000012c 	.word	0x2000012c
 80011f0:	20000294 	.word	0x20000294
 80011f4:	20000314 	.word	0x20000314
 80011f8:	20000311 	.word	0x20000311
 80011fc:	40020000 	.word	0x40020000
 8001200:	20000464 	.word	0x20000464
 8001204:	2000045c 	.word	0x2000045c
 8001208:	20000460 	.word	0x20000460
 800120c:	20000468 	.word	0x20000468
 8001210:	40590000 	.word	0x40590000
 8001214:	20000000 	.word	0x20000000
 8001218:	20000310 	.word	0x20000310
 800121c:	20000008 	.word	0x20000008
 8001220:	20000348 	.word	0x20000348
 8001224:	20000358 	.word	0x20000358
 8001228:	2000000c 	.word	0x2000000c
 800122c:	08005ee4 	.word	0x08005ee4
 8001230:	200002bc 	.word	0x200002bc

08001234 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2234      	movs	r2, #52	; 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f004 f9bc 	bl	80055c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <SystemClock_Config+0xdc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <SystemClock_Config+0xdc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <SystemClock_Config+0xdc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <SystemClock_Config+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <SystemClock_Config+0xe0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <SystemClock_Config+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012a4:	2308      	movs	r3, #8
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80012a8:	23b4      	movs	r3, #180	; 0xb4
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 faf5 	bl	80048ac <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x98>
		Error_Handler();
 80012c8:	f000 fafc 	bl	80018c4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80012cc:	f002 ff54 	bl	8004178 <HAL_PWREx_EnableOverDrive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xa6>
		Error_Handler();
 80012d6:	f000 faf5 	bl	80018c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2105      	movs	r1, #5
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 ff8d 	bl	8004218 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xd4>
		Error_Handler();
 8001304:	f000 fade 	bl	80018c4 <Error_Handler>
	}
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_ADC1_Init+0x98>)
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <MX_ADC1_Init+0x9c>)
 800132e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001332:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001336:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_ADC1_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001346:	2201      	movs	r2, #1
 8001348:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_ADC1_Init+0x98>)
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <MX_ADC1_Init+0xa0>)
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001366:	2201      	movs	r2, #1
 8001368:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_ADC1_Init+0x98>)
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_ADC1_Init+0x98>)
 8001374:	2201      	movs	r2, #1
 8001376:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_ADC1_Init+0x98>)
 800137a:	f000 fe21 	bl	8001fc0 <HAL_ADC_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001384:	f000 fa9e 	bl	80018c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001388:	2300      	movs	r3, #0
 800138a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_ADC1_Init+0x98>)
 800139a:	f000 ff79 	bl	8002290 <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80013a4:	f000 fa8e 	bl	80018c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000009c 	.word	0x2000009c
 80013b4:	40012000 	.word	0x40012000
 80013b8:	0f000001 	.word	0x0f000001

080013bc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC2_Init+0x98>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <MX_ADC2_Init+0x9c>)
 80013d2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_ADC2_Init+0x98>)
 80013d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013da:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC2_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_ADC2_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_ADC2_Init+0x98>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC2_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_ADC2_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_ADC2_Init+0x98>)
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <MX_ADC2_Init+0xa0>)
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC2_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_ADC2_Init+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_ADC2_Init+0x98>)
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_ADC2_Init+0x98>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC2_Init+0x98>)
 800141e:	f000 fdcf 	bl	8001fc0 <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC2_Init+0x70>
		Error_Handler();
 8001428:	f000 fa4c 	bl	80018c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800142c:	2301      	movs	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_ADC2_Init+0x98>)
 800143e:	f000 ff27 	bl	8002290 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC2_Init+0x90>
		Error_Handler();
 8001448:	f000 fa3c 	bl	80018c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000e4 	.word	0x200000e4
 8001458:	40012100 	.word	0x40012100
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_ADC3_Init+0x98>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC3_Init+0x9c>)
 8001476:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC3_Init+0x98>)
 800147a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800147e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_ADC3_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_ADC3_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_ADC3_Init+0x98>)
 800148e:	2201      	movs	r2, #1
 8001490:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_ADC3_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_ADC3_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <MX_ADC3_Init+0xa0>)
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014bc:	2201      	movs	r2, #1
 80014be:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014c2:	f000 fd7d 	bl	8001fc0 <HAL_ADC_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC3_Init+0x70>
		Error_Handler();
 80014cc:	f000 f9fa 	bl	80018c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80014d0:	230a      	movs	r3, #10
 80014d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_ADC3_Init+0x98>)
 80014e2:	f000 fed5 	bl	8002290 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC3_Init+0x90>
		Error_Handler();
 80014ec:	f000 f9ea 	bl	80018c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000012c 	.word	0x2000012c
 80014fc:	40012200 	.word	0x40012200
 8001500:	0f000001 	.word	0x0f000001

08001504 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_CAN1_Init+0x9c>)
 800150c:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <MX_CAN1_Init+0xa0>)
 800150e:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001512:	2212      	movs	r2, #18
 8001514:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_CAN1_Init+0x9c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001528:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_CAN1_Init+0x9c>)
 800152c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001530:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001534:	2200      	movs	r2, #0
 8001536:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_CAN1_Init+0x9c>)
 800153a:	2200      	movs	r2, #0
 800153c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001540:	2200      	movs	r2, #0
 8001542:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001546:	2201      	movs	r2, #1
 8001548:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_CAN1_Init+0x9c>)
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001552:	2200      	movs	r2, #0
 8001554:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001558:	f001 f94a 	bl	80027f0 <HAL_CAN_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_CAN1_Init+0x62>
		Error_Handler();
 8001562:	f000 f9af 	bl	80018c4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800158e:	463b      	mov	r3, r7
 8001590:	4619      	mov	r1, r3
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_CAN1_Init+0x9c>)
 8001594:	f001 fa28 	bl	80029e8 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000294 	.word	0x20000294
 80015a4:	40006400 	.word	0x40006400

080015a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART2_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f003 fc02 	bl	8004de8 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80015ea:	f000 f96b 	bl	80018c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002bc 	.word	0x200002bc
 80015f8:	40004400 	.word	0x40004400

080015fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_DMA_Init+0x5c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_DMA_Init+0x5c>)
 800160c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_DMA_Init+0x5c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2038      	movs	r0, #56	; 0x38
 8001624:	f002 f821 	bl	800366a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001628:	2038      	movs	r0, #56	; 0x38
 800162a:	f002 f83a 	bl	80036a2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2039      	movs	r0, #57	; 0x39
 8001634:	f002 f819 	bl	800366a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001638:	2039      	movs	r0, #57	; 0x39
 800163a:	f002 f832 	bl	80036a2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	203a      	movs	r0, #58	; 0x3a
 8001644:	f002 f811 	bl	800366a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001648:	203a      	movs	r0, #58	; 0x3a
 800164a:	f002 f82a 	bl	80036a2 <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <MX_GPIO_Init+0x12c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a43      	ldr	r2, [pc, #268]	; (8001788 <MX_GPIO_Init+0x12c>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <MX_GPIO_Init+0x12c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <MX_GPIO_Init+0x12c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a3c      	ldr	r2, [pc, #240]	; (8001788 <MX_GPIO_Init+0x12c>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a35      	ldr	r2, [pc, #212]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <MX_GPIO_Init+0x12c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4829      	ldr	r0, [pc, #164]	; (800178c <MX_GPIO_Init+0x130>)
 80016e8:	f002 fd12 	bl	8004110 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2120      	movs	r1, #32
 80016f0:	4827      	ldr	r0, [pc, #156]	; (8001790 <MX_GPIO_Init+0x134>)
 80016f2:	f002 fd0d 	bl	8004110 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001700:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <MX_GPIO_Init+0x130>)
 800170e:	f002 fb53 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Start_Button_Pin APPS_1_SW_Pin APPS_2_SW_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin | APPS_1_SW_Pin | APPS_2_SW_Pin;
 8001712:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8001716:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <MX_GPIO_Init+0x130>)
 8001728:	f002 fb46 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 800172c:	2304      	movs	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <MX_GPIO_Init+0x130>)
 8001744:	f002 fb38 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001748:	2320      	movs	r3, #32
 800174a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_GPIO_Init+0x134>)
 8001760:	f002 fb2a 	bl	8003db8 <HAL_GPIO_Init>

	/*Configure GPIO pin : HV_Present_Pin */
	GPIO_InitStruct.Pin = HV_Present_Pin;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(HV_Present_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_GPIO_Init+0x134>)
 800177a:	f002 fb1d 	bl	8003db8 <HAL_GPIO_Init>

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000

08001794 <Ready_to_Drive>:

/* USER CODE BEGIN 4 */
static bool Ready_to_Drive(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

	for (;;) {
		//checking if brakes are pressed, start button is pressed and HV Present at the same time
		if ((bpsVal[0] >= bpsThreshold)
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <Ready_to_Drive+0x48>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d314      	bcc.n	80017ce <Ready_to_Drive+0x3a>
				&& (!HAL_GPIO_ReadPin(Start_Button_GPIO_Port,
 80017a4:	2102      	movs	r1, #2
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <Ready_to_Drive+0x4c>)
 80017a8:	f002 fc9a 	bl	80040e0 <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <Ready_to_Drive+0x3a>
//					&& (!HAL_GPIO_ReadPin(HV_Present_GPIO_Port, HV_Present_Pin)))

			//sound buzzer for minimum of 1 second and maximum of 3 seconds using timer

			//Method 1
			HAL_GPIO_TogglePin(Ready_to_Drive_Sound_GPIO_Port,
 80017b2:	2104      	movs	r1, #4
 80017b4:	480a      	ldr	r0, [pc, #40]	; (80017e0 <Ready_to_Drive+0x4c>)
 80017b6:	f002 fcc4 	bl	8004142 <HAL_GPIO_TogglePin>
			Ready_to_Drive_Sound_Pin);
			HAL_Delay(2000); //sound buzzer for 2 seconds
 80017ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017be:	f000 fbdb 	bl	8001f78 <HAL_Delay>
			HAL_GPIO_TogglePin(Ready_to_Drive_Sound_GPIO_Port,
 80017c2:	2104      	movs	r1, #4
 80017c4:	4806      	ldr	r0, [pc, #24]	; (80017e0 <Ready_to_Drive+0x4c>)
 80017c6:	f002 fcbc 	bl	8004142 <HAL_GPIO_TogglePin>
			//Ready_to_Drive_Sound_Pin, GPIO_PIN_SET);
			//HAL_Delay(2000); //sound buzzer for 2 seconds
			//HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port,
			//Ready_to_Drive_Sound_Pin, GPIO_PIN_RESET);

			return true;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e003      	b.n	80017d6 <Ready_to_Drive+0x42>
		} //end if
		HAL_Delay(100);
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f000 fbd2 	bl	8001f78 <HAL_Delay>
		if ((bpsVal[0] >= bpsThreshold)
 80017d4:	e7e0      	b.n	8001798 <Ready_to_Drive+0x4>
	} //end for loop

	return false; //shouldn't get to here

} //end Ready_to_Drive()
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000308 	.word	0x20000308
 80017e0:	40020800 	.word	0x40020800
 80017e4:	00000000 	.word	0x00000000

080017e8 <APPS_Mapping>:

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]

	apps_PP[1] = 0.08849557 * (*appsVal_1) - 37.168141592;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fea3 	bl	8000544 <__aeabi_ui2d>
 80017fe:	a324      	add	r3, pc, #144	; (adr r3, 8001890 <APPS_Mapping+0xa8>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ff18 	bl	8000638 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	a321      	add	r3, pc, #132	; (adr r3, 8001898 <APPS_Mapping+0xb0>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fd57 	bl	80002c8 <__aeabi_dsub>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	1d1c      	adds	r4, r3, #4
 8001826:	f7ff f9a1 	bl	8000b6c <__aeabi_d2uiz>
 800182a:	4603      	mov	r3, r0
 800182c:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d903      	bls.n	8001840 <APPS_Mapping+0x58>
		apps_PP[1] = 100;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	2264      	movs	r2, #100	; 0x64
 800183e:	601a      	str	r2, [r3, #0]
	}

	apps_PP[0] = 0.05405405 * (*appsVal_0) - 35.13513513;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7d 	bl	8000544 <__aeabi_ui2d>
 800184a:	a315      	add	r3, pc, #84	; (adr r3, 80018a0 <APPS_Mapping+0xb8>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fef2 	bl	8000638 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	a312      	add	r3, pc, #72	; (adr r3, 80018a8 <APPS_Mapping+0xc0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fd31 	bl	80002c8 <__aeabi_dsub>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f97d 	bl	8000b6c <__aeabi_d2uiz>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d902      	bls.n	8001886 <APPS_Mapping+0x9e>
		apps_PP[0] = 100;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	4afdaa3a 	.word	0x4afdaa3a
 8001894:	3fb6a7a5 	.word	0x3fb6a7a5
 8001898:	a9e75e62 	.word	0xa9e75e62
 800189c:	40429585 	.word	0x40429585
 80018a0:	f1eec545 	.word	0xf1eec545
 80018a4:	3fabacf8 	.word	0x3fabacf8
 80018a8:	1ba1f203 	.word	0x1ba1f203
 80018ac:	4041914c 	.word	0x4041914c

080018b0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800190e:	2007      	movs	r0, #7
 8001910:	f001 fea0 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	; 0x38
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9b      	ldr	r2, [pc, #620]	; (8001bac <HAL_ADC_MspInit+0x28c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d161      	bne.n	8001a06 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
 8001946:	4b9a      	ldr	r3, [pc, #616]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a99      	ldr	r2, [pc, #612]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b97      	ldr	r3, [pc, #604]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197a:	2301      	movs	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197e:	2303      	movs	r3, #3
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	4889      	ldr	r0, [pc, #548]	; (8001bb4 <HAL_ADC_MspInit+0x294>)
 800198e:	f002 fa13 	bl	8003db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 8001994:	4a89      	ldr	r2, [pc, #548]	; (8001bbc <HAL_ADC_MspInit+0x29c>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b86      	ldr	r3, [pc, #536]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019d0:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019d6:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019d8:	2203      	movs	r2, #3
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80019dc:	4b76      	ldr	r3, [pc, #472]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e8:	4873      	ldr	r0, [pc, #460]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019ea:	f001 fe75 	bl	80036d8 <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80019f4:	f7ff ff66 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6f      	ldr	r2, [pc, #444]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
 80019fe:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <HAL_ADC_MspInit+0x298>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a04:	e0ce      	b.n	8001ba4 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6d      	ldr	r2, [pc, #436]	; (8001bc0 <HAL_ADC_MspInit+0x2a0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d162      	bne.n	8001ad6 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a5e      	ldr	r2, [pc, #376]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4856      	ldr	r0, [pc, #344]	; (8001bb4 <HAL_ADC_MspInit+0x294>)
 8001a5c:	f002 f9ac 	bl	8003db8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a62:	4a59      	ldr	r2, [pc, #356]	; (8001bc8 <HAL_ADC_MspInit+0x2a8>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001a66:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6e:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a82:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a98:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aa0:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001aac:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ab8:	4842      	ldr	r0, [pc, #264]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001aba:	f001 fe0d 	bl	80036d8 <HAL_DMA_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8001ac4:	f7ff fefe 	bl	80018c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <HAL_ADC_MspInit+0x2a4>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ad4:	e066      	b.n	8001ba4 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <HAL_ADC_MspInit+0x2ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d161      	bne.n	8001ba4 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aee:	6453      	str	r3, [r2, #68]	; 0x44
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_ADC_MspInit+0x290>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <HAL_ADC_MspInit+0x2b0>)
 8001b2c:	f002 f944 	bl	8003db8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_ADC_MspInit+0x2b8>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b3c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b50:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b58:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b60:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b72:	2204      	movs	r2, #4
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b78:	2203      	movs	r2, #3
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b8a:	f001 fda5 	bl	80036d8 <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001b94:	f7ff fe96 	bl	80018c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_ADC_MspInit+0x2b4>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	; 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	20000174 	.word	0x20000174
 8001bbc:	40026410 	.word	0x40026410
 8001bc0:	40012100 	.word	0x40012100
 8001bc4:	200001d4 	.word	0x200001d4
 8001bc8:	40026440 	.word	0x40026440
 8001bcc:	40012200 	.word	0x40012200
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	20000234 	.word	0x20000234
 8001bd8:	40026428 	.word	0x40026428

08001bdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_CAN_MspInit+0x94>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d134      	bne.n	8001c68 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_CAN_MspInit+0x98>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c48:	2309      	movs	r3, #9
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <HAL_CAN_MspInit+0x9c>)
 8001c54:	f002 f8b0 	bl	8003db8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2014      	movs	r0, #20
 8001c5e:	f001 fd04 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c62:	2014      	movs	r0, #20
 8001c64:	f001 fd1d 	bl	80036a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40006400 	.word	0x40006400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0x84>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12b      	bne.n	8001cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_UART_MspInit+0x8c>)
 8001cf2:	f002 f861 	bl	8003db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40004400 	.word	0x40004400
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f8ee 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <CAN1_RX0_IRQHandler+0x10>)
 8001d66:	f001 f976 	bl	8003056 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000294 	.word	0x20000294

08001d74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA2_Stream0_IRQHandler+0x10>)
 8001d7a:	f001 fdb3 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000174 	.word	0x20000174

08001d88 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA2_Stream1_IRQHandler+0x10>)
 8001d8e:	f001 fda9 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000234 	.word	0x20000234

08001d9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA2_Stream2_IRQHandler+0x10>)
 8001da2:	f001 fd9f 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001d4 	.word	0x200001d4

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f003 fbc4 	bl	800556c <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20020000 	.word	0x20020000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	2000046c 	.word	0x2000046c
 8001e18:	20000488 	.word	0x20000488

08001e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff ffd7 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f003 fb83 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7ff f869 	bl	8000f48 <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e84:	08005f90 	.word	0x08005f90
  ldr r2, =_sbss
 8001e88:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e8c:	20000484 	.word	0x20000484

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f001 fbc9 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fd02 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fbe1 	bl	80036be <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f001 fba9 	bl	800366a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000010 	.word	0x20000010
 8001f30:	20000018 	.word	0x20000018
 8001f34:	20000014 	.word	0x20000014

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	20000470 	.word	0x20000470

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000470 	.word	0x20000470

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e033      	b.n	800203e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc9e 	bl	8001920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002006:	f023 0302 	bic.w	r3, r3, #2
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa6e 	bl	80024f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
 800202e:	e001      	b.n	8002034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Start_DMA+0x1e>
 8002062:	2302      	movs	r3, #2
 8002064:	e0e9      	b.n	800223a <HAL_ADC_Start_DMA+0x1f2>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d018      	beq.n	80020ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_ADC_Start_DMA+0x1fc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6d      	ldr	r2, [pc, #436]	; (8002248 <HAL_ADC_Start_DMA+0x200>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020bc:	d107      	bne.n	80020ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	f040 80a1 	bne.w	8002220 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002108:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211c:	d106      	bne.n	800212c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f023 0206 	bic.w	r2, r3, #6
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
 800212a:	e002      	b.n	8002132 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_ADC_Start_DMA+0x204>)
 800213c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_ADC_Start_DMA+0x208>)
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4a42      	ldr	r2, [pc, #264]	; (8002254 <HAL_ADC_Start_DMA+0x20c>)
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_ADC_Start_DMA+0x210>)
 8002154:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800215e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800216e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	334c      	adds	r3, #76	; 0x4c
 800218a:	4619      	mov	r1, r3
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f001 fb50 	bl	8003834 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12a      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HAL_ADC_Start_DMA+0x214>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d015      	beq.n	80021d6 <HAL_ADC_Start_DMA+0x18e>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <HAL_ADC_Start_DMA+0x218>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_Start_DMA+0x178>
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_ADC_Start_DMA+0x204>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_ADC_Start_DMA+0x21c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d136      	bne.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_ADC_Start_DMA+0x204>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d130      	bne.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d129      	bne.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e020      	b.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_ADC_Start_DMA+0x214>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d11b      	bne.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	e00b      	b.n	8002238 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000010 	.word	0x20000010
 8002248:	431bde83 	.word	0x431bde83
 800224c:	40012300 	.word	0x40012300
 8002250:	080026ed 	.word	0x080026ed
 8002254:	080027a7 	.word	0x080027a7
 8002258:	080027c3 	.word	0x080027c3
 800225c:	40012000 	.word	0x40012000
 8002260:	40012100 	.word	0x40012100
 8002264:	40012200 	.word	0x40012200

08002268 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e113      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x244>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d925      	bls.n	8002308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	3b1e      	subs	r3, #30
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43da      	mvns	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	400a      	ands	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4403      	add	r3, r0
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	e022      	b.n	800234e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	2207      	movs	r2, #7
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	4603      	mov	r3, r0
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	409a      	lsls	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d824      	bhi.n	80023a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b05      	subs	r3, #5
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b05      	subs	r3, #5
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
 800239e:	e04c      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d824      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b23      	subs	r3, #35	; 0x23
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b23      	subs	r3, #35	; 0x23
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
 80023f0:	e023      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	; 0x41
 8002404:	221f      	movs	r2, #31
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	400a      	ands	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b41      	subs	r3, #65	; 0x41
 800242e:	fa00 f203 	lsl.w	r2, r0, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <HAL_ADC_ConfigChannel+0x250>)
 800243c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <HAL_ADC_ConfigChannel+0x254>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d10f      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1d8>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b12      	cmp	r3, #18
 800244e:	d10b      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_ADC_ConfigChannel+0x254>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12b      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x23a>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_ADC_ConfigChannel+0x258>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <HAL_ADC_ConfigChannel+0x1f4>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b11      	cmp	r3, #17
 8002482:	d122      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_ADC_ConfigChannel+0x258>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_ADC_ConfigChannel+0x25c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <HAL_ADC_ConfigChannel+0x260>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9a      	lsrs	r2, r3, #18
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	40012000 	.word	0x40012000
 80024e8:	10000012 	.word	0x10000012
 80024ec:	20000010 	.word	0x20000010
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024fc:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <ADC_Init+0x1f0>)
 80024fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	021a      	lsls	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <ADC_Init+0x1f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800259a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	e00f      	b.n	80025f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0202 	bic.w	r2, r2, #2
 8002600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e1b      	ldrb	r3, [r3, #24]
 800260c:	005a      	lsls	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800263e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	035a      	lsls	r2, r3, #13
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	e007      	b.n	8002668 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	3b01      	subs	r3, #1
 8002684:	051a      	lsls	r2, r3, #20
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800269c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026aa:	025a      	lsls	r2, r3, #9
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	029a      	lsls	r2, r3, #10
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40012300 	.word	0x40012300
 80026e8:	0f000001 	.word	0x0f000001

080026ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d13c      	bne.n	8002780 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d12b      	bne.n	8002778 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d127      	bne.n	8002778 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002740:	2b00      	cmp	r3, #0
 8002742:	d119      	bne.n	8002778 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0220 	bic.w	r2, r2, #32
 8002752:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fd75 	bl	8002268 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800277e:	e00e      	b.n	800279e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fd75 	bl	800227c <HAL_ADC_ErrorCallback>
}
 8002792:	e004      	b.n	800279e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff f87b 	bl	80018b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fd4a 	bl	800227c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0ed      	b.n	80029de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff f9e4 	bl	8001bdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7ff fb9c 	bl	8001f60 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7ff fb98 	bl	8001f60 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0c5      	b.n	80029de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0e5      	beq.n	800282c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0202 	bic.w	r2, r2, #2
 800286e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7ff fb76 	bl	8001f60 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002876:	e012      	b.n	800289e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002878:	f7ff fb72 	bl	8001f60 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b0a      	cmp	r3, #10
 8002884:	d90b      	bls.n	800289e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2205      	movs	r2, #5
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09f      	b.n	80029de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e007      	b.n	80028d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e5b      	ldrb	r3, [r3, #25]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d108      	bne.n	80028f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e007      	b.n	8002900 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e9b      	ldrb	r3, [r3, #26]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d108      	bne.n	800291a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e007      	b.n	800292a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0220 	bic.w	r2, r2, #32
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7edb      	ldrb	r3, [r3, #27]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0210 	bic.w	r2, r2, #16
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e007      	b.n	8002954 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0210 	orr.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7f1b      	ldrb	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0208 	orr.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7f5b      	ldrb	r3, [r3, #29]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0204 	orr.w	r2, r2, #4
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	ea42 0103 	orr.w	r1, r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d003      	beq.n	8002a0e <HAL_CAN_ConfigFilter+0x26>
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 80be 	bne.w	8002b8a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002a10:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2201      	movs	r2, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d123      	bne.n	8002ab8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3248      	adds	r2, #72	; 0x48
 8002a98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d122      	bne.n	8002b06 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ae0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3248      	adds	r2, #72	; 0x48
 8002ae6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002afa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	3348      	adds	r3, #72	; 0x48
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b20:	e007      	b.n	8002b32 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	401a      	ands	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b4c:	e007      	b.n	8002b5e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b7c:	f023 0201 	bic.w	r2, r3, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e006      	b.n	8002b98 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40006400 	.word	0x40006400

08002ba8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d12e      	bne.n	8002c1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7ff f9c4 	bl	8001f60 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bda:	e012      	b.n	8002c02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bdc:	f7ff f9c0 	bl	8001f60 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	d90b      	bls.n	8002c02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e012      	b.n	8002c28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e006      	b.n	8002c28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d003      	beq.n	8002c5c <HAL_CAN_AddTxMessage+0x2c>
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 80b8 	bne.w	8002dcc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a0 	beq.w	8002dbc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	0e1b      	lsrs	r3, r3, #24
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e09e      	b.n	8002dda <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	440b      	add	r3, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e00f      	b.n	8002cea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002cde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	440b      	add	r3, r1
 8002ce8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	7d1b      	ldrb	r3, [r3, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d111      	bne.n	8002d2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6811      	ldr	r1, [r2, #0]
 8002d1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3318      	adds	r3, #24
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	440b      	add	r3, r1
 8002d26:	3304      	adds	r3, #4
 8002d28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3307      	adds	r3, #7
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	061a      	lsls	r2, r3, #24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3306      	adds	r3, #6
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3305      	adds	r3, #5
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	4313      	orrs	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	3204      	adds	r2, #4
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	ea43 0200 	orr.w	r2, r3, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3303      	adds	r3, #3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3301      	adds	r3, #1
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	4610      	mov	r0, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6811      	ldr	r1, [r2, #0]
 8002d88:	ea43 0200 	orr.w	r2, r3, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3318      	adds	r3, #24
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	440b      	add	r3, r1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e00e      	b.n	8002dda <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e006      	b.n	8002dda <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_GetRxMessage+0x24>
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f040 80f3 	bne.w	8002ff0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0e7      	b.n	8002ffe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d8      	b.n	8002ffe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	331b      	adds	r3, #27
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4413      	add	r3, r2
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0204 	and.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	331b      	adds	r3, #27
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0d5b      	lsrs	r3, r3, #21
 8002e7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	331b      	adds	r3, #27
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	4413      	add	r3, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	331b      	adds	r3, #27
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	4413      	add	r3, r2
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0202 	and.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	331b      	adds	r3, #27
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 020f 	and.w	r2, r3, #15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	331b      	adds	r3, #27
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	331b      	adds	r3, #27
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0a1a      	lsrs	r2, r3, #8
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0c1a      	lsrs	r2, r3, #16
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	3302      	adds	r3, #2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e1a      	lsrs	r2, r3, #24
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	3303      	adds	r3, #3
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	3304      	adds	r3, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0a1a      	lsrs	r2, r3, #8
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3305      	adds	r3, #5
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0c1a      	lsrs	r2, r3, #16
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3306      	adds	r3, #6
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e1a      	lsrs	r2, r3, #24
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	3307      	adds	r3, #7
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	e007      	b.n	8002fec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0220 	orr.w	r2, r2, #32
 8002fea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e006      	b.n	8002ffe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d002      	beq.n	8003028 <HAL_CAN_ActivateNotification+0x1e>
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d109      	bne.n	800303c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6959      	ldr	r1, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e006      	b.n	800304a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b08a      	sub	sp, #40	; 0x28
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d07c      	beq.n	8003196 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d023      	beq.n	80030ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f983 	bl	80033c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80030be:	e016      	b.n	80030ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	e00c      	b.n	80030ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
 80030e6:	e002      	b.n	80030ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f989 	bl	8003400 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d024      	beq.n	8003142 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003100:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f963 	bl	80033d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003112:	e016      	b.n	8003142 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	e00c      	b.n	8003142 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	e002      	b.n	8003142 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f969 	bl	8003414 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d024      	beq.n	8003196 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003154:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f943 	bl	80033ec <HAL_CAN_TxMailbox2CompleteCallback>
 8003166:	e016      	b.n	8003196 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	e00c      	b.n	8003196 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e002      	b.n	8003196 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f949 	bl	8003428 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2210      	movs	r2, #16
 80031b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2208      	movs	r2, #8
 80031d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f930 	bl	800343c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd fe5b 	bl	8000eb0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003214:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2210      	movs	r2, #16
 800321c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2208      	movs	r2, #8
 8003238:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f912 	bl	8003464 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8f9 	bl	8003450 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8fc 	bl	8003478 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2208      	movs	r2, #8
 800329a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8f5 	bl	800348c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d07b      	beq.n	80033a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d072      	beq.n	800339c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003310:	2b00      	cmp	r3, #0
 8003312:	d043      	beq.n	800339c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03e      	beq.n	800339c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d02b      	beq.n	8003380 <HAL_CAN_IRQHandler+0x32a>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d82e      	bhi.n	800338a <HAL_CAN_IRQHandler+0x334>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d022      	beq.n	8003376 <HAL_CAN_IRQHandler+0x320>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d82a      	bhi.n	800338a <HAL_CAN_IRQHandler+0x334>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d019      	beq.n	800336c <HAL_CAN_IRQHandler+0x316>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d826      	bhi.n	800338a <HAL_CAN_IRQHandler+0x334>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d010      	beq.n	8003362 <HAL_CAN_IRQHandler+0x30c>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d822      	bhi.n	800338a <HAL_CAN_IRQHandler+0x334>
 8003344:	2b10      	cmp	r3, #16
 8003346:	d002      	beq.n	800334e <HAL_CAN_IRQHandler+0x2f8>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d005      	beq.n	8003358 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800334c:	e01d      	b.n	800338a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003356:	e019      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003360:	e014      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	f043 0320 	orr.w	r3, r3, #32
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800336a:	e00f      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003374:	e00a      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800337e:	e005      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003388:	e000      	b.n	800338c <HAL_CAN_IRQHandler+0x336>
            break;
 800338a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800339a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2204      	movs	r2, #4
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f872 	bl	80034a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80033bc:	bf00      	nop
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	60d3      	str	r3, [r2, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <__NVIC_GetPriorityGrouping+0x18>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0307 	and.w	r3, r3, #7
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	db0b      	blt.n	8003542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <__NVIC_EnableIRQ+0x38>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2001      	movs	r0, #1
 800353a:	fa00 f202 	lsl.w	r2, r0, r2
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100

08003554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0a      	blt.n	800357e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	490c      	ldr	r1, [pc, #48]	; (80035a0 <__NVIC_SetPriority+0x4c>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	440b      	add	r3, r1
 8003578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800357c:	e00a      	b.n	8003594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <__NVIC_SetPriority+0x50>)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3b04      	subs	r3, #4
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	440b      	add	r3, r1
 8003592:	761a      	strb	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf28      	it	cs
 80035c6:	2304      	movcs	r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <NVIC_EncodePriority+0x30>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3b03      	subs	r3, #3
 80035d6:	e000      	b.n	80035da <NVIC_EncodePriority+0x32>
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	401a      	ands	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43d9      	mvns	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4313      	orrs	r3, r2
         );
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003620:	d301      	bcc.n	8003626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003622:	2301      	movs	r3, #1
 8003624:	e00f      	b.n	8003646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <SysTick_Config+0x40>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362e:	210f      	movs	r1, #15
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f7ff ff8e 	bl	8003554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SysTick_Config+0x40>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <SysTick_Config+0x40>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e010 	.word	0xe000e010

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff29 	bl	80034b4 <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800367c:	f7ff ff3e 	bl	80034fc <__NVIC_GetPriorityGrouping>
 8003680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7ff ff8e 	bl	80035a8 <NVIC_EncodePriority>
 800368c:	4602      	mov	r2, r0
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff5d 	bl	8003554 <__NVIC_SetPriority>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff31 	bl	8003518 <__NVIC_EnableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ffa2 	bl	8003610 <SysTick_Config>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7fe fc3c 	bl	8001f60 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e099      	b.n	8003828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003714:	e00f      	b.n	8003736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003716:	f7fe fc23 	bl	8001f60 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b05      	cmp	r3, #5
 8003722:	d908      	bls.n	8003736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2203      	movs	r2, #3
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e078      	b.n	8003828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e8      	bne.n	8003716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_DMA_Init+0x158>)
 8003750:	4013      	ands	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b04      	cmp	r3, #4
 800378e:	d107      	bne.n	80037a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	4313      	orrs	r3, r2
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d117      	bne.n	80037fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fa6f 	bl	8003cc0 <DMA_CheckFifoParam>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2240      	movs	r2, #64	; 0x40
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037f6:	2301      	movs	r3, #1
 80037f8:	e016      	b.n	8003828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa26 	bl	8003c54 <DMA_CalcBaseAndBitshift>
 8003808:	4603      	mov	r3, r0
 800380a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	223f      	movs	r2, #63	; 0x3f
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	f010803f 	.word	0xf010803f

08003834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_DMA_Start_IT+0x26>
 8003856:	2302      	movs	r3, #2
 8003858:	e040      	b.n	80038dc <HAL_DMA_Start_IT+0xa8>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d12f      	bne.n	80038ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f9b8 	bl	8003bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	223f      	movs	r2, #63	; 0x3f
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0216 	orr.w	r2, r2, #22
 80038a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0208 	orr.w	r2, r2, #8
 80038ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e005      	b.n	80038da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038f0:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_DMA_IRQHandler+0x248>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a8e      	ldr	r2, [pc, #568]	; (8003b30 <HAL_DMA_IRQHandler+0x24c>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2208      	movs	r2, #8
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01a      	beq.n	8003950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	2208      	movs	r2, #8
 800393e:	409a      	lsls	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d012      	beq.n	8003986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2201      	movs	r2, #1
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	2204      	movs	r2, #4
 800398c:	409a      	lsls	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	2204      	movs	r2, #4
 80039aa:	409a      	lsls	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	2210      	movs	r2, #16
 80039c2:	409a      	lsls	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d043      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d03c      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2210      	movs	r2, #16
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d108      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d024      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e01f      	b.n	8003a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	e016      	b.n	8003a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0208 	bic.w	r2, r2, #8
 8003a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2220      	movs	r2, #32
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 808f 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8087 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d136      	bne.n	8003afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0216 	bic.w	r2, r2, #22
 8003a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_DMA_IRQHandler+0x1da>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0208 	bic.w	r2, r2, #8
 8003acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d07e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
        }
        return;
 8003afa:	e079      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d031      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e02c      	b.n	8003b84 <HAL_DMA_IRQHandler+0x2a0>
 8003b2a:	bf00      	nop
 8003b2c:	20000010 	.word	0x20000010
 8003b30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d023      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
 8003b44:	e01e      	b.n	8003b84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0210 	bic.w	r2, r2, #16
 8003b62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d032      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d022      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d307      	bcc.n	8003bcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f2      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x2cc>
 8003bca:	e000      	b.n	8003bce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
 8003bee:	e000      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bf0:	bf00      	nop
    }
  }
}
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d108      	bne.n	8003c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c36:	e007      	b.n	8003c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	3b10      	subs	r3, #16
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <DMA_CalcBaseAndBitshift+0x68>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d909      	bls.n	8003c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	659a      	str	r2, [r3, #88]	; 0x58
 8003c94:	e007      	b.n	8003ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	aaaaaaab 	.word	0xaaaaaaab
 8003cbc:	08005f44 	.word	0x08005f44

08003cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11f      	bne.n	8003d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d856      	bhi.n	8003d8e <DMA_CheckFifoParam+0xce>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <DMA_CheckFifoParam+0x28>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d0b 	.word	0x08003d0b
 8003cf0:	08003cf9 	.word	0x08003cf9
 8003cf4:	08003d8f 	.word	0x08003d8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d046      	beq.n	8003d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e043      	b.n	8003d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d12:	d140      	bne.n	8003d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d18:	e03d      	b.n	8003d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	d121      	bne.n	8003d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d837      	bhi.n	8003d9a <DMA_CheckFifoParam+0xda>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <DMA_CheckFifoParam+0x70>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d47 	.word	0x08003d47
 8003d38:	08003d41 	.word	0x08003d41
 8003d3c:	08003d59 	.word	0x08003d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e030      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d025      	beq.n	8003d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d56:	e022      	b.n	8003d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d66:	e01c      	b.n	8003da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d903      	bls.n	8003d76 <DMA_CheckFifoParam+0xb6>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d74:	e018      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7a:	e015      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e00b      	b.n	8003da6 <DMA_CheckFifoParam+0xe6>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e00a      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e008      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e006      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e004      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
      break;
 8003da6:	bf00      	nop
    }
  } 
  
  return status; 
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	e165      	b.n	80040a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f040 8154 	bne.w	800409a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d005      	beq.n	8003e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d130      	bne.n	8003e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2203      	movs	r2, #3
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e40:	2201      	movs	r2, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 0201 	and.w	r2, r3, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d017      	beq.n	8003ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d123      	bne.n	8003efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	220f      	movs	r2, #15
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	69b9      	ldr	r1, [r7, #24]
 8003ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	2203      	movs	r2, #3
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80ae 	beq.w	800409a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4a5c      	ldr	r2, [pc, #368]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4e:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_GPIO_Init+0x300>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5a:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_GPIO_Init+0x304>)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4f      	ldr	r2, [pc, #316]	; (80040c0 <HAL_GPIO_Init+0x308>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d025      	beq.n	8003fd2 <HAL_GPIO_Init+0x21a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4e      	ldr	r2, [pc, #312]	; (80040c4 <HAL_GPIO_Init+0x30c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01f      	beq.n	8003fce <HAL_GPIO_Init+0x216>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4d      	ldr	r2, [pc, #308]	; (80040c8 <HAL_GPIO_Init+0x310>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d019      	beq.n	8003fca <HAL_GPIO_Init+0x212>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4c      	ldr	r2, [pc, #304]	; (80040cc <HAL_GPIO_Init+0x314>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_GPIO_Init+0x20e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4b      	ldr	r2, [pc, #300]	; (80040d0 <HAL_GPIO_Init+0x318>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_GPIO_Init+0x20a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4a      	ldr	r2, [pc, #296]	; (80040d4 <HAL_GPIO_Init+0x31c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <HAL_GPIO_Init+0x206>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a49      	ldr	r2, [pc, #292]	; (80040d8 <HAL_GPIO_Init+0x320>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_GPIO_Init+0x202>
 8003fb6:	2306      	movs	r3, #6
 8003fb8:	e00c      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fba:	2307      	movs	r3, #7
 8003fbc:	e00a      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e008      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x21c>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f002 0203 	and.w	r2, r2, #3
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe4:	4935      	ldr	r1, [pc, #212]	; (80040bc <HAL_GPIO_Init+0x304>)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_GPIO_Init+0x324>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004016:	4a31      	ldr	r2, [pc, #196]	; (80040dc <HAL_GPIO_Init+0x324>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800401c:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <HAL_GPIO_Init+0x324>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <HAL_GPIO_Init+0x324>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004046:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_GPIO_Init+0x324>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_GPIO_Init+0x324>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004070:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_GPIO_Init+0x324>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <HAL_GPIO_Init+0x324>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	f67f ae96 	bls.w	8003dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40020400 	.word	0x40020400
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40021400 	.word	0x40021400
 80040d8:	40021800 	.word	0x40021800
 80040dc:	40013c00 	.word	0x40013c00

080040e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e001      	b.n	8004102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	4613      	mov	r3, r2
 800411e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004120:	787b      	ldrb	r3, [r7, #1]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800412c:	e003      	b.n	8004136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	619a      	str	r2, [r3, #24]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4013      	ands	r3, r2
 800415a:	041a      	lsls	r2, r3, #16
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43d9      	mvns	r1, r3
 8004160:	887b      	ldrh	r3, [r7, #2]
 8004162:	400b      	ands	r3, r1
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_PWREx_EnableOverDrive+0x90>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_PWREx_EnableOverDrive+0x90>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_PWREx_EnableOverDrive+0x90>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800419e:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_PWREx_EnableOverDrive+0x94>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041a4:	f7fd fedc 	bl	8001f60 <HAL_GetTick>
 80041a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041aa:	e009      	b.n	80041c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ac:	f7fd fed8 	bl	8001f60 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ba:	d901      	bls.n	80041c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e01f      	b.n	8004200 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <HAL_PWREx_EnableOverDrive+0x98>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d1ee      	bne.n	80041ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d4:	f7fd fec4 	bl	8001f60 <HAL_GetTick>
 80041d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041da:	e009      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041dc:	f7fd fec0 	bl	8001f60 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ea:	d901      	bls.n	80041f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e007      	b.n	8004200 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_PWREx_EnableOverDrive+0x98>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fc:	d1ee      	bne.n	80041dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	420e0040 	.word	0x420e0040
 8004210:	40007000 	.word	0x40007000
 8004214:	420e0044 	.word	0x420e0044

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0cc      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d90c      	bls.n	8004254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d044      	beq.n	8004338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e067      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fd fe2a 	bl	8001f60 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fd fe26 	bl	8001f60 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20c      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f855 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fd8a 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08005f2c 	.word	0x08005f2c
 80043dc:	20000010 	.word	0x20000010
 80043e0:	20000014 	.word	0x20000014

080043e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000010 	.word	0x20000010

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004400:	f7ff fff0 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	08005f3c 	.word	0x08005f3c

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004428:	f7ff ffdc 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0b5b      	lsrs	r3, r3, #13
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08005f3c 	.word	0x08005f3c

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004450:	b0ae      	sub	sp, #184	; 0xb8
 8004452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004472:	4bcb      	ldr	r3, [pc, #812]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b0c      	cmp	r3, #12
 800447c:	f200 8206 	bhi.w	800488c <HAL_RCC_GetSysClockFreq+0x440>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044bd 	.word	0x080044bd
 800448c:	0800488d 	.word	0x0800488d
 8004490:	0800488d 	.word	0x0800488d
 8004494:	0800488d 	.word	0x0800488d
 8004498:	080044c5 	.word	0x080044c5
 800449c:	0800488d 	.word	0x0800488d
 80044a0:	0800488d 	.word	0x0800488d
 80044a4:	0800488d 	.word	0x0800488d
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	0800488d 	.word	0x0800488d
 80044b0:	0800488d 	.word	0x0800488d
 80044b4:	0800488d 	.word	0x0800488d
 80044b8:	080046bd 	.word	0x080046bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4bb9      	ldr	r3, [pc, #740]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80044be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044c2:	e1e7      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c4:	4bb8      	ldr	r3, [pc, #736]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80044c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044ca:	e1e3      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4bb4      	ldr	r3, [pc, #720]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d8:	4bb1      	ldr	r3, [pc, #708]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d071      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e4:	4bae      	ldr	r3, [pc, #696]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	0159      	lsls	r1, r3, #5
 8004518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451c:	0150      	lsls	r0, r2, #5
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4621      	mov	r1, r4
 8004524:	1a51      	subs	r1, r2, r1
 8004526:	6439      	str	r1, [r7, #64]	; 0x40
 8004528:	4629      	mov	r1, r5
 800452a:	eb63 0301 	sbc.w	r3, r3, r1
 800452e:	647b      	str	r3, [r7, #68]	; 0x44
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800453c:	4649      	mov	r1, r9
 800453e:	018b      	lsls	r3, r1, #6
 8004540:	4641      	mov	r1, r8
 8004542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004546:	4641      	mov	r1, r8
 8004548:	018a      	lsls	r2, r1, #6
 800454a:	4641      	mov	r1, r8
 800454c:	1a51      	subs	r1, r2, r1
 800454e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004550:	4649      	mov	r1, r9
 8004552:	eb63 0301 	sbc.w	r3, r3, r1
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004564:	4649      	mov	r1, r9
 8004566:	00cb      	lsls	r3, r1, #3
 8004568:	4641      	mov	r1, r8
 800456a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456e:	4641      	mov	r1, r8
 8004570:	00ca      	lsls	r2, r1, #3
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	4603      	mov	r3, r0
 8004578:	4622      	mov	r2, r4
 800457a:	189b      	adds	r3, r3, r2
 800457c:	633b      	str	r3, [r7, #48]	; 0x30
 800457e:	462b      	mov	r3, r5
 8004580:	460a      	mov	r2, r1
 8004582:	eb42 0303 	adc.w	r3, r2, r3
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004594:	4629      	mov	r1, r5
 8004596:	024b      	lsls	r3, r1, #9
 8004598:	4621      	mov	r1, r4
 800459a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800459e:	4621      	mov	r1, r4
 80045a0:	024a      	lsls	r2, r1, #9
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045b8:	f7fc faf8 	bl	8000bac <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c6:	e067      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e2:	2300      	movs	r3, #0
 80045e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f04f 0000 	mov.w	r0, #0
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	0159      	lsls	r1, r3, #5
 80045f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045fc:	0150      	lsls	r0, r2, #5
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4621      	mov	r1, r4
 8004604:	1a51      	subs	r1, r2, r1
 8004606:	62b9      	str	r1, [r7, #40]	; 0x28
 8004608:	4629      	mov	r1, r5
 800460a:	eb63 0301 	sbc.w	r3, r3, r1
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800461c:	4649      	mov	r1, r9
 800461e:	018b      	lsls	r3, r1, #6
 8004620:	4641      	mov	r1, r8
 8004622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004626:	4641      	mov	r1, r8
 8004628:	018a      	lsls	r2, r1, #6
 800462a:	4641      	mov	r1, r8
 800462c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004630:	4649      	mov	r1, r9
 8004632:	eb63 0b01 	sbc.w	fp, r3, r1
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800464a:	4692      	mov	sl, r2
 800464c:	469b      	mov	fp, r3
 800464e:	4623      	mov	r3, r4
 8004650:	eb1a 0303 	adds.w	r3, sl, r3
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	462b      	mov	r3, r5
 8004658:	eb4b 0303 	adc.w	r3, fp, r3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800466a:	4629      	mov	r1, r5
 800466c:	028b      	lsls	r3, r1, #10
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004674:	4621      	mov	r1, r4
 8004676:	028a      	lsls	r2, r1, #10
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004680:	2200      	movs	r2, #0
 8004682:	673b      	str	r3, [r7, #112]	; 0x70
 8004684:	677a      	str	r2, [r7, #116]	; 0x74
 8004686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800468a:	f7fc fa8f 	bl	8000bac <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4613      	mov	r3, r2
 8004694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004698:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80046aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046ba:	e0eb      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d06b      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	2200      	movs	r2, #0
 80046dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	2300      	movs	r3, #0
 80046ea:	667b      	str	r3, [r7, #100]	; 0x64
 80046ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80046f0:	4622      	mov	r2, r4
 80046f2:	462b      	mov	r3, r5
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	0159      	lsls	r1, r3, #5
 80046fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004702:	0150      	lsls	r0, r2, #5
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4621      	mov	r1, r4
 800470a:	1a51      	subs	r1, r2, r1
 800470c:	61b9      	str	r1, [r7, #24]
 800470e:	4629      	mov	r1, r5
 8004710:	eb63 0301 	sbc.w	r3, r3, r1
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004722:	4659      	mov	r1, fp
 8004724:	018b      	lsls	r3, r1, #6
 8004726:	4651      	mov	r1, sl
 8004728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800472c:	4651      	mov	r1, sl
 800472e:	018a      	lsls	r2, r1, #6
 8004730:	4651      	mov	r1, sl
 8004732:	ebb2 0801 	subs.w	r8, r2, r1
 8004736:	4659      	mov	r1, fp
 8004738:	eb63 0901 	sbc.w	r9, r3, r1
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004750:	4690      	mov	r8, r2
 8004752:	4699      	mov	r9, r3
 8004754:	4623      	mov	r3, r4
 8004756:	eb18 0303 	adds.w	r3, r8, r3
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	462b      	mov	r3, r5
 800475e:	eb49 0303 	adc.w	r3, r9, r3
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004770:	4629      	mov	r1, r5
 8004772:	024b      	lsls	r3, r1, #9
 8004774:	4621      	mov	r1, r4
 8004776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800477a:	4621      	mov	r1, r4
 800477c:	024a      	lsls	r2, r1, #9
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004786:	2200      	movs	r2, #0
 8004788:	65bb      	str	r3, [r7, #88]	; 0x58
 800478a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800478c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004790:	f7fc fa0c 	bl	8000bac <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479e:	e065      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x420>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ac:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	2200      	movs	r2, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	4611      	mov	r1, r2
 80047b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047bc:	653b      	str	r3, [r7, #80]	; 0x50
 80047be:	2300      	movs	r3, #0
 80047c0:	657b      	str	r3, [r7, #84]	; 0x54
 80047c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80047c6:	4642      	mov	r2, r8
 80047c8:	464b      	mov	r3, r9
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	0159      	lsls	r1, r3, #5
 80047d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d8:	0150      	lsls	r0, r2, #5
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4641      	mov	r1, r8
 80047e0:	1a51      	subs	r1, r2, r1
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	4649      	mov	r1, r9
 80047e6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047f8:	4659      	mov	r1, fp
 80047fa:	018b      	lsls	r3, r1, #6
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004802:	4651      	mov	r1, sl
 8004804:	018a      	lsls	r2, r1, #6
 8004806:	4651      	mov	r1, sl
 8004808:	1a54      	subs	r4, r2, r1
 800480a:	4659      	mov	r1, fp
 800480c:	eb63 0501 	sbc.w	r5, r3, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	00eb      	lsls	r3, r5, #3
 800481a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481e:	00e2      	lsls	r2, r4, #3
 8004820:	4614      	mov	r4, r2
 8004822:	461d      	mov	r5, r3
 8004824:	4643      	mov	r3, r8
 8004826:	18e3      	adds	r3, r4, r3
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	464b      	mov	r3, r9
 800482c:	eb45 0303 	adc.w	r3, r5, r3
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800483e:	4629      	mov	r1, r5
 8004840:	028b      	lsls	r3, r1, #10
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004848:	4621      	mov	r1, r4
 800484a:	028a      	lsls	r2, r1, #10
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004854:	2200      	movs	r2, #0
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
 8004858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800485a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800485e:	f7fc f9a5 	bl	8000bac <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4613      	mov	r3, r2
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	0f1b      	lsrs	r3, r3, #28
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800487a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800487e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800488a:	e003      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800488e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004898:	4618      	mov	r0, r3
 800489a:	37b8      	adds	r7, #184	; 0xb8
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00f42400 	.word	0x00f42400

080048ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e28d      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8083 	beq.w	80049d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048cc:	4b94      	ldr	r3, [pc, #592]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d019      	beq.n	800490c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048d8:	4b91      	ldr	r3, [pc, #580]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048e4:	4b8e      	ldr	r3, [pc, #568]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f0:	d00c      	beq.n	800490c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b8b      	ldr	r3, [pc, #556]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d112      	bne.n	8004924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fe:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d10b      	bne.n	8004924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	4b84      	ldr	r3, [pc, #528]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05b      	beq.n	80049d0 <HAL_RCC_OscConfig+0x124>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d157      	bne.n	80049d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e25a      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x90>
 800492e:	4b7c      	ldr	r3, [pc, #496]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7b      	ldr	r2, [pc, #492]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xcc>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0xb4>
 8004946:	4b76      	ldr	r3, [pc, #472]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a75      	ldr	r2, [pc, #468]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a72      	ldr	r2, [pc, #456]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xcc>
 8004960:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6e      	ldr	r2, [pc, #440]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b6c      	ldr	r3, [pc, #432]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a6b      	ldr	r2, [pc, #428]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd faee 	bl	8001f60 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd faea 	bl	8001f60 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e21f      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xdc>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fd fada 	bl	8001f60 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd fad6 	bl	8001f60 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e20b      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b57      	ldr	r3, [pc, #348]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x104>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d06f      	beq.n	8004abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049de:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049ea:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d105      	bne.n	8004a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049f6:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d11c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0e:	4b44      	ldr	r3, [pc, #272]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d116      	bne.n	8004a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	4b41      	ldr	r3, [pc, #260]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_RCC_OscConfig+0x186>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e1d3      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4937      	ldr	r1, [pc, #220]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	e03a      	b.n	8004abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a50:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <HAL_RCC_OscConfig+0x278>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fd fa83 	bl	8001f60 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7fd fa7f 	bl	8001f60 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e1b4      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4925      	ldr	r1, [pc, #148]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
 8004a90:	e015      	b.n	8004abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_RCC_OscConfig+0x278>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd fa62 	bl	8001f60 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fd fa5e 	bl	8001f60 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e193      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d036      	beq.n	8004b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d016      	beq.n	8004b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <HAL_RCC_OscConfig+0x27c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fa42 	bl	8001f60 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fd fa3e 	bl	8001f60 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e173      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x234>
 8004afe:	e01b      	b.n	8004b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_OscConfig+0x27c>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fd fa2b 	bl	8001f60 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	e00e      	b.n	8004b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0e:	f7fd fa27 	bl	8001f60 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d907      	bls.n	8004b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e15c      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
 8004b20:	40023800 	.word	0x40023800
 8004b24:	42470000 	.word	0x42470000
 8004b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2c:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ea      	bne.n	8004b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8097 	beq.w	8004c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	4b7f      	ldr	r3, [pc, #508]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a7e      	ldr	r2, [pc, #504]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6413      	str	r3, [r2, #64]	; 0x40
 8004b66:	4b7c      	ldr	r3, [pc, #496]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <HAL_RCC_OscConfig+0x4b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d118      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b82:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <HAL_RCC_OscConfig+0x4b0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a75      	ldr	r2, [pc, #468]	; (8004d5c <HAL_RCC_OscConfig+0x4b0>)
 8004b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8e:	f7fd f9e7 	bl	8001f60 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b96:	f7fd f9e3 	bl	8001f60 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e118      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <HAL_RCC_OscConfig+0x4b0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <HAL_RCC_OscConfig+0x31e>
 8004bbc:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	4a65      	ldr	r2, [pc, #404]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc8:	e01c      	b.n	8004c04 <HAL_RCC_OscConfig+0x358>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0x340>
 8004bd2:	4b61      	ldr	r3, [pc, #388]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a60      	ldr	r2, [pc, #384]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	4b5e      	ldr	r3, [pc, #376]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a5d      	ldr	r2, [pc, #372]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0x358>
 8004bec:	4b5a      	ldr	r3, [pc, #360]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4a59      	ldr	r2, [pc, #356]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf8:	4b57      	ldr	r3, [pc, #348]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	4a56      	ldr	r2, [pc, #344]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004bfe:	f023 0304 	bic.w	r3, r3, #4
 8004c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd f9a8 	bl	8001f60 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fd f9a4 	bl	8001f60 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0d7      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2a:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ee      	beq.n	8004c14 <HAL_RCC_OscConfig+0x368>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd f992 	bl	8001f60 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7fd f98e 	bl	8001f60 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e0c1      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c56:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1ee      	bne.n	8004c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80ad 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d060      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d145      	bne.n	8004d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c92:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <HAL_RCC_OscConfig+0x4b4>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fd f962 	bl	8001f60 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fd f95e 	bl	8001f60 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e093      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	491b      	ldr	r1, [pc, #108]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x4b4>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fd f933 	bl	8001f60 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fd f92f 	bl	8001f60 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e064      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x452>
 8004d1c:	e05c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCC_OscConfig+0x4b4>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd f91c 	bl	8001f60 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f918 	bl	8001f60 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04d      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_OscConfig+0x4ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x480>
 8004d4a:	e045      	b.n	8004dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e040      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_RCC_OscConfig+0x538>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d030      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d129      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d122      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d119      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d10f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e03f      	b.n	8004e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fc ff34 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f929 	bl	8005084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b08a      	sub	sp, #40	; 0x28
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d17c      	bne.n	8004f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_Transmit+0x2c>
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e075      	b.n	8004f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Transmit+0x3e>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e06e      	b.n	8004f9e <HAL_UART_Transmit+0x11c>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2221      	movs	r2, #33	; 0x21
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed6:	f7fd f843 	bl	8001f60 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef0:	d108      	bne.n	8004f04 <HAL_UART_Transmit+0x82>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e003      	b.n	8004f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f14:	e02a      	b.n	8004f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2180      	movs	r1, #128	; 0x80
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f840 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e036      	b.n	8004f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3302      	adds	r3, #2
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e007      	b.n	8004f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1cf      	bne.n	8004f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2140      	movs	r1, #64	; 0x40
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f810 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e006      	b.n	8004f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b090      	sub	sp, #64	; 0x40
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb6:	e050      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d04c      	beq.n	800505a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc6:	f7fc ffcb 	bl	8001f60 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d241      	bcs.n	800505a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e5      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3314      	adds	r3, #20
 8005010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502a:	623a      	str	r2, [r7, #32]
 800502c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	69f9      	ldr	r1, [r7, #28]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	61bb      	str	r3, [r7, #24]
   return(result);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e00f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	429a      	cmp	r2, r3
 8005076:	d09f      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3740      	adds	r7, #64	; 0x40
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b0c0      	sub	sp, #256	; 0x100
 800508a:	af00      	add	r7, sp, #0
 800508c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	ea40 0301 	orr.w	r3, r0, r1
 80050ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050dc:	f021 010c 	bic.w	r1, r1, #12
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ea:	430b      	orrs	r3, r1
 80050ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	6999      	ldr	r1, [r3, #24]
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	ea40 0301 	orr.w	r3, r0, r1
 800510a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <UART_SetConfig+0x2cc>)
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0xa0>
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b8d      	ldr	r3, [pc, #564]	; (8005354 <UART_SetConfig+0x2d0>)
 8005120:	429a      	cmp	r2, r3
 8005122:	d104      	bne.n	800512e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7ff f97e 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8005128:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800512c:	e003      	b.n	8005136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800512e:	f7ff f965 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8005132:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005140:	f040 810c 	bne.w	800535c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800514e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	1891      	adds	r1, r2, r2
 800515c:	65b9      	str	r1, [r7, #88]	; 0x58
 800515e:	415b      	adcs	r3, r3
 8005160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005166:	4621      	mov	r1, r4
 8005168:	eb12 0801 	adds.w	r8, r2, r1
 800516c:	4629      	mov	r1, r5
 800516e:	eb43 0901 	adc.w	r9, r3, r1
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800517e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005186:	4690      	mov	r8, r2
 8005188:	4699      	mov	r9, r3
 800518a:	4623      	mov	r3, r4
 800518c:	eb18 0303 	adds.w	r3, r8, r3
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005194:	462b      	mov	r3, r5
 8005196:	eb49 0303 	adc.w	r3, r9, r3
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051b2:	460b      	mov	r3, r1
 80051b4:	18db      	adds	r3, r3, r3
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
 80051b8:	4613      	mov	r3, r2
 80051ba:	eb42 0303 	adc.w	r3, r2, r3
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
 80051c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051c8:	f7fb fcf0 	bl	8000bac <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b61      	ldr	r3, [pc, #388]	; (8005358 <UART_SetConfig+0x2d4>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011c      	lsls	r4, r3, #4
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80051f4:	415b      	adcs	r3, r3
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051fc:	4641      	mov	r1, r8
 80051fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005202:	4649      	mov	r1, r9
 8005204:	eb43 0b01 	adc.w	fp, r3, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800521c:	4692      	mov	sl, r2
 800521e:	469b      	mov	fp, r3
 8005220:	4643      	mov	r3, r8
 8005222:	eb1a 0303 	adds.w	r3, sl, r3
 8005226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522a:	464b      	mov	r3, r9
 800522c:	eb4b 0303 	adc.w	r3, fp, r3
 8005230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005240:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	643b      	str	r3, [r7, #64]	; 0x40
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
 8005256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800525a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800525e:	f7fb fca5 	bl	8000bac <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4611      	mov	r1, r2
 8005268:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2301 	umull	r2, r3, r3, r1
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2264      	movs	r2, #100	; 0x64
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	1acb      	subs	r3, r1, r3
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800527e:	4b36      	ldr	r3, [pc, #216]	; (8005358 <UART_SetConfig+0x2d4>)
 8005280:	fba3 2302 	umull	r2, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800528c:	441c      	add	r4, r3
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800529c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80052a8:	415b      	adcs	r3, r3
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6339      	str	r1, [r7, #48]	; 0x30
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005304:	460b      	mov	r3, r1
 8005306:	18db      	adds	r3, r3, r3
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
 800530a:	4613      	mov	r3, r2
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800531a:	f7fb fc47 	bl	8000bac <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <UART_SetConfig+0x2d4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	; 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a08      	ldr	r2, [pc, #32]	; (8005358 <UART_SetConfig+0x2d4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4422      	add	r2, r4
 800534a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800534c:	e105      	b.n	800555a <UART_SetConfig+0x4d6>
 800534e:	bf00      	nop
 8005350:	40011000 	.word	0x40011000
 8005354:	40011400 	.word	0x40011400
 8005358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800535c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005360:	2200      	movs	r2, #0
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800536a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800536e:	4642      	mov	r2, r8
 8005370:	464b      	mov	r3, r9
 8005372:	1891      	adds	r1, r2, r2
 8005374:	6239      	str	r1, [r7, #32]
 8005376:	415b      	adcs	r3, r3
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800537e:	4641      	mov	r1, r8
 8005380:	1854      	adds	r4, r2, r1
 8005382:	4649      	mov	r1, r9
 8005384:	eb43 0501 	adc.w	r5, r3, r1
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	00eb      	lsls	r3, r5, #3
 8005392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005396:	00e2      	lsls	r2, r4, #3
 8005398:	4614      	mov	r4, r2
 800539a:	461d      	mov	r5, r3
 800539c:	4643      	mov	r3, r8
 800539e:	18e3      	adds	r3, r4, r3
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053a4:	464b      	mov	r3, r9
 80053a6:	eb45 0303 	adc.w	r3, r5, r3
 80053aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053ca:	4629      	mov	r1, r5
 80053cc:	008b      	lsls	r3, r1, #2
 80053ce:	4621      	mov	r1, r4
 80053d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d4:	4621      	mov	r1, r4
 80053d6:	008a      	lsls	r2, r1, #2
 80053d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053dc:	f7fb fbe6 	bl	8000bac <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b60      	ldr	r3, [pc, #384]	; (8005568 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011c      	lsls	r4, r3, #4
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	61b9      	str	r1, [r7, #24]
 8005408:	415b      	adcs	r3, r3
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6139      	str	r1, [r7, #16]
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	67bb      	str	r3, [r7, #120]	; 0x78
 800545a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005468:	4649      	mov	r1, r9
 800546a:	008b      	lsls	r3, r1, #2
 800546c:	4641      	mov	r1, r8
 800546e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005472:	4641      	mov	r1, r8
 8005474:	008a      	lsls	r2, r1, #2
 8005476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800547a:	f7fb fb97 	bl	8000bac <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4b39      	ldr	r3, [pc, #228]	; (8005568 <UART_SetConfig+0x4e4>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	2164      	movs	r1, #100	; 0x64
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	3332      	adds	r3, #50	; 0x32
 8005496:	4a34      	ldr	r2, [pc, #208]	; (8005568 <UART_SetConfig+0x4e4>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a2:	441c      	add	r4, r3
 80054a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a8:	2200      	movs	r2, #0
 80054aa:	673b      	str	r3, [r7, #112]	; 0x70
 80054ac:	677a      	str	r2, [r7, #116]	; 0x74
 80054ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054b2:	4642      	mov	r2, r8
 80054b4:	464b      	mov	r3, r9
 80054b6:	1891      	adds	r1, r2, r2
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	415b      	adcs	r3, r3
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c2:	4641      	mov	r1, r8
 80054c4:	1851      	adds	r1, r2, r1
 80054c6:	6039      	str	r1, [r7, #0]
 80054c8:	4649      	mov	r1, r9
 80054ca:	414b      	adcs	r3, r1
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054da:	4659      	mov	r1, fp
 80054dc:	00cb      	lsls	r3, r1, #3
 80054de:	4651      	mov	r1, sl
 80054e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e4:	4651      	mov	r1, sl
 80054e6:	00ca      	lsls	r2, r1, #3
 80054e8:	4610      	mov	r0, r2
 80054ea:	4619      	mov	r1, r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	4642      	mov	r2, r8
 80054f0:	189b      	adds	r3, r3, r2
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f4:	464b      	mov	r3, r9
 80054f6:	460a      	mov	r2, r1
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	663b      	str	r3, [r7, #96]	; 0x60
 8005508:	667a      	str	r2, [r7, #100]	; 0x64
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005516:	4649      	mov	r1, r9
 8005518:	008b      	lsls	r3, r1, #2
 800551a:	4641      	mov	r1, r8
 800551c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005520:	4641      	mov	r1, r8
 8005522:	008a      	lsls	r2, r1, #2
 8005524:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005528:	f7fb fb40 	bl	8000bac <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <UART_SetConfig+0x4e4>)
 8005532:	fba3 1302 	umull	r1, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2164      	movs	r1, #100	; 0x64
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	; 0x32
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <UART_SetConfig+0x4e4>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4422      	add	r2, r4
 8005558:	609a      	str	r2, [r3, #8]
}
 800555a:	bf00      	nop
 800555c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005566:	bf00      	nop
 8005568:	51eb851f 	.word	0x51eb851f

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	; (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	2000001c 	.word	0x2000001c

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4d0d      	ldr	r5, [pc, #52]	; (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	; (80055b4 <__libc_init_array+0x3c>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2600      	movs	r6, #0
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4d0b      	ldr	r5, [pc, #44]	; (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	; (80055bc <__libc_init_array+0x44>)
 800558c:	f000 fc8e 	bl	8005eac <_init>
 8005590:	1b64      	subs	r4, r4, r5
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2600      	movs	r6, #0
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	08005f88 	.word	0x08005f88
 80055b4:	08005f88 	.word	0x08005f88
 80055b8:	08005f88 	.word	0x08005f88
 80055bc:	08005f8c 	.word	0x08005f8c

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <siprintf>:
 80055d0:	b40e      	push	{r1, r2, r3}
 80055d2:	b500      	push	{lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	ab1d      	add	r3, sp, #116	; 0x74
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	9006      	str	r0, [sp, #24]
 80055dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055e0:	4809      	ldr	r0, [pc, #36]	; (8005608 <siprintf+0x38>)
 80055e2:	9107      	str	r1, [sp, #28]
 80055e4:	9104      	str	r1, [sp, #16]
 80055e6:	4909      	ldr	r1, [pc, #36]	; (800560c <siprintf+0x3c>)
 80055e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ec:	9105      	str	r1, [sp, #20]
 80055ee:	6800      	ldr	r0, [r0, #0]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	a902      	add	r1, sp, #8
 80055f4:	f000 f868 	bl	80056c8 <_svfiprintf_r>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	b01c      	add	sp, #112	; 0x70
 8005600:	f85d eb04 	ldr.w	lr, [sp], #4
 8005604:	b003      	add	sp, #12
 8005606:	4770      	bx	lr
 8005608:	2000001c 	.word	0x2000001c
 800560c:	ffff0208 	.word	0xffff0208

08005610 <__ssputs_r>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	688e      	ldr	r6, [r1, #8]
 8005616:	429e      	cmp	r6, r3
 8005618:	4682      	mov	sl, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4690      	mov	r8, r2
 800561e:	461f      	mov	r7, r3
 8005620:	d838      	bhi.n	8005694 <__ssputs_r+0x84>
 8005622:	898a      	ldrh	r2, [r1, #12]
 8005624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005628:	d032      	beq.n	8005690 <__ssputs_r+0x80>
 800562a:	6825      	ldr	r5, [r4, #0]
 800562c:	6909      	ldr	r1, [r1, #16]
 800562e:	eba5 0901 	sub.w	r9, r5, r1
 8005632:	6965      	ldr	r5, [r4, #20]
 8005634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563c:	3301      	adds	r3, #1
 800563e:	444b      	add	r3, r9
 8005640:	106d      	asrs	r5, r5, #1
 8005642:	429d      	cmp	r5, r3
 8005644:	bf38      	it	cc
 8005646:	461d      	movcc	r5, r3
 8005648:	0553      	lsls	r3, r2, #21
 800564a:	d531      	bpl.n	80056b0 <__ssputs_r+0xa0>
 800564c:	4629      	mov	r1, r5
 800564e:	f000 fb63 	bl	8005d18 <_malloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	b950      	cbnz	r0, 800566c <__ssputs_r+0x5c>
 8005656:	230c      	movs	r3, #12
 8005658:	f8ca 3000 	str.w	r3, [sl]
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566c:	6921      	ldr	r1, [r4, #16]
 800566e:	464a      	mov	r2, r9
 8005670:	f000 fabe 	bl	8005bf0 <memcpy>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	6126      	str	r6, [r4, #16]
 8005682:	6165      	str	r5, [r4, #20]
 8005684:	444e      	add	r6, r9
 8005686:	eba5 0509 	sub.w	r5, r5, r9
 800568a:	6026      	str	r6, [r4, #0]
 800568c:	60a5      	str	r5, [r4, #8]
 800568e:	463e      	mov	r6, r7
 8005690:	42be      	cmp	r6, r7
 8005692:	d900      	bls.n	8005696 <__ssputs_r+0x86>
 8005694:	463e      	mov	r6, r7
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	4632      	mov	r2, r6
 800569a:	4641      	mov	r1, r8
 800569c:	f000 fab6 	bl	8005c0c <memmove>
 80056a0:	68a3      	ldr	r3, [r4, #8]
 80056a2:	1b9b      	subs	r3, r3, r6
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	4433      	add	r3, r6
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	2000      	movs	r0, #0
 80056ae:	e7db      	b.n	8005668 <__ssputs_r+0x58>
 80056b0:	462a      	mov	r2, r5
 80056b2:	f000 fba5 	bl	8005e00 <_realloc_r>
 80056b6:	4606      	mov	r6, r0
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d1e1      	bne.n	8005680 <__ssputs_r+0x70>
 80056bc:	6921      	ldr	r1, [r4, #16]
 80056be:	4650      	mov	r0, sl
 80056c0:	f000 fabe 	bl	8005c40 <_free_r>
 80056c4:	e7c7      	b.n	8005656 <__ssputs_r+0x46>
	...

080056c8 <_svfiprintf_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4698      	mov	r8, r3
 80056ce:	898b      	ldrh	r3, [r1, #12]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	b09d      	sub	sp, #116	; 0x74
 80056d4:	4607      	mov	r7, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	d50e      	bpl.n	80056fa <_svfiprintf_r+0x32>
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	b963      	cbnz	r3, 80056fa <_svfiprintf_r+0x32>
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	f000 fb19 	bl	8005d18 <_malloc_r>
 80056e6:	6028      	str	r0, [r5, #0]
 80056e8:	6128      	str	r0, [r5, #16]
 80056ea:	b920      	cbnz	r0, 80056f6 <_svfiprintf_r+0x2e>
 80056ec:	230c      	movs	r3, #12
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e0d1      	b.n	800589a <_svfiprintf_r+0x1d2>
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	616b      	str	r3, [r5, #20]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	2320      	movs	r3, #32
 8005700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005704:	f8cd 800c 	str.w	r8, [sp, #12]
 8005708:	2330      	movs	r3, #48	; 0x30
 800570a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058b4 <_svfiprintf_r+0x1ec>
 800570e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005712:	f04f 0901 	mov.w	r9, #1
 8005716:	4623      	mov	r3, r4
 8005718:	469a      	mov	sl, r3
 800571a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571e:	b10a      	cbz	r2, 8005724 <_svfiprintf_r+0x5c>
 8005720:	2a25      	cmp	r2, #37	; 0x25
 8005722:	d1f9      	bne.n	8005718 <_svfiprintf_r+0x50>
 8005724:	ebba 0b04 	subs.w	fp, sl, r4
 8005728:	d00b      	beq.n	8005742 <_svfiprintf_r+0x7a>
 800572a:	465b      	mov	r3, fp
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ff6d 	bl	8005610 <__ssputs_r>
 8005736:	3001      	adds	r0, #1
 8005738:	f000 80aa 	beq.w	8005890 <_svfiprintf_r+0x1c8>
 800573c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573e:	445a      	add	r2, fp
 8005740:	9209      	str	r2, [sp, #36]	; 0x24
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80a2 	beq.w	8005890 <_svfiprintf_r+0x1c8>
 800574c:	2300      	movs	r3, #0
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005756:	f10a 0a01 	add.w	sl, sl, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9307      	str	r3, [sp, #28]
 800575e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005762:	931a      	str	r3, [sp, #104]	; 0x68
 8005764:	4654      	mov	r4, sl
 8005766:	2205      	movs	r2, #5
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	4851      	ldr	r0, [pc, #324]	; (80058b4 <_svfiprintf_r+0x1ec>)
 800576e:	f7fa fd57 	bl	8000220 <memchr>
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	b9d8      	cbnz	r0, 80057ae <_svfiprintf_r+0xe6>
 8005776:	06d0      	lsls	r0, r2, #27
 8005778:	bf44      	itt	mi
 800577a:	2320      	movmi	r3, #32
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005780:	0711      	lsls	r1, r2, #28
 8005782:	bf44      	itt	mi
 8005784:	232b      	movmi	r3, #43	; 0x2b
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b2a      	cmp	r3, #42	; 0x2a
 8005790:	d015      	beq.n	80057be <_svfiprintf_r+0xf6>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	4654      	mov	r4, sl
 8005796:	2000      	movs	r0, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4621      	mov	r1, r4
 800579e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a2:	3b30      	subs	r3, #48	; 0x30
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d94e      	bls.n	8005846 <_svfiprintf_r+0x17e>
 80057a8:	b1b0      	cbz	r0, 80057d8 <_svfiprintf_r+0x110>
 80057aa:	9207      	str	r2, [sp, #28]
 80057ac:	e014      	b.n	80057d8 <_svfiprintf_r+0x110>
 80057ae:	eba0 0308 	sub.w	r3, r0, r8
 80057b2:	fa09 f303 	lsl.w	r3, r9, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	46a2      	mov	sl, r4
 80057bc:	e7d2      	b.n	8005764 <_svfiprintf_r+0x9c>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	1d19      	adds	r1, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9103      	str	r1, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbb      	ittet	lt
 80057ca:	425b      	neglt	r3, r3
 80057cc:	f042 0202 	orrlt.w	r2, r2, #2
 80057d0:	9307      	strge	r3, [sp, #28]
 80057d2:	9307      	strlt	r3, [sp, #28]
 80057d4:	bfb8      	it	lt
 80057d6:	9204      	strlt	r2, [sp, #16]
 80057d8:	7823      	ldrb	r3, [r4, #0]
 80057da:	2b2e      	cmp	r3, #46	; 0x2e
 80057dc:	d10c      	bne.n	80057f8 <_svfiprintf_r+0x130>
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	2b2a      	cmp	r3, #42	; 0x2a
 80057e2:	d135      	bne.n	8005850 <_svfiprintf_r+0x188>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9203      	str	r2, [sp, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfb8      	it	lt
 80057f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057f4:	3402      	adds	r4, #2
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058c4 <_svfiprintf_r+0x1fc>
 80057fc:	7821      	ldrb	r1, [r4, #0]
 80057fe:	2203      	movs	r2, #3
 8005800:	4650      	mov	r0, sl
 8005802:	f7fa fd0d 	bl	8000220 <memchr>
 8005806:	b140      	cbz	r0, 800581a <_svfiprintf_r+0x152>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	eba0 000a 	sub.w	r0, r0, sl
 800580e:	fa03 f000 	lsl.w	r0, r3, r0
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	4303      	orrs	r3, r0
 8005816:	3401      	adds	r4, #1
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581e:	4826      	ldr	r0, [pc, #152]	; (80058b8 <_svfiprintf_r+0x1f0>)
 8005820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005824:	2206      	movs	r2, #6
 8005826:	f7fa fcfb 	bl	8000220 <memchr>
 800582a:	2800      	cmp	r0, #0
 800582c:	d038      	beq.n	80058a0 <_svfiprintf_r+0x1d8>
 800582e:	4b23      	ldr	r3, [pc, #140]	; (80058bc <_svfiprintf_r+0x1f4>)
 8005830:	bb1b      	cbnz	r3, 800587a <_svfiprintf_r+0x1b2>
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	3307      	adds	r3, #7
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	3308      	adds	r3, #8
 800583c:	9303      	str	r3, [sp, #12]
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	4433      	add	r3, r6
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	e767      	b.n	8005716 <_svfiprintf_r+0x4e>
 8005846:	fb0c 3202 	mla	r2, ip, r2, r3
 800584a:	460c      	mov	r4, r1
 800584c:	2001      	movs	r0, #1
 800584e:	e7a5      	b.n	800579c <_svfiprintf_r+0xd4>
 8005850:	2300      	movs	r3, #0
 8005852:	3401      	adds	r4, #1
 8005854:	9305      	str	r3, [sp, #20]
 8005856:	4619      	mov	r1, r3
 8005858:	f04f 0c0a 	mov.w	ip, #10
 800585c:	4620      	mov	r0, r4
 800585e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005862:	3a30      	subs	r2, #48	; 0x30
 8005864:	2a09      	cmp	r2, #9
 8005866:	d903      	bls.n	8005870 <_svfiprintf_r+0x1a8>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0c5      	beq.n	80057f8 <_svfiprintf_r+0x130>
 800586c:	9105      	str	r1, [sp, #20]
 800586e:	e7c3      	b.n	80057f8 <_svfiprintf_r+0x130>
 8005870:	fb0c 2101 	mla	r1, ip, r1, r2
 8005874:	4604      	mov	r4, r0
 8005876:	2301      	movs	r3, #1
 8005878:	e7f0      	b.n	800585c <_svfiprintf_r+0x194>
 800587a:	ab03      	add	r3, sp, #12
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	462a      	mov	r2, r5
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <_svfiprintf_r+0x1f8>)
 8005882:	a904      	add	r1, sp, #16
 8005884:	4638      	mov	r0, r7
 8005886:	f3af 8000 	nop.w
 800588a:	1c42      	adds	r2, r0, #1
 800588c:	4606      	mov	r6, r0
 800588e:	d1d6      	bne.n	800583e <_svfiprintf_r+0x176>
 8005890:	89ab      	ldrh	r3, [r5, #12]
 8005892:	065b      	lsls	r3, r3, #25
 8005894:	f53f af2c 	bmi.w	80056f0 <_svfiprintf_r+0x28>
 8005898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800589a:	b01d      	add	sp, #116	; 0x74
 800589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <_svfiprintf_r+0x1f8>)
 80058a8:	a904      	add	r1, sp, #16
 80058aa:	4638      	mov	r0, r7
 80058ac:	f000 f87a 	bl	80059a4 <_printf_i>
 80058b0:	e7eb      	b.n	800588a <_svfiprintf_r+0x1c2>
 80058b2:	bf00      	nop
 80058b4:	08005f4c 	.word	0x08005f4c
 80058b8:	08005f56 	.word	0x08005f56
 80058bc:	00000000 	.word	0x00000000
 80058c0:	08005611 	.word	0x08005611
 80058c4:	08005f52 	.word	0x08005f52

080058c8 <_printf_common>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	4616      	mov	r6, r2
 80058ce:	4699      	mov	r9, r3
 80058d0:	688a      	ldr	r2, [r1, #8]
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bfb8      	it	lt
 80058dc:	4613      	movlt	r3, r2
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058e4:	4607      	mov	r7, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	b10a      	cbz	r2, 80058ee <_printf_common+0x26>
 80058ea:	3301      	adds	r3, #1
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	0699      	lsls	r1, r3, #26
 80058f2:	bf42      	ittt	mi
 80058f4:	6833      	ldrmi	r3, [r6, #0]
 80058f6:	3302      	addmi	r3, #2
 80058f8:	6033      	strmi	r3, [r6, #0]
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	f015 0506 	ands.w	r5, r5, #6
 8005900:	d106      	bne.n	8005910 <_printf_common+0x48>
 8005902:	f104 0a19 	add.w	sl, r4, #25
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	6832      	ldr	r2, [r6, #0]
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	42ab      	cmp	r3, r5
 800590e:	dc26      	bgt.n	800595e <_printf_common+0x96>
 8005910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005914:	1e13      	subs	r3, r2, #0
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	bf18      	it	ne
 800591a:	2301      	movne	r3, #1
 800591c:	0692      	lsls	r2, r2, #26
 800591e:	d42b      	bmi.n	8005978 <_printf_common+0xb0>
 8005920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005924:	4649      	mov	r1, r9
 8005926:	4638      	mov	r0, r7
 8005928:	47c0      	blx	r8
 800592a:	3001      	adds	r0, #1
 800592c:	d01e      	beq.n	800596c <_printf_common+0xa4>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	68e5      	ldr	r5, [r4, #12]
 8005932:	6832      	ldr	r2, [r6, #0]
 8005934:	f003 0306 	and.w	r3, r3, #6
 8005938:	2b04      	cmp	r3, #4
 800593a:	bf08      	it	eq
 800593c:	1aad      	subeq	r5, r5, r2
 800593e:	68a3      	ldr	r3, [r4, #8]
 8005940:	6922      	ldr	r2, [r4, #16]
 8005942:	bf0c      	ite	eq
 8005944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005948:	2500      	movne	r5, #0
 800594a:	4293      	cmp	r3, r2
 800594c:	bfc4      	itt	gt
 800594e:	1a9b      	subgt	r3, r3, r2
 8005950:	18ed      	addgt	r5, r5, r3
 8005952:	2600      	movs	r6, #0
 8005954:	341a      	adds	r4, #26
 8005956:	42b5      	cmp	r5, r6
 8005958:	d11a      	bne.n	8005990 <_printf_common+0xc8>
 800595a:	2000      	movs	r0, #0
 800595c:	e008      	b.n	8005970 <_printf_common+0xa8>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4649      	mov	r1, r9
 8005964:	4638      	mov	r0, r7
 8005966:	47c0      	blx	r8
 8005968:	3001      	adds	r0, #1
 800596a:	d103      	bne.n	8005974 <_printf_common+0xac>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	3501      	adds	r5, #1
 8005976:	e7c6      	b.n	8005906 <_printf_common+0x3e>
 8005978:	18e1      	adds	r1, r4, r3
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	2030      	movs	r0, #48	; 0x30
 800597e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005982:	4422      	add	r2, r4
 8005984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800598c:	3302      	adds	r3, #2
 800598e:	e7c7      	b.n	8005920 <_printf_common+0x58>
 8005990:	2301      	movs	r3, #1
 8005992:	4622      	mov	r2, r4
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d0e6      	beq.n	800596c <_printf_common+0xa4>
 800599e:	3601      	adds	r6, #1
 80059a0:	e7d9      	b.n	8005956 <_printf_common+0x8e>
	...

080059a4 <_printf_i>:
 80059a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	7e0f      	ldrb	r7, [r1, #24]
 80059aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059ac:	2f78      	cmp	r7, #120	; 0x78
 80059ae:	4691      	mov	r9, r2
 80059b0:	4680      	mov	r8, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	469a      	mov	sl, r3
 80059b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ba:	d807      	bhi.n	80059cc <_printf_i+0x28>
 80059bc:	2f62      	cmp	r7, #98	; 0x62
 80059be:	d80a      	bhi.n	80059d6 <_printf_i+0x32>
 80059c0:	2f00      	cmp	r7, #0
 80059c2:	f000 80d8 	beq.w	8005b76 <_printf_i+0x1d2>
 80059c6:	2f58      	cmp	r7, #88	; 0x58
 80059c8:	f000 80a3 	beq.w	8005b12 <_printf_i+0x16e>
 80059cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059d4:	e03a      	b.n	8005a4c <_printf_i+0xa8>
 80059d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059da:	2b15      	cmp	r3, #21
 80059dc:	d8f6      	bhi.n	80059cc <_printf_i+0x28>
 80059de:	a101      	add	r1, pc, #4	; (adr r1, 80059e4 <_printf_i+0x40>)
 80059e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	080059cd 	.word	0x080059cd
 80059f0:	080059cd 	.word	0x080059cd
 80059f4:	080059cd 	.word	0x080059cd
 80059f8:	080059cd 	.word	0x080059cd
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	080059cd 	.word	0x080059cd
 8005a04:	080059cd 	.word	0x080059cd
 8005a08:	080059cd 	.word	0x080059cd
 8005a0c:	080059cd 	.word	0x080059cd
 8005a10:	08005b5d 	.word	0x08005b5d
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005b3f 	.word	0x08005b3f
 8005a1c:	080059cd 	.word	0x080059cd
 8005a20:	080059cd 	.word	0x080059cd
 8005a24:	08005b7f 	.word	0x08005b7f
 8005a28:	080059cd 	.word	0x080059cd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059cd 	.word	0x080059cd
 8005a34:	080059cd 	.word	0x080059cd
 8005a38:	08005b47 	.word	0x08005b47
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	1d1a      	adds	r2, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	602a      	str	r2, [r5, #0]
 8005a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0a3      	b.n	8005b98 <_printf_i+0x1f4>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	6829      	ldr	r1, [r5, #0]
 8005a54:	0606      	lsls	r6, r0, #24
 8005a56:	f101 0304 	add.w	r3, r1, #4
 8005a5a:	d50a      	bpl.n	8005a72 <_printf_i+0xce>
 8005a5c:	680e      	ldr	r6, [r1, #0]
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	2e00      	cmp	r6, #0
 8005a62:	da03      	bge.n	8005a6c <_printf_i+0xc8>
 8005a64:	232d      	movs	r3, #45	; 0x2d
 8005a66:	4276      	negs	r6, r6
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6c:	485e      	ldr	r0, [pc, #376]	; (8005be8 <_printf_i+0x244>)
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e019      	b.n	8005aa6 <_printf_i+0x102>
 8005a72:	680e      	ldr	r6, [r1, #0]
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a7a:	bf18      	it	ne
 8005a7c:	b236      	sxthne	r6, r6
 8005a7e:	e7ef      	b.n	8005a60 <_printf_i+0xbc>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	6029      	str	r1, [r5, #0]
 8005a88:	0601      	lsls	r1, r0, #24
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0xec>
 8005a8c:	681e      	ldr	r6, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0xf2>
 8005a90:	0646      	lsls	r6, r0, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0xe8>
 8005a94:	881e      	ldrh	r6, [r3, #0]
 8005a96:	4854      	ldr	r0, [pc, #336]	; (8005be8 <_printf_i+0x244>)
 8005a98:	2f6f      	cmp	r7, #111	; 0x6f
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2308      	moveq	r3, #8
 8005a9e:	230a      	movne	r3, #10
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aa6:	6865      	ldr	r5, [r4, #4]
 8005aa8:	60a5      	str	r5, [r4, #8]
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	bfa2      	ittt	ge
 8005aae:	6821      	ldrge	r1, [r4, #0]
 8005ab0:	f021 0104 	bicge.w	r1, r1, #4
 8005ab4:	6021      	strge	r1, [r4, #0]
 8005ab6:	b90e      	cbnz	r6, 8005abc <_printf_i+0x118>
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	d04d      	beq.n	8005b58 <_printf_i+0x1b4>
 8005abc:	4615      	mov	r5, r2
 8005abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ac6:	5dc7      	ldrb	r7, [r0, r7]
 8005ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005acc:	4637      	mov	r7, r6
 8005ace:	42bb      	cmp	r3, r7
 8005ad0:	460e      	mov	r6, r1
 8005ad2:	d9f4      	bls.n	8005abe <_printf_i+0x11a>
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d10b      	bne.n	8005af0 <_printf_i+0x14c>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	07de      	lsls	r6, r3, #31
 8005adc:	d508      	bpl.n	8005af0 <_printf_i+0x14c>
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	6861      	ldr	r1, [r4, #4]
 8005ae2:	4299      	cmp	r1, r3
 8005ae4:	bfde      	ittt	le
 8005ae6:	2330      	movle	r3, #48	; 0x30
 8005ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005af0:	1b52      	subs	r2, r2, r5
 8005af2:	6122      	str	r2, [r4, #16]
 8005af4:	f8cd a000 	str.w	sl, [sp]
 8005af8:	464b      	mov	r3, r9
 8005afa:	aa03      	add	r2, sp, #12
 8005afc:	4621      	mov	r1, r4
 8005afe:	4640      	mov	r0, r8
 8005b00:	f7ff fee2 	bl	80058c8 <_printf_common>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d14c      	bne.n	8005ba2 <_printf_i+0x1fe>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	b004      	add	sp, #16
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	4835      	ldr	r0, [pc, #212]	; (8005be8 <_printf_i+0x244>)
 8005b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b20:	6029      	str	r1, [r5, #0]
 8005b22:	061d      	lsls	r5, r3, #24
 8005b24:	d514      	bpl.n	8005b50 <_printf_i+0x1ac>
 8005b26:	07df      	lsls	r7, r3, #31
 8005b28:	bf44      	itt	mi
 8005b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b2e:	6023      	strmi	r3, [r4, #0]
 8005b30:	b91e      	cbnz	r6, 8005b3a <_printf_i+0x196>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	e7b0      	b.n	8005aa0 <_printf_i+0xfc>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f043 0320 	orr.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2378      	movs	r3, #120	; 0x78
 8005b48:	4828      	ldr	r0, [pc, #160]	; (8005bec <_printf_i+0x248>)
 8005b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b4e:	e7e3      	b.n	8005b18 <_printf_i+0x174>
 8005b50:	0659      	lsls	r1, r3, #25
 8005b52:	bf48      	it	mi
 8005b54:	b2b6      	uxthmi	r6, r6
 8005b56:	e7e6      	b.n	8005b26 <_printf_i+0x182>
 8005b58:	4615      	mov	r5, r2
 8005b5a:	e7bb      	b.n	8005ad4 <_printf_i+0x130>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	6826      	ldr	r6, [r4, #0]
 8005b60:	6961      	ldr	r1, [r4, #20]
 8005b62:	1d18      	adds	r0, r3, #4
 8005b64:	6028      	str	r0, [r5, #0]
 8005b66:	0635      	lsls	r5, r6, #24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	d501      	bpl.n	8005b70 <_printf_i+0x1cc>
 8005b6c:	6019      	str	r1, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <_printf_i+0x1d2>
 8005b70:	0670      	lsls	r0, r6, #25
 8005b72:	d5fb      	bpl.n	8005b6c <_printf_i+0x1c8>
 8005b74:	8019      	strh	r1, [r3, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	4615      	mov	r5, r2
 8005b7c:	e7ba      	b.n	8005af4 <_printf_i+0x150>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	602a      	str	r2, [r5, #0]
 8005b84:	681d      	ldr	r5, [r3, #0]
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f7fa fb48 	bl	8000220 <memchr>
 8005b90:	b108      	cbz	r0, 8005b96 <_printf_i+0x1f2>
 8005b92:	1b40      	subs	r0, r0, r5
 8005b94:	6060      	str	r0, [r4, #4]
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	e7a8      	b.n	8005af4 <_printf_i+0x150>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d0ab      	beq.n	8005b08 <_printf_i+0x164>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	079b      	lsls	r3, r3, #30
 8005bb4:	d413      	bmi.n	8005bde <_printf_i+0x23a>
 8005bb6:	68e0      	ldr	r0, [r4, #12]
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	4298      	cmp	r0, r3
 8005bbc:	bfb8      	it	lt
 8005bbe:	4618      	movlt	r0, r3
 8005bc0:	e7a4      	b.n	8005b0c <_printf_i+0x168>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	4640      	mov	r0, r8
 8005bca:	47d0      	blx	sl
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d09b      	beq.n	8005b08 <_printf_i+0x164>
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	1a5b      	subs	r3, r3, r1
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dcf2      	bgt.n	8005bc2 <_printf_i+0x21e>
 8005bdc:	e7eb      	b.n	8005bb6 <_printf_i+0x212>
 8005bde:	2500      	movs	r5, #0
 8005be0:	f104 0619 	add.w	r6, r4, #25
 8005be4:	e7f5      	b.n	8005bd2 <_printf_i+0x22e>
 8005be6:	bf00      	nop
 8005be8:	08005f5d 	.word	0x08005f5d
 8005bec:	08005f6e 	.word	0x08005f6e

08005bf0 <memcpy>:
 8005bf0:	440a      	add	r2, r1
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf8:	d100      	bne.n	8005bfc <memcpy+0xc>
 8005bfa:	4770      	bx	lr
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c06:	4291      	cmp	r1, r2
 8005c08:	d1f9      	bne.n	8005bfe <memcpy+0xe>
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <memmove>:
 8005c0c:	4288      	cmp	r0, r1
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	eb01 0402 	add.w	r4, r1, r2
 8005c14:	d902      	bls.n	8005c1c <memmove+0x10>
 8005c16:	4284      	cmp	r4, r0
 8005c18:	4623      	mov	r3, r4
 8005c1a:	d807      	bhi.n	8005c2c <memmove+0x20>
 8005c1c:	1e43      	subs	r3, r0, #1
 8005c1e:	42a1      	cmp	r1, r4
 8005c20:	d008      	beq.n	8005c34 <memmove+0x28>
 8005c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c2a:	e7f8      	b.n	8005c1e <memmove+0x12>
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4601      	mov	r1, r0
 8005c30:	428a      	cmp	r2, r1
 8005c32:	d100      	bne.n	8005c36 <memmove+0x2a>
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c3e:	e7f7      	b.n	8005c30 <memmove+0x24>

08005c40 <_free_r>:
 8005c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c42:	2900      	cmp	r1, #0
 8005c44:	d044      	beq.n	8005cd0 <_free_r+0x90>
 8005c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c4a:	9001      	str	r0, [sp, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c52:	bfb8      	it	lt
 8005c54:	18e4      	addlt	r4, r4, r3
 8005c56:	f000 f913 	bl	8005e80 <__malloc_lock>
 8005c5a:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <_free_r+0x94>)
 8005c5c:	9801      	ldr	r0, [sp, #4]
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	b933      	cbnz	r3, 8005c70 <_free_r+0x30>
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	6014      	str	r4, [r2, #0]
 8005c66:	b003      	add	sp, #12
 8005c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c6c:	f000 b90e 	b.w	8005e8c <__malloc_unlock>
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d908      	bls.n	8005c86 <_free_r+0x46>
 8005c74:	6825      	ldr	r5, [r4, #0]
 8005c76:	1961      	adds	r1, r4, r5
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	bf01      	itttt	eq
 8005c7c:	6819      	ldreq	r1, [r3, #0]
 8005c7e:	685b      	ldreq	r3, [r3, #4]
 8005c80:	1949      	addeq	r1, r1, r5
 8005c82:	6021      	streq	r1, [r4, #0]
 8005c84:	e7ed      	b.n	8005c62 <_free_r+0x22>
 8005c86:	461a      	mov	r2, r3
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b10b      	cbz	r3, 8005c90 <_free_r+0x50>
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d9fa      	bls.n	8005c86 <_free_r+0x46>
 8005c90:	6811      	ldr	r1, [r2, #0]
 8005c92:	1855      	adds	r5, r2, r1
 8005c94:	42a5      	cmp	r5, r4
 8005c96:	d10b      	bne.n	8005cb0 <_free_r+0x70>
 8005c98:	6824      	ldr	r4, [r4, #0]
 8005c9a:	4421      	add	r1, r4
 8005c9c:	1854      	adds	r4, r2, r1
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	d1e0      	bne.n	8005c66 <_free_r+0x26>
 8005ca4:	681c      	ldr	r4, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	6053      	str	r3, [r2, #4]
 8005caa:	4421      	add	r1, r4
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	e7da      	b.n	8005c66 <_free_r+0x26>
 8005cb0:	d902      	bls.n	8005cb8 <_free_r+0x78>
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	6003      	str	r3, [r0, #0]
 8005cb6:	e7d6      	b.n	8005c66 <_free_r+0x26>
 8005cb8:	6825      	ldr	r5, [r4, #0]
 8005cba:	1961      	adds	r1, r4, r5
 8005cbc:	428b      	cmp	r3, r1
 8005cbe:	bf04      	itt	eq
 8005cc0:	6819      	ldreq	r1, [r3, #0]
 8005cc2:	685b      	ldreq	r3, [r3, #4]
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	bf04      	itt	eq
 8005cc8:	1949      	addeq	r1, r1, r5
 8005cca:	6021      	streq	r1, [r4, #0]
 8005ccc:	6054      	str	r4, [r2, #4]
 8005cce:	e7ca      	b.n	8005c66 <_free_r+0x26>
 8005cd0:	b003      	add	sp, #12
 8005cd2:	bd30      	pop	{r4, r5, pc}
 8005cd4:	20000474 	.word	0x20000474

08005cd8 <sbrk_aligned>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4e0e      	ldr	r6, [pc, #56]	; (8005d14 <sbrk_aligned+0x3c>)
 8005cdc:	460c      	mov	r4, r1
 8005cde:	6831      	ldr	r1, [r6, #0]
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b911      	cbnz	r1, 8005cea <sbrk_aligned+0x12>
 8005ce4:	f000 f8bc 	bl	8005e60 <_sbrk_r>
 8005ce8:	6030      	str	r0, [r6, #0]
 8005cea:	4621      	mov	r1, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 f8b7 	bl	8005e60 <_sbrk_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d00a      	beq.n	8005d0c <sbrk_aligned+0x34>
 8005cf6:	1cc4      	adds	r4, r0, #3
 8005cf8:	f024 0403 	bic.w	r4, r4, #3
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d007      	beq.n	8005d10 <sbrk_aligned+0x38>
 8005d00:	1a21      	subs	r1, r4, r0
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f8ac 	bl	8005e60 <_sbrk_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d101      	bne.n	8005d10 <sbrk_aligned+0x38>
 8005d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d10:	4620      	mov	r0, r4
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	20000478 	.word	0x20000478

08005d18 <_malloc_r>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	1ccd      	adds	r5, r1, #3
 8005d1e:	f025 0503 	bic.w	r5, r5, #3
 8005d22:	3508      	adds	r5, #8
 8005d24:	2d0c      	cmp	r5, #12
 8005d26:	bf38      	it	cc
 8005d28:	250c      	movcc	r5, #12
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	db01      	blt.n	8005d34 <_malloc_r+0x1c>
 8005d30:	42a9      	cmp	r1, r5
 8005d32:	d905      	bls.n	8005d40 <_malloc_r+0x28>
 8005d34:	230c      	movs	r3, #12
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	2600      	movs	r6, #0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d40:	4e2e      	ldr	r6, [pc, #184]	; (8005dfc <_malloc_r+0xe4>)
 8005d42:	f000 f89d 	bl	8005e80 <__malloc_lock>
 8005d46:	6833      	ldr	r3, [r6, #0]
 8005d48:	461c      	mov	r4, r3
 8005d4a:	bb34      	cbnz	r4, 8005d9a <_malloc_r+0x82>
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f7ff ffc2 	bl	8005cd8 <sbrk_aligned>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	4604      	mov	r4, r0
 8005d58:	d14d      	bne.n	8005df6 <_malloc_r+0xde>
 8005d5a:	6834      	ldr	r4, [r6, #0]
 8005d5c:	4626      	mov	r6, r4
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d140      	bne.n	8005de4 <_malloc_r+0xcc>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	4631      	mov	r1, r6
 8005d66:	4638      	mov	r0, r7
 8005d68:	eb04 0803 	add.w	r8, r4, r3
 8005d6c:	f000 f878 	bl	8005e60 <_sbrk_r>
 8005d70:	4580      	cmp	r8, r0
 8005d72:	d13a      	bne.n	8005dea <_malloc_r+0xd2>
 8005d74:	6821      	ldr	r1, [r4, #0]
 8005d76:	3503      	adds	r5, #3
 8005d78:	1a6d      	subs	r5, r5, r1
 8005d7a:	f025 0503 	bic.w	r5, r5, #3
 8005d7e:	3508      	adds	r5, #8
 8005d80:	2d0c      	cmp	r5, #12
 8005d82:	bf38      	it	cc
 8005d84:	250c      	movcc	r5, #12
 8005d86:	4629      	mov	r1, r5
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7ff ffa5 	bl	8005cd8 <sbrk_aligned>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d02b      	beq.n	8005dea <_malloc_r+0xd2>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	442b      	add	r3, r5
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	e00e      	b.n	8005db8 <_malloc_r+0xa0>
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	1b52      	subs	r2, r2, r5
 8005d9e:	d41e      	bmi.n	8005dde <_malloc_r+0xc6>
 8005da0:	2a0b      	cmp	r2, #11
 8005da2:	d916      	bls.n	8005dd2 <_malloc_r+0xba>
 8005da4:	1961      	adds	r1, r4, r5
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	6025      	str	r5, [r4, #0]
 8005daa:	bf18      	it	ne
 8005dac:	6059      	strne	r1, [r3, #4]
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	bf08      	it	eq
 8005db2:	6031      	streq	r1, [r6, #0]
 8005db4:	5162      	str	r2, [r4, r5]
 8005db6:	604b      	str	r3, [r1, #4]
 8005db8:	4638      	mov	r0, r7
 8005dba:	f104 060b 	add.w	r6, r4, #11
 8005dbe:	f000 f865 	bl	8005e8c <__malloc_unlock>
 8005dc2:	f026 0607 	bic.w	r6, r6, #7
 8005dc6:	1d23      	adds	r3, r4, #4
 8005dc8:	1af2      	subs	r2, r6, r3
 8005dca:	d0b6      	beq.n	8005d3a <_malloc_r+0x22>
 8005dcc:	1b9b      	subs	r3, r3, r6
 8005dce:	50a3      	str	r3, [r4, r2]
 8005dd0:	e7b3      	b.n	8005d3a <_malloc_r+0x22>
 8005dd2:	6862      	ldr	r2, [r4, #4]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	bf0c      	ite	eq
 8005dd8:	6032      	streq	r2, [r6, #0]
 8005dda:	605a      	strne	r2, [r3, #4]
 8005ddc:	e7ec      	b.n	8005db8 <_malloc_r+0xa0>
 8005dde:	4623      	mov	r3, r4
 8005de0:	6864      	ldr	r4, [r4, #4]
 8005de2:	e7b2      	b.n	8005d4a <_malloc_r+0x32>
 8005de4:	4634      	mov	r4, r6
 8005de6:	6876      	ldr	r6, [r6, #4]
 8005de8:	e7b9      	b.n	8005d5e <_malloc_r+0x46>
 8005dea:	230c      	movs	r3, #12
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4638      	mov	r0, r7
 8005df0:	f000 f84c 	bl	8005e8c <__malloc_unlock>
 8005df4:	e7a1      	b.n	8005d3a <_malloc_r+0x22>
 8005df6:	6025      	str	r5, [r4, #0]
 8005df8:	e7de      	b.n	8005db8 <_malloc_r+0xa0>
 8005dfa:	bf00      	nop
 8005dfc:	20000474 	.word	0x20000474

08005e00 <_realloc_r>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	4680      	mov	r8, r0
 8005e06:	4614      	mov	r4, r2
 8005e08:	460e      	mov	r6, r1
 8005e0a:	b921      	cbnz	r1, 8005e16 <_realloc_r+0x16>
 8005e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	4611      	mov	r1, r2
 8005e12:	f7ff bf81 	b.w	8005d18 <_malloc_r>
 8005e16:	b92a      	cbnz	r2, 8005e24 <_realloc_r+0x24>
 8005e18:	f7ff ff12 	bl	8005c40 <_free_r>
 8005e1c:	4625      	mov	r5, r4
 8005e1e:	4628      	mov	r0, r5
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	f000 f838 	bl	8005e98 <_malloc_usable_size_r>
 8005e28:	4284      	cmp	r4, r0
 8005e2a:	4607      	mov	r7, r0
 8005e2c:	d802      	bhi.n	8005e34 <_realloc_r+0x34>
 8005e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e32:	d812      	bhi.n	8005e5a <_realloc_r+0x5a>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4640      	mov	r0, r8
 8005e38:	f7ff ff6e 	bl	8005d18 <_malloc_r>
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0ed      	beq.n	8005e1e <_realloc_r+0x1e>
 8005e42:	42bc      	cmp	r4, r7
 8005e44:	4622      	mov	r2, r4
 8005e46:	4631      	mov	r1, r6
 8005e48:	bf28      	it	cs
 8005e4a:	463a      	movcs	r2, r7
 8005e4c:	f7ff fed0 	bl	8005bf0 <memcpy>
 8005e50:	4631      	mov	r1, r6
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7ff fef4 	bl	8005c40 <_free_r>
 8005e58:	e7e1      	b.n	8005e1e <_realloc_r+0x1e>
 8005e5a:	4635      	mov	r5, r6
 8005e5c:	e7df      	b.n	8005e1e <_realloc_r+0x1e>
	...

08005e60 <_sbrk_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d06      	ldr	r5, [pc, #24]	; (8005e7c <_sbrk_r+0x1c>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	f7fb ffa0 	bl	8001db0 <_sbrk>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_sbrk_r+0x1a>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_sbrk_r+0x1a>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	2000047c 	.word	0x2000047c

08005e80 <__malloc_lock>:
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <__malloc_lock+0x8>)
 8005e82:	f000 b811 	b.w	8005ea8 <__retarget_lock_acquire_recursive>
 8005e86:	bf00      	nop
 8005e88:	20000480 	.word	0x20000480

08005e8c <__malloc_unlock>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	; (8005e94 <__malloc_unlock+0x8>)
 8005e8e:	f000 b80c 	b.w	8005eaa <__retarget_lock_release_recursive>
 8005e92:	bf00      	nop
 8005e94:	20000480 	.word	0x20000480

08005e98 <_malloc_usable_size_r>:
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f18      	subs	r0, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbc      	itt	lt
 8005ea2:	580b      	ldrlt	r3, [r1, r0]
 8005ea4:	18c0      	addlt	r0, r0, r3
 8005ea6:	4770      	bx	lr

08005ea8 <__retarget_lock_acquire_recursive>:
 8005ea8:	4770      	bx	lr

08005eaa <__retarget_lock_release_recursive>:
 8005eaa:	4770      	bx	lr

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
