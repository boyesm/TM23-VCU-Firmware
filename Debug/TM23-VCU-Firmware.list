
TM23-VCU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000070  08005670  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005670  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002033  00000000  00000000  0002d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230f4  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d348  00000000  00000000  00053714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8021  00000000  00000000  00060a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138a7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  00138ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800554c 	.word	0x0800554c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800554c 	.word	0x0800554c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f001 fca9 	bl	8002536 <HAL_CAN_GetRxMessage>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bea:	f000 fbcf 	bl	800138c <Error_Handler>
	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000338 	.word	0x20000338
 8000bfc:	2000031c 	.word	0x2000031c

08000c00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b0c5      	sub	sp, #276	; 0x114
 8000c04:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c06:	f000 fea9 	bl	800195c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c0a:	f000 f8bd 	bl	8000d88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c0e:	f000 fab3 	bl	8001178 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c12:	f000 fa81 	bl	8001118 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c16:	f000 fa55 	bl	80010c4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000c1a:	f000 f927 	bl	8000e6c <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c1e:	f000 f977 	bl	8000f10 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c22:	f000 f9c7 	bl	8000fb4 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c26:	f000 fa17 	bl	8001058 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	494a      	ldr	r1, [pc, #296]	; (8000d58 <main+0x158>)
 8000c2e:	484b      	ldr	r0, [pc, #300]	; (8000d5c <main+0x15c>)
 8000c30:	f000 ff6e 	bl	8001b10 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000c34:	2201      	movs	r2, #1
 8000c36:	494a      	ldr	r1, [pc, #296]	; (8000d60 <main+0x160>)
 8000c38:	484a      	ldr	r0, [pc, #296]	; (8000d64 <main+0x164>)
 8000c3a:	f000 ff69 	bl	8001b10 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4949      	ldr	r1, [pc, #292]	; (8000d68 <main+0x168>)
 8000c42:	484a      	ldr	r0, [pc, #296]	; (8000d6c <main+0x16c>)
 8000c44:	f000 ff64 	bl	8001b10 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000c48:	4849      	ldr	r0, [pc, #292]	; (8000d70 <main+0x170>)
 8000c4a:	f001 fc30 	bl	80024ae <HAL_CAN_Start>
//			!= HAL_OK) {
//		Error_Handler();
//	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <main+0x174>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <main+0x174>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <main+0x174>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <main+0x174>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x23;	//CAN ID of this device
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <main+0x174>)
 8000c68:	2223      	movs	r2, #35	; 0x23
 8000c6a:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c6c:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <main+0x174>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	751a      	strb	r2, [r3, #20]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 8000c72:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <main+0x158>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	22c8      	movs	r2, #200	; 0xc8
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d305      	bcc.n	8000c88 <main+0x88>
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x158>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d907      	bls.n	8000c98 <main+0x98>
			APPS_Failure = true;
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <main+0x178>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	483a      	ldr	r0, [pc, #232]	; (8000d7c <main+0x17c>)
 8000c94:	f002 fda6 	bl	80037e4 <HAL_GPIO_WritePin>
			//start 100ms implausibility timer
		}

		if ((appsVal[1] < APPS_1_MIN) || (appsVal[1] > APPS_1_MAX)) {
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <main+0x158>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d305      	bcc.n	8000cb0 <main+0xb0>
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <main+0x158>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d908      	bls.n	8000cc2 <main+0xc2>
			APPS_Failure = true;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <main+0x178>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4830      	ldr	r0, [pc, #192]	; (8000d7c <main+0x17c>)
 8000cbc:	f002 fd92 	bl	80037e4 <HAL_GPIO_WritePin>
 8000cc0:	e046      	b.n	8000d50 <main+0x150>
			//start 100ms implausibility timer
		}

		else {
			APPS_Failure = false;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <main+0x178>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

			APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 8000cc8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4926      	ldr	r1, [pc, #152]	; (8000d68 <main+0x168>)
 8000cd0:	4821      	ldr	r0, [pc, #132]	; (8000d58 <main+0x158>)
 8000cd2:	f000 faed 	bl	80012b0 <APPS_Mapping>

			sprintf(msg,
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <main+0x158>)
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <main+0x158>)
 8000cdc:	685c      	ldr	r4, [r3, #4]
 8000cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000ce2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	460a      	mov	r2, r1
 8000cf0:	4923      	ldr	r1, [pc, #140]	; (8000d80 <main+0x180>)
 8000cf2:	f003 ffbd 	bl	8004c70 <siprintf>
					"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu \r\n",
					appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa89 	bl	8000210 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4639      	mov	r1, r7
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	481e      	ldr	r0, [pc, #120]	; (8000d84 <main+0x184>)
 8000d0a:	f003 fc0a 	bl	8004522 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

			if (abs(apps_PP[0] - apps_PP[1]) <= 10) {
 8000d0e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	f113 0f0a 	cmn.w	r3, #10
 8000d1c:	db13      	blt.n	8000d46 <main+0x146>
 8000d1e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	dc0c      	bgt.n	8000d46 <main+0x146>
//				//Broadcast messages sent to motor controller to control motor torque
//				TxData[0] = 0x1A; //Message ID for "Set AC Current" for motor controller
//				TxData[1] = 0x1F; //Node ID for Standard CAN message
//				TxData[2] = 10 * apps_PP[0]; //Will take the linear sensor as the primary sensor for sending signals to motor controller. (Needs to be scaled by 10 first)

				if (!APPS_Failure) {
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <main+0x178>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00a      	beq.n	8000d50 <main+0x150>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	480f      	ldr	r0, [pc, #60]	; (8000d7c <main+0x17c>)
 8000d40:	f002 fd50 	bl	80037e4 <HAL_GPIO_WritePin>
				if (!APPS_Failure) {
 8000d44:	e004      	b.n	8000d50 <main+0x150>

			} //end if

			else {

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2120      	movs	r1, #32
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <main+0x17c>)
 8000d4c:	f002 fd4a 	bl	80037e4 <HAL_GPIO_WritePin>

			} //end else

		} //end else

		HAL_Delay(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f000 fe75 	bl	8001a40 <HAL_Delay>
		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 8000d56:	e78c      	b.n	8000c72 <main+0x72>
 8000d58:	200002f0 	.word	0x200002f0
 8000d5c:	2000008c 	.word	0x2000008c
 8000d60:	200002f8 	.word	0x200002f8
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	200002f4 	.word	0x200002f4
 8000d6c:	200000d4 	.word	0x200000d4
 8000d70:	20000284 	.word	0x20000284
 8000d74:	20000304 	.word	0x20000304
 8000d78:	20000300 	.word	0x20000300
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	08005564 	.word	0x08005564
 8000d84:	200002ac 	.word	0x200002ac

08000d88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2234      	movs	r2, #52	; 0x34
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ff62 	bl	8004c60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <SystemClock_Config+0xdc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <SystemClock_Config+0xdc>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <SystemClock_Config+0xe0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <SystemClock_Config+0xe0>)
 8000dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <SystemClock_Config+0xe0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000dfc:	23b4      	movs	r3, #180	; 0xb4
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 f89b 	bl	8003f4c <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x98>
		Error_Handler();
 8000e1c:	f000 fab6 	bl	800138c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000e20:	f002 fcfa 	bl	8003818 <HAL_PWREx_EnableOverDrive>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xa6>
		Error_Handler();
 8000e2a:	f000 faaf 	bl	800138c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fd33 	bl	80038b8 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xd4>
		Error_Handler();
 8000e58:	f000 fa98 	bl	800138c <Error_Handler>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e82:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_ADC1_Init+0xa0>)
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ece:	f000 fddb 	bl	8001a88 <HAL_ADC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0x70>
		Error_Handler();
 8000ed8:	f000 fa58 	bl	800138c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eee:	f000 ff33 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x90>
		Error_Handler();
 8000ef8:	f000 fa48 	bl	800138c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	40012000 	.word	0x40012000
 8000f0c:	0f000001 	.word	0x0f000001

08000f10 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f24:	4a21      	ldr	r2, [pc, #132]	; (8000fac <MX_ADC2_Init+0x9c>)
 8000f26:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0xa0>)
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f72:	f000 fd89 	bl	8001a88 <HAL_ADC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000f7c:	f000 fa06 	bl	800138c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_ADC2_Init+0x98>)
 8000f92:	f000 fee1 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000f9c:	f000 f9f6 	bl	800138c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000d4 	.word	0x200000d4
 8000fac:	40012100 	.word	0x40012100
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_ADC3_Init+0x98>)
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <MX_ADC3_Init+0x9c>)
 8000fca:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_ADC3_Init+0x98>)
 8000fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd2:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_ADC3_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_ADC3_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_ADC3_Init+0x98>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_ADC3_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_ADC3_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_ADC3_Init+0x98>)
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <MX_ADC3_Init+0xa0>)
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_ADC3_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_ADC3_Init+0x98>)
 8001002:	2201      	movs	r2, #1
 8001004:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_ADC3_Init+0x98>)
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_ADC3_Init+0x98>)
 8001010:	2201      	movs	r2, #1
 8001012:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_ADC3_Init+0x98>)
 8001016:	f000 fd37 	bl	8001a88 <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC3_Init+0x70>
		Error_Handler();
 8001020:	f000 f9b4 	bl	800138c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001024:	230a      	movs	r3, #10
 8001026:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_ADC3_Init+0x98>)
 8001036:	f000 fe8f 	bl	8001d58 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC3_Init+0x90>
		Error_Handler();
 8001040:	f000 f9a4 	bl	800138c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000011c 	.word	0x2000011c
 8001050:	40012200 	.word	0x40012200
 8001054:	0f000001 	.word	0x0f000001

08001058 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_CAN1_Init+0x64>)
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_CAN1_Init+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_CAN1_Init+0x64>)
 8001064:	2212      	movs	r2, #18
 8001066:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_CAN1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_CAN1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_CAN1_Init+0x64>)
 8001076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_CAN1_Init+0x64>)
 800107e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001082:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <MX_CAN1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_CAN1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_CAN1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_CAN1_Init+0x64>)
 8001098:	2201      	movs	r2, #1
 800109a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MX_CAN1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_CAN1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_CAN1_Init+0x64>)
 80010aa:	f001 f905 	bl	80022b8 <HAL_CAN_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_CAN1_Init+0x60>
		Error_Handler();
 80010b4:	f000 f96a 	bl	800138c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000284 	.word	0x20000284
 80010c0:	40006400 	.word	0x40006400

080010c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_USART2_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_USART2_UART_Init+0x4c>)
 80010fc:	f003 f9c4 	bl	8004488 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001106:	f000 f941 	bl	800138c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200002ac 	.word	0x200002ac
 8001114:	40004400 	.word	0x40004400

08001118 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_DMA_Init+0x5c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_DMA_Init+0x5c>)
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_DMA_Init+0x5c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2038      	movs	r0, #56	; 0x38
 8001140:	f001 fe15 	bl	8002d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001144:	2038      	movs	r0, #56	; 0x38
 8001146:	f001 fe2e 	bl	8002da6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2039      	movs	r0, #57	; 0x39
 8001150:	f001 fe0d 	bl	8002d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001154:	2039      	movs	r0, #57	; 0x39
 8001156:	f001 fe26 	bl	8002da6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	203a      	movs	r0, #58	; 0x3a
 8001160:	f001 fe05 	bl	8002d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001164:	203a      	movs	r0, #58	; 0x3a
 8001166:	f001 fe1e 	bl	8002da6 <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_GPIO_Init+0x128>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a42      	ldr	r2, [pc, #264]	; (80012a0 <MX_GPIO_Init+0x128>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_GPIO_Init+0x128>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	4828      	ldr	r0, [pc, #160]	; (80012a4 <MX_GPIO_Init+0x12c>)
 8001204:	f002 faee 	bl	80037e4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	4826      	ldr	r0, [pc, #152]	; (80012a8 <MX_GPIO_Init+0x130>)
 800120e:	f002 fae9 	bl	80037e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001218:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	481e      	ldr	r0, [pc, #120]	; (80012a4 <MX_GPIO_Init+0x12c>)
 800122a:	f002 f947 	bl	80034bc <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 800122e:	2302      	movs	r3, #2
 8001230:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4818      	ldr	r0, [pc, #96]	; (80012a4 <MX_GPIO_Init+0x12c>)
 8001242:	f002 f93b 	bl	80034bc <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_GPIO_Init+0x12c>)
 800125e:	f002 f92d 	bl	80034bc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001262:	2320      	movs	r3, #32
 8001264:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_GPIO_Init+0x130>)
 800127a:	f002 f91f 	bl	80034bc <HAL_GPIO_Init>

	/*Configure GPIO pin : HV_Present_Pin */
	GPIO_InitStruct.Pin = HV_Present_Pin;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(HV_Present_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_GPIO_Init+0x130>)
 8001294:	f002 f912 	bl	80034bc <HAL_GPIO_Init>

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	00000000 	.word	0x00000000

080012b0 <APPS_Mapping>:
	return false; //shouldn't get to here

} //end Ready_to_Drive()

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0495 * (*appsVal_0) - 24.28;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fa69 	bl	8000798 <__aeabi_ui2d>
 80012c6:	a324      	add	r3, pc, #144	; (adr r3, 8001358 <APPS_Mapping+0xa8>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe fff8 	bl	80002c0 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	a321      	add	r3, pc, #132	; (adr r3, 8001360 <APPS_Mapping+0xb0>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f91d 	bl	800051c <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff facf 	bl	800088c <__aeabi_d2uiz>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b64      	cmp	r3, #100	; 0x64
 80012fa:	d902      	bls.n	8001302 <APPS_Mapping+0x52>
		apps_PP[0] = 100;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	601a      	str	r2, [r3, #0]
	}

	apps_PP[1] = 0.034 * (*appsVal_1) - 24.49;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa46 	bl	8000798 <__aeabi_ui2d>
 800130c:	a316      	add	r3, pc, #88	; (adr r3, 8001368 <APPS_Mapping+0xb8>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7fe ffd5 	bl	80002c0 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	a314      	add	r3, pc, #80	; (adr r3, 8001370 <APPS_Mapping+0xc0>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8fa 	bl	800051c <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1d1c      	adds	r4, r3, #4
 8001334:	f7ff faaa 	bl	800088c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d903      	bls.n	800134e <APPS_Mapping+0x9e>
		apps_PP[1] = 100;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
 800134a:	2264      	movs	r2, #100	; 0x64
 800134c:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	624dd2f2 	.word	0x624dd2f2
 800135c:	3fa95810 	.word	0x3fa95810
 8001360:	147ae148 	.word	0x147ae148
 8001364:	403847ae 	.word	0x403847ae
 8001368:	b020c49c 	.word	0xb020c49c
 800136c:	3fa16872 	.word	0x3fa16872
 8001370:	a3d70a3d 	.word	0xa3d70a3d
 8001374:	40387d70 	.word	0x40387d70

08001378 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013d6:	2007      	movs	r0, #7
 80013d8:	f001 fcbe 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a9b      	ldr	r2, [pc, #620]	; (8001674 <HAL_ADC_MspInit+0x28c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d161      	bne.n	80014ce <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	4b9a      	ldr	r3, [pc, #616]	; (8001678 <HAL_ADC_MspInit+0x290>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a99      	ldr	r2, [pc, #612]	; (8001678 <HAL_ADC_MspInit+0x290>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b97      	ldr	r3, [pc, #604]	; (8001678 <HAL_ADC_MspInit+0x290>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_ADC_MspInit+0x290>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a92      	ldr	r2, [pc, #584]	; (8001678 <HAL_ADC_MspInit+0x290>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b90      	ldr	r3, [pc, #576]	; (8001678 <HAL_ADC_MspInit+0x290>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4889      	ldr	r0, [pc, #548]	; (800167c <HAL_ADC_MspInit+0x294>)
 8001456:	f002 f831 	bl	80034bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <HAL_ADC_MspInit+0x298>)
 800145c:	4a89      	ldr	r2, [pc, #548]	; (8001684 <HAL_ADC_MspInit+0x29c>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001460:	4b87      	ldr	r3, [pc, #540]	; (8001680 <HAL_ADC_MspInit+0x298>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001466:	4b86      	ldr	r3, [pc, #536]	; (8001680 <HAL_ADC_MspInit+0x298>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <HAL_ADC_MspInit+0x298>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HAL_ADC_MspInit+0x298>)
 8001474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001478:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147a:	4b81      	ldr	r3, [pc, #516]	; (8001680 <HAL_ADC_MspInit+0x298>)
 800147c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001480:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001482:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_ADC_MspInit+0x298>)
 8001484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001488:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800148a:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <HAL_ADC_MspInit+0x298>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001492:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_ADC_MspInit+0x298>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <HAL_ADC_MspInit+0x298>)
 800149a:	2204      	movs	r2, #4
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800149e:	4b78      	ldr	r3, [pc, #480]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014a0:	2203      	movs	r2, #3
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b0:	4873      	ldr	r0, [pc, #460]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014b2:	f001 fc93 	bl	8002ddc <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80014bc:	f7ff ff66 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a6f      	ldr	r2, [pc, #444]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_ADC_MspInit+0x298>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014cc:	e0ce      	b.n	800166c <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6d      	ldr	r2, [pc, #436]	; (8001688 <HAL_ADC_MspInit+0x2a0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d162      	bne.n	800159e <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
 80014e8:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_ADC_MspInit+0x290>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001510:	2302      	movs	r3, #2
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	4856      	ldr	r0, [pc, #344]	; (800167c <HAL_ADC_MspInit+0x294>)
 8001524:	f001 ffca 	bl	80034bc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001528:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800152a:	4a59      	ldr	r2, [pc, #356]	; (8001690 <HAL_ADC_MspInit+0x2a8>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001534:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b52      	ldr	r3, [pc, #328]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800156a:	2204      	movs	r2, #4
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001570:	2203      	movs	r2, #3
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001574:	4b45      	ldr	r3, [pc, #276]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001580:	4842      	ldr	r0, [pc, #264]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001582:	f001 fc2b 	bl	8002ddc <HAL_DMA_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 800158c:	f7ff fefe 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a3e      	ldr	r2, [pc, #248]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
 8001596:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_ADC_MspInit+0x2a4>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800159c:	e066      	b.n	800166c <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a3c      	ldr	r2, [pc, #240]	; (8001694 <HAL_ADC_MspInit+0x2ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d161      	bne.n	800166c <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_ADC_MspInit+0x290>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4829      	ldr	r0, [pc, #164]	; (8001698 <HAL_ADC_MspInit+0x2b0>)
 80015f4:	f001 ff62 	bl	80034bc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 80015fa:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HAL_ADC_MspInit+0x2b8>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001600:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001604:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001618:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 800161c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001620:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001628:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 800162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001630:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 800163a:	2204      	movs	r2, #4
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001640:	2203      	movs	r2, #3
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001652:	f001 fbc3 	bl	8002ddc <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 800165c:	f7ff fe96 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001664:	639a      	str	r2, [r3, #56]	; 0x38
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_ADC_MspInit+0x2b4>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800166c:	bf00      	nop
 800166e:	3738      	adds	r7, #56	; 0x38
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40012000 	.word	0x40012000
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	20000164 	.word	0x20000164
 8001684:	40026410 	.word	0x40026410
 8001688:	40012100 	.word	0x40012100
 800168c:	200001c4 	.word	0x200001c4
 8001690:	40026440 	.word	0x40026440
 8001694:	40012200 	.word	0x40012200
 8001698:	40020800 	.word	0x40020800
 800169c:	20000224 	.word	0x20000224
 80016a0:	40026428 	.word	0x40026428

080016a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_CAN_MspInit+0x94>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d134      	bne.n	8001730 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_CAN_MspInit+0x98>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001710:	2309      	movs	r3, #9
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <HAL_CAN_MspInit+0x9c>)
 800171c:	f001 fece 	bl	80034bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2014      	movs	r0, #20
 8001726:	f001 fb22 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800172a:	2014      	movs	r0, #20
 800172c:	f001 fb3b 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40006400 	.word	0x40006400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_UART_MspInit+0x88>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_UART_MspInit+0x88>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179e:	230c      	movs	r3, #12
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_UART_MspInit+0x8c>)
 80017ba:	f001 fe7f 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f8ee 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <CAN1_RX0_IRQHandler+0x10>)
 800182e:	f000 ff94 	bl	800275a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000284 	.word	0x20000284

0800183c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA2_Stream0_IRQHandler+0x10>)
 8001842:	f001 fbd1 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000164 	.word	0x20000164

08001850 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA2_Stream1_IRQHandler+0x10>)
 8001856:	f001 fbc7 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000224 	.word	0x20000224

08001864 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA2_Stream2_IRQHandler+0x10>)
 800186a:	f001 fbbd 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001c4 	.word	0x200001c4

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f003 f9b0 	bl	8004c0c <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20020000 	.word	0x20020000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000340 	.word	0x20000340
 80018e0:	20000358 	.word	0x20000358

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001932:	f7ff ffd7 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f003 f96f 	bl	8004c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff f961 	bl	8000c00 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800194c:	08005600 	.word	0x08005600
  ldr r2, =_sbss
 8001950:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001954:	20000358 	.word	0x20000358

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f001 f9e7 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd02 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 f9ff 	bl	8002dc2 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f001 f9c7 	bl	8002d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000344 	.word	0x20000344

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000344 	.word	0x20000344

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e033      	b.n	8001b06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fc9e 	bl	80013e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ace:	f023 0302 	bic.w	r3, r3, #2
 8001ad2:	f043 0202 	orr.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa6e 	bl	8001fbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
 8001af6:	e001      	b.n	8001afc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Start_DMA+0x1e>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e0e9      	b.n	8001d02 <HAL_ADC_Start_DMA+0x1f2>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d018      	beq.n	8001b76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_ADC_Start_DMA+0x1fc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6d      	ldr	r2, [pc, #436]	; (8001d10 <HAL_ADC_Start_DMA+0x200>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9a      	lsrs	r2, r3, #18
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b68:	e002      	b.n	8001b70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f9      	bne.n	8001b6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b84:	d107      	bne.n	8001b96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80a1 	bne.w	8001ce8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be4:	d106      	bne.n	8001bf4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f023 0206 	bic.w	r2, r3, #6
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_ADC_Start_DMA+0x204>)
 8001c04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <HAL_ADC_Start_DMA+0x208>)
 8001c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	4a42      	ldr	r2, [pc, #264]	; (8001d1c <HAL_ADC_Start_DMA+0x20c>)
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <HAL_ADC_Start_DMA+0x210>)
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	334c      	adds	r3, #76	; 0x4c
 8001c52:	4619      	mov	r1, r3
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f001 f96e 	bl	8002f38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d12a      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_ADC_Start_DMA+0x214>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d015      	beq.n	8001c9e <HAL_ADC_Start_DMA+0x18e>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <HAL_ADC_Start_DMA+0x218>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_Start_DMA+0x178>
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_ADC_Start_DMA+0x204>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00a      	beq.n	8001c9e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_ADC_Start_DMA+0x21c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d136      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_ADC_Start_DMA+0x204>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d130      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d129      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	e020      	b.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_ADC_Start_DMA+0x214>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d11b      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d114      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	e00b      	b.n	8001d00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 0210 	orr.w	r2, r3, #16
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	40012300 	.word	0x40012300
 8001d18:	080021b5 	.word	0x080021b5
 8001d1c:	0800226f 	.word	0x0800226f
 8001d20:	0800228b 	.word	0x0800228b
 8001d24:	40012000 	.word	0x40012000
 8001d28:	40012100 	.word	0x40012100
 8001d2c:	40012200 	.word	0x40012200

08001d30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1c>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e113      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x244>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	d925      	bls.n	8001dd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68d9      	ldr	r1, [r3, #12]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	3b1e      	subs	r3, #30
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68d9      	ldr	r1, [r3, #12]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4403      	add	r3, r0
 8001dc2:	3b1e      	subs	r3, #30
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	e022      	b.n	8001e16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6919      	ldr	r1, [r3, #16]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	2207      	movs	r2, #7
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4403      	add	r3, r0
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d824      	bhi.n	8001e68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b05      	subs	r3, #5
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b05      	subs	r3, #5
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
 8001e66:	e04c      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d824      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	; 0x23
 8001e82:	221f      	movs	r2, #31
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	400a      	ands	r2, r1
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b23      	subs	r3, #35	; 0x23
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	e023      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b41      	subs	r3, #65	; 0x41
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b41      	subs	r3, #65	; 0x41
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_ADC_ConfigChannel+0x250>)
 8001f04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_ADC_ConfigChannel+0x254>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10f      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1d8>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d10b      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_ADC_ConfigChannel+0x254>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12b      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x23a>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_ADC_ConfigChannel+0x258>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0x1f4>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b11      	cmp	r3, #17
 8001f4a:	d122      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_ADC_ConfigChannel+0x258>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_ADC_ConfigChannel+0x260>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	0c9a      	lsrs	r2, r3, #18
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40012300 	.word	0x40012300
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	10000012 	.word	0x10000012
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc4:	4b79      	ldr	r3, [pc, #484]	; (80021ac <ADC_Init+0x1f0>)
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	021a      	lsls	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <ADC_Init+0x1f4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e00f      	b.n	80020ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0202 	bic.w	r2, r2, #2
 80020c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e1b      	ldrb	r3, [r3, #24]
 80020d4:	005a      	lsls	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002106:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	3b01      	subs	r3, #1
 8002114:	035a      	lsls	r2, r3, #13
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	e007      	b.n	8002130 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	3b01      	subs	r3, #1
 800214c:	051a      	lsls	r2, r3, #20
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002172:	025a      	lsls	r2, r3, #9
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	029a      	lsls	r2, r3, #10
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40012300 	.word	0x40012300
 80021b0:	0f000001 	.word	0x0f000001

080021b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d13c      	bne.n	8002248 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d12b      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d127      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002208:	2b00      	cmp	r3, #0
 800220a:	d119      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0220 	bic.w	r2, r2, #32
 800221a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fd75 	bl	8001d30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002246:	e00e      	b.n	8002266 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fd75 	bl	8001d44 <HAL_ADC_ErrorCallback>
}
 800225a:	e004      	b.n	8002266 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff f87b 	bl	8001378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fd4a 	bl	8001d44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0ed      	b.n	80024a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff f9e4 	bl	80016a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7ff fb9c 	bl	8001a28 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022f2:	e012      	b.n	800231a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f4:	f7ff fb98 	bl	8001a28 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d90b      	bls.n	800231a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0c5      	b.n	80024a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0e5      	beq.n	80022f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0202 	bic.w	r2, r2, #2
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff fb76 	bl	8001a28 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800233e:	e012      	b.n	8002366 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002340:	f7ff fb72 	bl	8001a28 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b0a      	cmp	r3, #10
 800234c:	d90b      	bls.n	8002366 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2205      	movs	r2, #5
 800235e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e09f      	b.n	80024a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e5      	bne.n	8002340 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d108      	bne.n	800238e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e007      	b.n	800239e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7e5b      	ldrb	r3, [r3, #25]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e007      	b.n	80023c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e9b      	ldrb	r3, [r3, #26]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e007      	b.n	80023f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0220 	bic.w	r2, r2, #32
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7edb      	ldrb	r3, [r3, #27]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0210 	bic.w	r2, r2, #16
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e007      	b.n	800241c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0210 	orr.w	r2, r2, #16
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7f1b      	ldrb	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0208 	orr.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0208 	bic.w	r2, r2, #8
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7f5b      	ldrb	r3, [r3, #29]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0204 	orr.w	r2, r2, #4
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e007      	b.n	8002470 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d12e      	bne.n	8002520 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024da:	f7ff faa5 	bl	8001a28 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024e0:	e012      	b.n	8002508 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e2:	f7ff faa1 	bl	8001a28 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b0a      	cmp	r3, #10
 80024ee:	d90b      	bls.n	8002508 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2205      	movs	r2, #5
 8002500:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e012      	b.n	800252e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e006      	b.n	800252e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <HAL_CAN_GetRxMessage+0x24>
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 80f3 	bne.w	8002740 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10e      	bne.n	800257e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e7      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d8      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	331b      	adds	r3, #27
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	4413      	add	r3, r2
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0204 	and.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	331b      	adds	r3, #27
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0d5b      	lsrs	r3, r3, #21
 80025ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	331b      	adds	r3, #27
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	331b      	adds	r3, #27
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0202 	and.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	331b      	adds	r3, #27
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 020f 	and.w	r2, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	331b      	adds	r3, #27
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	331b      	adds	r3, #27
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0a1a      	lsrs	r2, r3, #8
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0c1a      	lsrs	r2, r3, #16
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3302      	adds	r3, #2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e1a      	lsrs	r2, r3, #24
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3303      	adds	r3, #3
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3304      	adds	r3, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0a1a      	lsrs	r2, r3, #8
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3305      	adds	r3, #5
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0c1a      	lsrs	r2, r3, #16
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3306      	adds	r3, #6
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e1a      	lsrs	r2, r3, #24
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3307      	adds	r3, #7
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	e007      	b.n	800273c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e006      	b.n	800274e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b08a      	sub	sp, #40	; 0x28
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d07c      	beq.n	800289a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d023      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f983 	bl	8002ac8 <HAL_CAN_TxMailbox0CompleteCallback>
 80027c2:	e016      	b.n	80027f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e00c      	b.n	80027f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e002      	b.n	80027f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f989 	bl	8002b04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d024      	beq.n	8002846 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f963 	bl	8002adc <HAL_CAN_TxMailbox1CompleteCallback>
 8002816:	e016      	b.n	8002846 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e00c      	b.n	8002846 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e002      	b.n	8002846 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f969 	bl	8002b18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d024      	beq.n	800289a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f943 	bl	8002af0 <HAL_CAN_TxMailbox2CompleteCallback>
 800286a:	e016      	b.n	800289a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e00c      	b.n	800289a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e002      	b.n	800289a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f949 	bl	8002b2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2210      	movs	r2, #16
 80028bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2208      	movs	r2, #8
 80028d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f930 	bl	8002b40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe f969 	bl	8000bd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002918:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2208      	movs	r2, #8
 800293c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f912 	bl	8002b68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8f9 	bl	8002b54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8fc 	bl	8002b7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2208      	movs	r2, #8
 800299e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8f5 	bl	8002b90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d07b      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d072      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d043      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03e      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d02b      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x32a>
 8002a2c:	2b60      	cmp	r3, #96	; 0x60
 8002a2e:	d82e      	bhi.n	8002a8e <HAL_CAN_IRQHandler+0x334>
 8002a30:	2b50      	cmp	r3, #80	; 0x50
 8002a32:	d022      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x320>
 8002a34:	2b50      	cmp	r3, #80	; 0x50
 8002a36:	d82a      	bhi.n	8002a8e <HAL_CAN_IRQHandler+0x334>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d019      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x316>
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d826      	bhi.n	8002a8e <HAL_CAN_IRQHandler+0x334>
 8002a40:	2b30      	cmp	r3, #48	; 0x30
 8002a42:	d010      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x30c>
 8002a44:	2b30      	cmp	r3, #48	; 0x30
 8002a46:	d822      	bhi.n	8002a8e <HAL_CAN_IRQHandler+0x334>
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d002      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x2f8>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d005      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a50:	e01d      	b.n	8002a8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a5a:	e019      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a64:	e014      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f043 0320 	orr.w	r3, r3, #32
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a6e:	e00f      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a78:	e00a      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a82:	e005      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a8c:	e000      	b.n	8002a90 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f872 	bl	8002ba4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
         );
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d301      	bcc.n	8002d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <SysTick_Config+0x40>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d32:	210f      	movs	r1, #15
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f7ff ff8e 	bl	8002c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <SysTick_Config+0x40>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <SysTick_Config+0x40>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff29 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff3e 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff8e 	bl	8002cac <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5d 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff31 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffa2 	bl	8002d14 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7fe fe1e 	bl	8001a28 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e099      	b.n	8002f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e18:	e00f      	b.n	8002e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1a:	f7fe fe05 	bl	8001a28 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d908      	bls.n	8002e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e078      	b.n	8002f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e8      	bne.n	8002e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_DMA_Init+0x158>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d117      	bne.n	8002efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa6f 	bl	80033c4 <DMA_CheckFifoParam>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002efa:	2301      	movs	r3, #1
 8002efc:	e016      	b.n	8002f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa26 	bl	8003358 <DMA_CalcBaseAndBitshift>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	223f      	movs	r2, #63	; 0x3f
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	f010803f 	.word	0xf010803f

08002f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_DMA_Start_IT+0x26>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e040      	b.n	8002fe0 <HAL_DMA_Start_IT+0xa8>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d12f      	bne.n	8002fd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f9b8 	bl	80032fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	223f      	movs	r2, #63	; 0x3f
 8002f92:	409a      	lsls	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0216 	orr.w	r2, r2, #22
 8002fa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e005      	b.n	8002fde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_DMA_IRQHandler+0x248>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8e      	ldr	r2, [pc, #568]	; (8003234 <HAL_DMA_IRQHandler+0x24c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	2208      	movs	r2, #8
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2204      	movs	r2, #4
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	2210      	movs	r2, #16
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d043      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2210      	movs	r2, #16
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	e01f      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e016      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0208 	bic.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	2220      	movs	r2, #32
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808f 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8087 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2220      	movs	r2, #32
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b05      	cmp	r3, #5
 8003190:	d136      	bne.n	8003200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0216 	bic.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x1da>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	223f      	movs	r2, #63	; 0x3f
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07e      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
        }
        return;
 80031fe:	e079      	b.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
 800322c:	e02c      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
 800322e:	bf00      	nop
 8003230:	20000000 	.word	0x20000000
 8003234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e01e      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0210 	bic.w	r2, r2, #16
 8003266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d307      	bcc.n	80032d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x2cc>
 80032ce:	e000      	b.n	80032d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f4:	bf00      	nop
    }
  }
}
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d108      	bne.n	800333c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800333a:	e007      	b.n	800334c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b10      	subs	r3, #16
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <DMA_CalcBaseAndBitshift+0x64>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d909      	bls.n	800339a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	; 0x58
 8003398:	e007      	b.n	80033aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	aaaaaaab 	.word	0xaaaaaaab
 80033c0:	080055b4 	.word	0x080055b4

080033c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11f      	bne.n	800341e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d856      	bhi.n	8003492 <DMA_CheckFifoParam+0xce>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <DMA_CheckFifoParam+0x28>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340f 	.word	0x0800340f
 80033f4:	080033fd 	.word	0x080033fd
 80033f8:	08003493 	.word	0x08003493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d046      	beq.n	8003496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340c:	e043      	b.n	8003496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003416:	d140      	bne.n	800349a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341c:	e03d      	b.n	800349a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003426:	d121      	bne.n	800346c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d837      	bhi.n	800349e <DMA_CheckFifoParam+0xda>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <DMA_CheckFifoParam+0x70>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	0800344b 	.word	0x0800344b
 800343c:	08003445 	.word	0x08003445
 8003440:	0800345d 	.word	0x0800345d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e030      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d025      	beq.n	80034a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e022      	b.n	80034a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003464:	d11f      	bne.n	80034a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800346a:	e01c      	b.n	80034a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d903      	bls.n	800347a <DMA_CheckFifoParam+0xb6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003478:	e018      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      break;
 800347e:	e015      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e00b      	b.n	80034aa <DMA_CheckFifoParam+0xe6>
      break;
 8003492:	bf00      	nop
 8003494:	e00a      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e008      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e006      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;   
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
    }
  } 
  
  return status; 
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e165      	b.n	80037a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f040 8154 	bne.w	800379e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d005      	beq.n	800350e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	2b02      	cmp	r3, #2
 800350c:	d130      	bne.n	8003570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0201 	and.w	r2, r3, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b03      	cmp	r3, #3
 800357a:	d017      	beq.n	80035ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d123      	bne.n	8003600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3208      	adds	r2, #8
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	220f      	movs	r2, #15
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80ae 	beq.w	800379e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_GPIO_Init+0x300>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_GPIO_Init+0x300>)
 800364c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <HAL_GPIO_Init+0x300>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800365e:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_GPIO_Init+0x304>)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_GPIO_Init+0x308>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d025      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_GPIO_Init+0x30c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <HAL_GPIO_Init+0x216>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_GPIO_Init+0x310>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x212>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_GPIO_Init+0x314>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x20e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4b      	ldr	r2, [pc, #300]	; (80037d4 <HAL_GPIO_Init+0x318>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x20a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x206>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a49      	ldr	r2, [pc, #292]	; (80037dc <HAL_GPIO_Init+0x320>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x202>
 80036ba:	2306      	movs	r3, #6
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036be:	2307      	movs	r3, #7
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036d6:	2300      	movs	r3, #0
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	4935      	ldr	r1, [pc, #212]	; (80037c0 <HAL_GPIO_Init+0x304>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <HAL_GPIO_Init+0x324>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371a:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <HAL_GPIO_Init+0x324>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_GPIO_Init+0x324>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_GPIO_Init+0x324>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374a:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_GPIO_Init+0x324>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_GPIO_Init+0x324>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_GPIO_Init+0x324>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003798:	4a11      	ldr	r2, [pc, #68]	; (80037e0 <HAL_GPIO_Init+0x324>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f ae96 	bls.w	80034d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003800:	e003      	b.n	800380a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	041a      	lsls	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_PWREx_EnableOverDrive+0x94>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003844:	f7fe f8f0 	bl	8001a28 <HAL_GetTick>
 8003848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800384a:	e009      	b.n	8003860 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800384c:	f7fe f8ec 	bl	8001a28 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385a:	d901      	bls.n	8003860 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e01f      	b.n	80038a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d1ee      	bne.n	800384c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003874:	f7fe f8d8 	bl	8001a28 <HAL_GetTick>
 8003878:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800387a:	e009      	b.n	8003890 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800387c:	f7fe f8d4 	bl	8001a28 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388a:	d901      	bls.n	8003890 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e007      	b.n	80038a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003890:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389c:	d1ee      	bne.n	800387c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	420e0040 	.word	0x420e0040
 80038b0:	40007000 	.word	0x40007000
 80038b4:	420e0044 	.word	0x420e0044

080038b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0cc      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b68      	ldr	r3, [pc, #416]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d90c      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b8      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800390c:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a58      	ldr	r2, [pc, #352]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a52      	ldr	r2, [pc, #328]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800392e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	494d      	ldr	r1, [pc, #308]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d044      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d119      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07f      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d003      	beq.n	8003976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	2b03      	cmp	r3, #3
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4b3f      	ldr	r3, [pc, #252]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e06f      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e067      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4934      	ldr	r1, [pc, #208]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fe f83e 	bl	8001a28 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fe f83a 	bl	8001a28 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04f      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d20c      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e032      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4916      	ldr	r1, [pc, #88]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	490e      	ldr	r1, [pc, #56]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3e:	f000 f855 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003a42:	4602      	mov	r2, r0
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	490a      	ldr	r1, [pc, #40]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	5ccb      	ldrb	r3, [r1, r3]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd ff9e 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023c00 	.word	0x40023c00
 8003a74:	40023800 	.word	0x40023800
 8003a78:	0800559c 	.word	0x0800559c
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	20000004 	.word	0x20000004

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0a9b      	lsrs	r3, r3, #10
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	080055ac 	.word	0x080055ac

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac8:	f7ff ffdc 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0b5b      	lsrs	r3, r3, #13
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	080055ac 	.word	0x080055ac

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b0ae      	sub	sp, #184	; 0xb8
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b12:	4bcb      	ldr	r3, [pc, #812]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	f200 8206 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x440>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003f2d 	.word	0x08003f2d
 8003b30:	08003f2d 	.word	0x08003f2d
 8003b34:	08003f2d 	.word	0x08003f2d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003f2d 	.word	0x08003f2d
 8003b40:	08003f2d 	.word	0x08003f2d
 8003b44:	08003f2d 	.word	0x08003f2d
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003f2d 	.word	0x08003f2d
 8003b50:	08003f2d 	.word	0x08003f2d
 8003b54:	08003f2d 	.word	0x08003f2d
 8003b58:	08003d5d 	.word	0x08003d5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4bb9      	ldr	r3, [pc, #740]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b62:	e1e7      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b64:	4bb8      	ldr	r3, [pc, #736]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b6a:	e1e3      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4bb4      	ldr	r3, [pc, #720]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b78:	4bb1      	ldr	r3, [pc, #708]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d071      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b84:	4bae      	ldr	r3, [pc, #696]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b90:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0159      	lsls	r1, r3, #5
 8003bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbc:	0150      	lsls	r0, r2, #5
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	1a51      	subs	r1, r2, r1
 8003bc6:	6439      	str	r1, [r7, #64]	; 0x40
 8003bc8:	4629      	mov	r1, r5
 8003bca:	eb63 0301 	sbc.w	r3, r3, r1
 8003bce:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bdc:	4649      	mov	r1, r9
 8003bde:	018b      	lsls	r3, r1, #6
 8003be0:	4641      	mov	r1, r8
 8003be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be6:	4641      	mov	r1, r8
 8003be8:	018a      	lsls	r2, r1, #6
 8003bea:	4641      	mov	r1, r8
 8003bec:	1a51      	subs	r1, r2, r1
 8003bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c04:	4649      	mov	r1, r9
 8003c06:	00cb      	lsls	r3, r1, #3
 8003c08:	4641      	mov	r1, r8
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	4641      	mov	r1, r8
 8003c10:	00ca      	lsls	r2, r1, #3
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	4622      	mov	r2, r4
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1e:	462b      	mov	r3, r5
 8003c20:	460a      	mov	r2, r1
 8003c22:	eb42 0303 	adc.w	r3, r2, r3
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c34:	4629      	mov	r1, r5
 8003c36:	024b      	lsls	r3, r1, #9
 8003c38:	4621      	mov	r1, r4
 8003c3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c3e:	4621      	mov	r1, r4
 8003c40:	024a      	lsls	r2, r1, #9
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c58:	f7fc fe38 	bl	80008cc <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c66:	e067      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c68:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c74:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c82:	2300      	movs	r3, #0
 8003c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	0159      	lsls	r1, r3, #5
 8003c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9c:	0150      	lsls	r0, r2, #5
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	018a      	lsls	r2, r1, #6
 8003cca:	4641      	mov	r1, r8
 8003ccc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cea:	4692      	mov	sl, r2
 8003cec:	469b      	mov	fp, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	028b      	lsls	r3, r1, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d14:	4621      	mov	r1, r4
 8003d16:	028a      	lsls	r2, r1, #10
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d20:	2200      	movs	r2, #0
 8003d22:	673b      	str	r3, [r7, #112]	; 0x70
 8003d24:	677a      	str	r2, [r7, #116]	; 0x74
 8003d26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d2a:	f7fc fdcf 	bl	80008cc <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4613      	mov	r3, r2
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d38:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5a:	e0eb      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5c:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d06b      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	663b      	str	r3, [r7, #96]	; 0x60
 8003d88:	2300      	movs	r3, #0
 8003d8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d90:	4622      	mov	r2, r4
 8003d92:	462b      	mov	r3, r5
 8003d94:	f04f 0000 	mov.w	r0, #0
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	0159      	lsls	r1, r3, #5
 8003d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da2:	0150      	lsls	r0, r2, #5
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4621      	mov	r1, r4
 8003daa:	1a51      	subs	r1, r2, r1
 8003dac:	61b9      	str	r1, [r7, #24]
 8003dae:	4629      	mov	r1, r5
 8003db0:	eb63 0301 	sbc.w	r3, r3, r1
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	018b      	lsls	r3, r1, #6
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dcc:	4651      	mov	r1, sl
 8003dce:	018a      	lsls	r2, r1, #6
 8003dd0:	4651      	mov	r1, sl
 8003dd2:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df0:	4690      	mov	r8, r2
 8003df2:	4699      	mov	r9, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	eb18 0303 	adds.w	r3, r8, r3
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	eb49 0303 	adc.w	r3, r9, r3
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e10:	4629      	mov	r1, r5
 8003e12:	024b      	lsls	r3, r1, #9
 8003e14:	4621      	mov	r1, r4
 8003e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	024a      	lsls	r2, r1, #9
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e26:	2200      	movs	r2, #0
 8003e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e30:	f7fc fd4c 	bl	80008cc <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3e:	e065      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x420>
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	2200      	movs	r2, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	4611      	mov	r1, r2
 8003e58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e5e:	2300      	movs	r3, #0
 8003e60:	657b      	str	r3, [r7, #84]	; 0x54
 8003e62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e66:	4642      	mov	r2, r8
 8003e68:	464b      	mov	r3, r9
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0159      	lsls	r1, r3, #5
 8003e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4641      	mov	r1, r8
 8003e80:	1a51      	subs	r1, r2, r1
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	4649      	mov	r1, r9
 8003e86:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	018b      	lsls	r3, r1, #6
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	018a      	lsls	r2, r1, #6
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	1a54      	subs	r4, r2, r1
 8003eaa:	4659      	mov	r1, fp
 8003eac:	eb63 0501 	sbc.w	r5, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	464b      	mov	r3, r9
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003efa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003efe:	f7fc fce5 	bl	80008cc <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4613      	mov	r3, r2
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0f1b      	lsrs	r3, r3, #28
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	37b8      	adds	r7, #184	; 0xb8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	00f42400 	.word	0x00f42400

08003f4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e28d      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8083 	beq.w	8004072 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f6c:	4b94      	ldr	r3, [pc, #592]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d019      	beq.n	8003fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f78:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f84:	4b8e      	ldr	r3, [pc, #568]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x124>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e25a      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x90>
 8003fce:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7b      	ldr	r2, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xcc>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0xb4>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a72      	ldr	r2, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xcc>
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6b      	ldr	r2, [pc, #428]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fd02 	bl	8001a28 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fd fcfe 	bl	8001a28 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e21f      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xdc>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fcee 	bl	8001a28 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fd fcea 	bl	8001a28 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e20b      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x104>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d06f      	beq.n	800415e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800407e:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800408a:	4b4d      	ldr	r3, [pc, #308]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x186>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1d3      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4937      	ldr	r1, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd fc97 	bl	8001a28 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd fc93 	bl	8001a28 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1b4      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fc76 	bl	8001a28 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fd fc72 	bl	8001a28 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e193      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d036      	beq.n	80041d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x27c>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fc56 	bl	8001a28 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fd fc52 	bl	8001a28 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e173      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x234>
 800419e:	e01b      	b.n	80041d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd fc3f 	bl	8001a28 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e00e      	b.n	80041cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd fc3b 	bl	8001a28 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d907      	bls.n	80041cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e15c      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b8a      	ldr	r3, [pc, #552]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ea      	bne.n	80041ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8097 	beq.w	8004314 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b7f      	ldr	r3, [pc, #508]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a7e      	ldr	r2, [pc, #504]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b7c      	ldr	r3, [pc, #496]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b79      	ldr	r3, [pc, #484]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a75      	ldr	r2, [pc, #468]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422e:	f7fd fbfb 	bl	8001a28 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd fbf7 	bl	8001a28 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e118      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b6c      	ldr	r3, [pc, #432]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x31e>
 800425c:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x358>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x340>
 8004272:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a60      	ldr	r2, [pc, #384]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b5e      	ldr	r3, [pc, #376]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a5d      	ldr	r2, [pc, #372]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x358>
 800428c:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a59      	ldr	r2, [pc, #356]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a56      	ldr	r2, [pc, #344]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd fbbc 	bl	8001a28 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fd fbb8 	bl	8001a28 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0d7      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCC_OscConfig+0x368>
 80042d6:	e014      	b.n	8004302 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fba6 	bl	8001a28 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd fba2 	bl	8001a28 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0c1      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80ad 	beq.w	8004478 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d060      	beq.n	80043ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d145      	bne.n	80043be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <HAL_RCC_OscConfig+0x4b4>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fb76 	bl	8001a28 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fb72 	bl	8001a28 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e093      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	491b      	ldr	r1, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x4b4>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd fb47 	bl	8001a28 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439e:	f7fd fb43 	bl	8001a28 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e064      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x452>
 80043bc:	e05c      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_OscConfig+0x4b4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fb30 	bl	8001a28 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fd fb2c 	bl	8001a28 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04d      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x480>
 80043ea:	e045      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e040      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40007000 	.word	0x40007000
 8004400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <HAL_RCC_OscConfig+0x538>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d030      	beq.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d129      	bne.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d122      	bne.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800443a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800443c:	4293      	cmp	r3, r2
 800443e:	d119      	bne.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	3b01      	subs	r3, #1
 800444e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d10f      	bne.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800

08004488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e03f      	b.n	800451a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd f948 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f929 	bl	8004724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08a      	sub	sp, #40	; 0x28
 8004526:	af02      	add	r7, sp, #8
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d17c      	bne.n	800463c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_Transmit+0x2c>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e075      	b.n	800463e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x3e>
 800455c:	2302      	movs	r3, #2
 800455e:	e06e      	b.n	800463e <HAL_UART_Transmit+0x11c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004576:	f7fd fa57 	bl	8001a28 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d108      	bne.n	80045a4 <HAL_UART_Transmit+0x82>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045b4:	e02a      	b.n	800460c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f840 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e036      	b.n	800463e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3302      	adds	r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e007      	b.n	80045fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1cf      	bne.n	80045b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f810 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e006      	b.n	800463e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b090      	sub	sp, #64	; 0x40
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	e050      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d04c      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x30>
 8004666:	f7fd f9df 	bl	8001a28 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004672:	429a      	cmp	r2, r3
 8004674:	d241      	bcs.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004696:	637a      	str	r2, [r7, #52]	; 0x34
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ca:	623a      	str	r2, [r7, #32]
 80046cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69f9      	ldr	r1, [r7, #28]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00f      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d09f      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3740      	adds	r7, #64	; 0x40
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004728:	b0c0      	sub	sp, #256	; 0x100
 800472a:	af00      	add	r7, sp, #0
 800472c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	68d9      	ldr	r1, [r3, #12]
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	ea40 0301 	orr.w	r3, r0, r1
 800474c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	431a      	orrs	r2, r3
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	431a      	orrs	r2, r3
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800477c:	f021 010c 	bic.w	r1, r1, #12
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800478a:	430b      	orrs	r3, r1
 800478c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	6999      	ldr	r1, [r3, #24]
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	ea40 0301 	orr.w	r3, r0, r1
 80047aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8f      	ldr	r3, [pc, #572]	; (80049f0 <UART_SetConfig+0x2cc>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d005      	beq.n	80047c4 <UART_SetConfig+0xa0>
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <UART_SetConfig+0x2d0>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d104      	bne.n	80047ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047c4:	f7ff f97e 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 80047c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047cc:	e003      	b.n	80047d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ce:	f7ff f965 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 80047d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e0:	f040 810c 	bne.w	80049fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047fe:	415b      	adcs	r3, r3
 8004800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004806:	4621      	mov	r1, r4
 8004808:	eb12 0801 	adds.w	r8, r2, r1
 800480c:	4629      	mov	r1, r5
 800480e:	eb43 0901 	adc.w	r9, r3, r1
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004826:	4690      	mov	r8, r2
 8004828:	4699      	mov	r9, r3
 800482a:	4623      	mov	r3, r4
 800482c:	eb18 0303 	adds.w	r3, r8, r3
 8004830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004834:	462b      	mov	r3, r5
 8004836:	eb49 0303 	adc.w	r3, r9, r3
 800483a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800484a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800484e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004852:	460b      	mov	r3, r1
 8004854:	18db      	adds	r3, r3, r3
 8004856:	653b      	str	r3, [r7, #80]	; 0x50
 8004858:	4613      	mov	r3, r2
 800485a:	eb42 0303 	adc.w	r3, r2, r3
 800485e:	657b      	str	r3, [r7, #84]	; 0x54
 8004860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004868:	f7fc f830 	bl	80008cc <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <UART_SetConfig+0x2d4>)
 8004872:	fba3 2302 	umull	r2, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	011c      	lsls	r4, r3, #4
 800487a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487e:	2200      	movs	r2, #0
 8004880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004884:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	1891      	adds	r1, r2, r2
 8004892:	64b9      	str	r1, [r7, #72]	; 0x48
 8004894:	415b      	adcs	r3, r3
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800489c:	4641      	mov	r1, r8
 800489e:	eb12 0a01 	adds.w	sl, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb43 0b01 	adc.w	fp, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048bc:	4692      	mov	sl, r2
 80048be:	469b      	mov	fp, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	eb1a 0303 	adds.w	r3, sl, r3
 80048c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ca:	464b      	mov	r3, r9
 80048cc:	eb4b 0303 	adc.w	r3, fp, r3
 80048d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048e8:	460b      	mov	r3, r1
 80048ea:	18db      	adds	r3, r3, r3
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
 80048ee:	4613      	mov	r3, r2
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
 80048f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048fe:	f7fb ffe5 	bl	80008cc <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <UART_SetConfig+0x2d4>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	; 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <UART_SetConfig+0x2d4>)
 8004920:	fba3 2302 	umull	r2, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800492c:	441c      	add	r4, r3
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004938:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800493c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	63b9      	str	r1, [r7, #56]	; 0x38
 8004948:	415b      	adcs	r3, r3
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	6339      	str	r1, [r7, #48]	; 0x30
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800499c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049a4:	460b      	mov	r3, r1
 80049a6:	18db      	adds	r3, r3, r3
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049aa:	4613      	mov	r3, r2
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ba:	f7fb ff87 	bl	80008cc <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <UART_SetConfig+0x2d4>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <UART_SetConfig+0x2d4>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4422      	add	r2, r4
 80049ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049ec:	e105      	b.n	8004bfa <UART_SetConfig+0x4d6>
 80049ee:	bf00      	nop
 80049f0:	40011000 	.word	0x40011000
 80049f4:	40011400 	.word	0x40011400
 80049f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	6239      	str	r1, [r7, #32]
 8004a16:	415b      	adcs	r3, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a1e:	4641      	mov	r1, r8
 8004a20:	1854      	adds	r4, r2, r1
 8004a22:	4649      	mov	r1, r9
 8004a24:	eb43 0501 	adc.w	r5, r3, r1
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	00eb      	lsls	r3, r5, #3
 8004a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a36:	00e2      	lsls	r2, r4, #3
 8004a38:	4614      	mov	r4, r2
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	4643      	mov	r3, r8
 8004a3e:	18e3      	adds	r3, r4, r3
 8004a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a44:	464b      	mov	r3, r9
 8004a46:	eb45 0303 	adc.w	r3, r5, r3
 8004a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	008b      	lsls	r3, r1, #2
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a74:	4621      	mov	r1, r4
 8004a76:	008a      	lsls	r2, r1, #2
 8004a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a7c:	f7fb ff26 	bl	80008cc <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011c      	lsls	r4, r3, #4
 8004a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	61b9      	str	r1, [r7, #24]
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	1851      	adds	r1, r2, r1
 8004ab4:	6139      	str	r1, [r7, #16]
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	00cb      	lsls	r3, r1, #3
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	00ca      	lsls	r2, r1, #3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4642      	mov	r2, r8
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004afa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b08:	4649      	mov	r1, r9
 8004b0a:	008b      	lsls	r3, r1, #2
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b12:	4641      	mov	r1, r8
 8004b14:	008a      	lsls	r2, r1, #2
 8004b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b1a:	f7fb fed7 	bl	80008cc <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004b24:	fba3 1302 	umull	r1, r3, r3, r2
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2164      	movs	r1, #100	; 0x64
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	3332      	adds	r3, #50	; 0x32
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b42:	441c      	add	r4, r3
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b62:	4641      	mov	r1, r8
 8004b64:	1851      	adds	r1, r2, r1
 8004b66:	6039      	str	r1, [r7, #0]
 8004b68:	4649      	mov	r1, r9
 8004b6a:	414b      	adcs	r3, r1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	00cb      	lsls	r3, r1, #3
 8004b7e:	4651      	mov	r1, sl
 8004b80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b84:	4651      	mov	r1, sl
 8004b86:	00ca      	lsls	r2, r1, #3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4642      	mov	r2, r8
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba8:	667a      	str	r2, [r7, #100]	; 0x64
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	008b      	lsls	r3, r1, #2
 8004bba:	4641      	mov	r1, r8
 8004bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	008a      	lsls	r2, r1, #2
 8004bc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bc8:	f7fb fe80 	bl	80008cc <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2164      	movs	r1, #100	; 0x64
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4422      	add	r2, r4
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <__errno>:
 8004c0c:	4b01      	ldr	r3, [pc, #4]	; (8004c14 <__errno+0x8>)
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c

08004c18 <__libc_init_array>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4d0d      	ldr	r5, [pc, #52]	; (8004c50 <__libc_init_array+0x38>)
 8004c1c:	4c0d      	ldr	r4, [pc, #52]	; (8004c54 <__libc_init_array+0x3c>)
 8004c1e:	1b64      	subs	r4, r4, r5
 8004c20:	10a4      	asrs	r4, r4, #2
 8004c22:	2600      	movs	r6, #0
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	d109      	bne.n	8004c3c <__libc_init_array+0x24>
 8004c28:	4d0b      	ldr	r5, [pc, #44]	; (8004c58 <__libc_init_array+0x40>)
 8004c2a:	4c0c      	ldr	r4, [pc, #48]	; (8004c5c <__libc_init_array+0x44>)
 8004c2c:	f000 fc8e 	bl	800554c <_init>
 8004c30:	1b64      	subs	r4, r4, r5
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	2600      	movs	r6, #0
 8004c36:	42a6      	cmp	r6, r4
 8004c38:	d105      	bne.n	8004c46 <__libc_init_array+0x2e>
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c40:	4798      	blx	r3
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7ee      	b.n	8004c24 <__libc_init_array+0xc>
 8004c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4a:	4798      	blx	r3
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	e7f2      	b.n	8004c36 <__libc_init_array+0x1e>
 8004c50:	080055f8 	.word	0x080055f8
 8004c54:	080055f8 	.word	0x080055f8
 8004c58:	080055f8 	.word	0x080055f8
 8004c5c:	080055fc 	.word	0x080055fc

08004c60 <memset>:
 8004c60:	4402      	add	r2, r0
 8004c62:	4603      	mov	r3, r0
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d100      	bne.n	8004c6a <memset+0xa>
 8004c68:	4770      	bx	lr
 8004c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6e:	e7f9      	b.n	8004c64 <memset+0x4>

08004c70 <siprintf>:
 8004c70:	b40e      	push	{r1, r2, r3}
 8004c72:	b500      	push	{lr}
 8004c74:	b09c      	sub	sp, #112	; 0x70
 8004c76:	ab1d      	add	r3, sp, #116	; 0x74
 8004c78:	9002      	str	r0, [sp, #8]
 8004c7a:	9006      	str	r0, [sp, #24]
 8004c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c80:	4809      	ldr	r0, [pc, #36]	; (8004ca8 <siprintf+0x38>)
 8004c82:	9107      	str	r1, [sp, #28]
 8004c84:	9104      	str	r1, [sp, #16]
 8004c86:	4909      	ldr	r1, [pc, #36]	; (8004cac <siprintf+0x3c>)
 8004c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c8c:	9105      	str	r1, [sp, #20]
 8004c8e:	6800      	ldr	r0, [r0, #0]
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	a902      	add	r1, sp, #8
 8004c94:	f000 f868 	bl	8004d68 <_svfiprintf_r>
 8004c98:	9b02      	ldr	r3, [sp, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	b01c      	add	sp, #112	; 0x70
 8004ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca4:	b003      	add	sp, #12
 8004ca6:	4770      	bx	lr
 8004ca8:	2000000c 	.word	0x2000000c
 8004cac:	ffff0208 	.word	0xffff0208

08004cb0 <__ssputs_r>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	688e      	ldr	r6, [r1, #8]
 8004cb6:	429e      	cmp	r6, r3
 8004cb8:	4682      	mov	sl, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4690      	mov	r8, r2
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	d838      	bhi.n	8004d34 <__ssputs_r+0x84>
 8004cc2:	898a      	ldrh	r2, [r1, #12]
 8004cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cc8:	d032      	beq.n	8004d30 <__ssputs_r+0x80>
 8004cca:	6825      	ldr	r5, [r4, #0]
 8004ccc:	6909      	ldr	r1, [r1, #16]
 8004cce:	eba5 0901 	sub.w	r9, r5, r1
 8004cd2:	6965      	ldr	r5, [r4, #20]
 8004cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cdc:	3301      	adds	r3, #1
 8004cde:	444b      	add	r3, r9
 8004ce0:	106d      	asrs	r5, r5, #1
 8004ce2:	429d      	cmp	r5, r3
 8004ce4:	bf38      	it	cc
 8004ce6:	461d      	movcc	r5, r3
 8004ce8:	0553      	lsls	r3, r2, #21
 8004cea:	d531      	bpl.n	8004d50 <__ssputs_r+0xa0>
 8004cec:	4629      	mov	r1, r5
 8004cee:	f000 fb63 	bl	80053b8 <_malloc_r>
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	b950      	cbnz	r0, 8004d0c <__ssputs_r+0x5c>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	f8ca 3000 	str.w	r3, [sl]
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0c:	6921      	ldr	r1, [r4, #16]
 8004d0e:	464a      	mov	r2, r9
 8004d10:	f000 fabe 	bl	8005290 <memcpy>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	6126      	str	r6, [r4, #16]
 8004d22:	6165      	str	r5, [r4, #20]
 8004d24:	444e      	add	r6, r9
 8004d26:	eba5 0509 	sub.w	r5, r5, r9
 8004d2a:	6026      	str	r6, [r4, #0]
 8004d2c:	60a5      	str	r5, [r4, #8]
 8004d2e:	463e      	mov	r6, r7
 8004d30:	42be      	cmp	r6, r7
 8004d32:	d900      	bls.n	8004d36 <__ssputs_r+0x86>
 8004d34:	463e      	mov	r6, r7
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	f000 fab6 	bl	80052ac <memmove>
 8004d40:	68a3      	ldr	r3, [r4, #8]
 8004d42:	1b9b      	subs	r3, r3, r6
 8004d44:	60a3      	str	r3, [r4, #8]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	4433      	add	r3, r6
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e7db      	b.n	8004d08 <__ssputs_r+0x58>
 8004d50:	462a      	mov	r2, r5
 8004d52:	f000 fba5 	bl	80054a0 <_realloc_r>
 8004d56:	4606      	mov	r6, r0
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1e1      	bne.n	8004d20 <__ssputs_r+0x70>
 8004d5c:	6921      	ldr	r1, [r4, #16]
 8004d5e:	4650      	mov	r0, sl
 8004d60:	f000 fabe 	bl	80052e0 <_free_r>
 8004d64:	e7c7      	b.n	8004cf6 <__ssputs_r+0x46>
	...

08004d68 <_svfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4698      	mov	r8, r3
 8004d6e:	898b      	ldrh	r3, [r1, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	b09d      	sub	sp, #116	; 0x74
 8004d74:	4607      	mov	r7, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	d50e      	bpl.n	8004d9a <_svfiprintf_r+0x32>
 8004d7c:	690b      	ldr	r3, [r1, #16]
 8004d7e:	b963      	cbnz	r3, 8004d9a <_svfiprintf_r+0x32>
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	f000 fb19 	bl	80053b8 <_malloc_r>
 8004d86:	6028      	str	r0, [r5, #0]
 8004d88:	6128      	str	r0, [r5, #16]
 8004d8a:	b920      	cbnz	r0, 8004d96 <_svfiprintf_r+0x2e>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	e0d1      	b.n	8004f3a <_svfiprintf_r+0x1d2>
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	616b      	str	r3, [r5, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9e:	2320      	movs	r3, #32
 8004da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da8:	2330      	movs	r3, #48	; 0x30
 8004daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f54 <_svfiprintf_r+0x1ec>
 8004dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db2:	f04f 0901 	mov.w	r9, #1
 8004db6:	4623      	mov	r3, r4
 8004db8:	469a      	mov	sl, r3
 8004dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dbe:	b10a      	cbz	r2, 8004dc4 <_svfiprintf_r+0x5c>
 8004dc0:	2a25      	cmp	r2, #37	; 0x25
 8004dc2:	d1f9      	bne.n	8004db8 <_svfiprintf_r+0x50>
 8004dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc8:	d00b      	beq.n	8004de2 <_svfiprintf_r+0x7a>
 8004dca:	465b      	mov	r3, fp
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ff6d 	bl	8004cb0 <__ssputs_r>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f000 80aa 	beq.w	8004f30 <_svfiprintf_r+0x1c8>
 8004ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dde:	445a      	add	r2, fp
 8004de0:	9209      	str	r2, [sp, #36]	; 0x24
 8004de2:	f89a 3000 	ldrb.w	r3, [sl]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80a2 	beq.w	8004f30 <_svfiprintf_r+0x1c8>
 8004dec:	2300      	movs	r3, #0
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df6:	f10a 0a01 	add.w	sl, sl, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e02:	931a      	str	r3, [sp, #104]	; 0x68
 8004e04:	4654      	mov	r4, sl
 8004e06:	2205      	movs	r2, #5
 8004e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0c:	4851      	ldr	r0, [pc, #324]	; (8004f54 <_svfiprintf_r+0x1ec>)
 8004e0e:	f7fb fa07 	bl	8000220 <memchr>
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	b9d8      	cbnz	r0, 8004e4e <_svfiprintf_r+0xe6>
 8004e16:	06d0      	lsls	r0, r2, #27
 8004e18:	bf44      	itt	mi
 8004e1a:	2320      	movmi	r3, #32
 8004e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e20:	0711      	lsls	r1, r2, #28
 8004e22:	bf44      	itt	mi
 8004e24:	232b      	movmi	r3, #43	; 0x2b
 8004e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e30:	d015      	beq.n	8004e5e <_svfiprintf_r+0xf6>
 8004e32:	9a07      	ldr	r2, [sp, #28]
 8004e34:	4654      	mov	r4, sl
 8004e36:	2000      	movs	r0, #0
 8004e38:	f04f 0c0a 	mov.w	ip, #10
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e42:	3b30      	subs	r3, #48	; 0x30
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d94e      	bls.n	8004ee6 <_svfiprintf_r+0x17e>
 8004e48:	b1b0      	cbz	r0, 8004e78 <_svfiprintf_r+0x110>
 8004e4a:	9207      	str	r2, [sp, #28]
 8004e4c:	e014      	b.n	8004e78 <_svfiprintf_r+0x110>
 8004e4e:	eba0 0308 	sub.w	r3, r0, r8
 8004e52:	fa09 f303 	lsl.w	r3, r9, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	46a2      	mov	sl, r4
 8004e5c:	e7d2      	b.n	8004e04 <_svfiprintf_r+0x9c>
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	1d19      	adds	r1, r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	9103      	str	r1, [sp, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfbb      	ittet	lt
 8004e6a:	425b      	neglt	r3, r3
 8004e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e70:	9307      	strge	r3, [sp, #28]
 8004e72:	9307      	strlt	r3, [sp, #28]
 8004e74:	bfb8      	it	lt
 8004e76:	9204      	strlt	r2, [sp, #16]
 8004e78:	7823      	ldrb	r3, [r4, #0]
 8004e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7c:	d10c      	bne.n	8004e98 <_svfiprintf_r+0x130>
 8004e7e:	7863      	ldrb	r3, [r4, #1]
 8004e80:	2b2a      	cmp	r3, #42	; 0x2a
 8004e82:	d135      	bne.n	8004ef0 <_svfiprintf_r+0x188>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	9203      	str	r2, [sp, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bfb8      	it	lt
 8004e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e94:	3402      	adds	r4, #2
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f64 <_svfiprintf_r+0x1fc>
 8004e9c:	7821      	ldrb	r1, [r4, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	f7fb f9bd 	bl	8000220 <memchr>
 8004ea6:	b140      	cbz	r0, 8004eba <_svfiprintf_r+0x152>
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	eba0 000a 	sub.w	r0, r0, sl
 8004eae:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	4303      	orrs	r3, r0
 8004eb6:	3401      	adds	r4, #1
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebe:	4826      	ldr	r0, [pc, #152]	; (8004f58 <_svfiprintf_r+0x1f0>)
 8004ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec4:	2206      	movs	r2, #6
 8004ec6:	f7fb f9ab 	bl	8000220 <memchr>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d038      	beq.n	8004f40 <_svfiprintf_r+0x1d8>
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <_svfiprintf_r+0x1f4>)
 8004ed0:	bb1b      	cbnz	r3, 8004f1a <_svfiprintf_r+0x1b2>
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	3308      	adds	r3, #8
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee0:	4433      	add	r3, r6
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee4:	e767      	b.n	8004db6 <_svfiprintf_r+0x4e>
 8004ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eea:	460c      	mov	r4, r1
 8004eec:	2001      	movs	r0, #1
 8004eee:	e7a5      	b.n	8004e3c <_svfiprintf_r+0xd4>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	3401      	adds	r4, #1
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4620      	mov	r0, r4
 8004efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f02:	3a30      	subs	r2, #48	; 0x30
 8004f04:	2a09      	cmp	r2, #9
 8004f06:	d903      	bls.n	8004f10 <_svfiprintf_r+0x1a8>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0c5      	beq.n	8004e98 <_svfiprintf_r+0x130>
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	e7c3      	b.n	8004e98 <_svfiprintf_r+0x130>
 8004f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f14:	4604      	mov	r4, r0
 8004f16:	2301      	movs	r3, #1
 8004f18:	e7f0      	b.n	8004efc <_svfiprintf_r+0x194>
 8004f1a:	ab03      	add	r3, sp, #12
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <_svfiprintf_r+0x1f8>)
 8004f22:	a904      	add	r1, sp, #16
 8004f24:	4638      	mov	r0, r7
 8004f26:	f3af 8000 	nop.w
 8004f2a:	1c42      	adds	r2, r0, #1
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	d1d6      	bne.n	8004ede <_svfiprintf_r+0x176>
 8004f30:	89ab      	ldrh	r3, [r5, #12]
 8004f32:	065b      	lsls	r3, r3, #25
 8004f34:	f53f af2c 	bmi.w	8004d90 <_svfiprintf_r+0x28>
 8004f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f3a:	b01d      	add	sp, #116	; 0x74
 8004f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f40:	ab03      	add	r3, sp, #12
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	462a      	mov	r2, r5
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <_svfiprintf_r+0x1f8>)
 8004f48:	a904      	add	r1, sp, #16
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f000 f87a 	bl	8005044 <_printf_i>
 8004f50:	e7eb      	b.n	8004f2a <_svfiprintf_r+0x1c2>
 8004f52:	bf00      	nop
 8004f54:	080055bc 	.word	0x080055bc
 8004f58:	080055c6 	.word	0x080055c6
 8004f5c:	00000000 	.word	0x00000000
 8004f60:	08004cb1 	.word	0x08004cb1
 8004f64:	080055c2 	.word	0x080055c2

08004f68 <_printf_common>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	4699      	mov	r9, r3
 8004f70:	688a      	ldr	r2, [r1, #8]
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bfb8      	it	lt
 8004f7c:	4613      	movlt	r3, r2
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f84:	4607      	mov	r7, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	b10a      	cbz	r2, 8004f8e <_printf_common+0x26>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	0699      	lsls	r1, r3, #26
 8004f92:	bf42      	ittt	mi
 8004f94:	6833      	ldrmi	r3, [r6, #0]
 8004f96:	3302      	addmi	r3, #2
 8004f98:	6033      	strmi	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	f015 0506 	ands.w	r5, r5, #6
 8004fa0:	d106      	bne.n	8004fb0 <_printf_common+0x48>
 8004fa2:	f104 0a19 	add.w	sl, r4, #25
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	6832      	ldr	r2, [r6, #0]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dc26      	bgt.n	8004ffe <_printf_common+0x96>
 8004fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb4:	1e13      	subs	r3, r2, #0
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d42b      	bmi.n	8005018 <_printf_common+0xb0>
 8004fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d01e      	beq.n	800500c <_printf_common+0xa4>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	68e5      	ldr	r5, [r4, #12]
 8004fd2:	6832      	ldr	r2, [r6, #0]
 8004fd4:	f003 0306 	and.w	r3, r3, #6
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	bf08      	it	eq
 8004fdc:	1aad      	subeq	r5, r5, r2
 8004fde:	68a3      	ldr	r3, [r4, #8]
 8004fe0:	6922      	ldr	r2, [r4, #16]
 8004fe2:	bf0c      	ite	eq
 8004fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe8:	2500      	movne	r5, #0
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bfc4      	itt	gt
 8004fee:	1a9b      	subgt	r3, r3, r2
 8004ff0:	18ed      	addgt	r5, r5, r3
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	42b5      	cmp	r5, r6
 8004ff8:	d11a      	bne.n	8005030 <_printf_common+0xc8>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e008      	b.n	8005010 <_printf_common+0xa8>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4652      	mov	r2, sl
 8005002:	4649      	mov	r1, r9
 8005004:	4638      	mov	r0, r7
 8005006:	47c0      	blx	r8
 8005008:	3001      	adds	r0, #1
 800500a:	d103      	bne.n	8005014 <_printf_common+0xac>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	3501      	adds	r5, #1
 8005016:	e7c6      	b.n	8004fa6 <_printf_common+0x3e>
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	2030      	movs	r0, #48	; 0x30
 800501e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005022:	4422      	add	r2, r4
 8005024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800502c:	3302      	adds	r3, #2
 800502e:	e7c7      	b.n	8004fc0 <_printf_common+0x58>
 8005030:	2301      	movs	r3, #1
 8005032:	4622      	mov	r2, r4
 8005034:	4649      	mov	r1, r9
 8005036:	4638      	mov	r0, r7
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d0e6      	beq.n	800500c <_printf_common+0xa4>
 800503e:	3601      	adds	r6, #1
 8005040:	e7d9      	b.n	8004ff6 <_printf_common+0x8e>
	...

08005044 <_printf_i>:
 8005044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	7e0f      	ldrb	r7, [r1, #24]
 800504a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800504c:	2f78      	cmp	r7, #120	; 0x78
 800504e:	4691      	mov	r9, r2
 8005050:	4680      	mov	r8, r0
 8005052:	460c      	mov	r4, r1
 8005054:	469a      	mov	sl, r3
 8005056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800505a:	d807      	bhi.n	800506c <_printf_i+0x28>
 800505c:	2f62      	cmp	r7, #98	; 0x62
 800505e:	d80a      	bhi.n	8005076 <_printf_i+0x32>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f000 80d8 	beq.w	8005216 <_printf_i+0x1d2>
 8005066:	2f58      	cmp	r7, #88	; 0x58
 8005068:	f000 80a3 	beq.w	80051b2 <_printf_i+0x16e>
 800506c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005074:	e03a      	b.n	80050ec <_printf_i+0xa8>
 8005076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800507a:	2b15      	cmp	r3, #21
 800507c:	d8f6      	bhi.n	800506c <_printf_i+0x28>
 800507e:	a101      	add	r1, pc, #4	; (adr r1, 8005084 <_printf_i+0x40>)
 8005080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050f1 	.word	0x080050f1
 800508c:	0800506d 	.word	0x0800506d
 8005090:	0800506d 	.word	0x0800506d
 8005094:	0800506d 	.word	0x0800506d
 8005098:	0800506d 	.word	0x0800506d
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	0800506d 	.word	0x0800506d
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	080051fd 	.word	0x080051fd
 80050b4:	08005121 	.word	0x08005121
 80050b8:	080051df 	.word	0x080051df
 80050bc:	0800506d 	.word	0x0800506d
 80050c0:	0800506d 	.word	0x0800506d
 80050c4:	0800521f 	.word	0x0800521f
 80050c8:	0800506d 	.word	0x0800506d
 80050cc:	08005121 	.word	0x08005121
 80050d0:	0800506d 	.word	0x0800506d
 80050d4:	0800506d 	.word	0x0800506d
 80050d8:	080051e7 	.word	0x080051e7
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	602a      	str	r2, [r5, #0]
 80050e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0a3      	b.n	8005238 <_printf_i+0x1f4>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	6829      	ldr	r1, [r5, #0]
 80050f4:	0606      	lsls	r6, r0, #24
 80050f6:	f101 0304 	add.w	r3, r1, #4
 80050fa:	d50a      	bpl.n	8005112 <_printf_i+0xce>
 80050fc:	680e      	ldr	r6, [r1, #0]
 80050fe:	602b      	str	r3, [r5, #0]
 8005100:	2e00      	cmp	r6, #0
 8005102:	da03      	bge.n	800510c <_printf_i+0xc8>
 8005104:	232d      	movs	r3, #45	; 0x2d
 8005106:	4276      	negs	r6, r6
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510c:	485e      	ldr	r0, [pc, #376]	; (8005288 <_printf_i+0x244>)
 800510e:	230a      	movs	r3, #10
 8005110:	e019      	b.n	8005146 <_printf_i+0x102>
 8005112:	680e      	ldr	r6, [r1, #0]
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800511a:	bf18      	it	ne
 800511c:	b236      	sxthne	r6, r6
 800511e:	e7ef      	b.n	8005100 <_printf_i+0xbc>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	1d19      	adds	r1, r3, #4
 8005126:	6029      	str	r1, [r5, #0]
 8005128:	0601      	lsls	r1, r0, #24
 800512a:	d501      	bpl.n	8005130 <_printf_i+0xec>
 800512c:	681e      	ldr	r6, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0xf2>
 8005130:	0646      	lsls	r6, r0, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0xe8>
 8005134:	881e      	ldrh	r6, [r3, #0]
 8005136:	4854      	ldr	r0, [pc, #336]	; (8005288 <_printf_i+0x244>)
 8005138:	2f6f      	cmp	r7, #111	; 0x6f
 800513a:	bf0c      	ite	eq
 800513c:	2308      	moveq	r3, #8
 800513e:	230a      	movne	r3, #10
 8005140:	2100      	movs	r1, #0
 8005142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005146:	6865      	ldr	r5, [r4, #4]
 8005148:	60a5      	str	r5, [r4, #8]
 800514a:	2d00      	cmp	r5, #0
 800514c:	bfa2      	ittt	ge
 800514e:	6821      	ldrge	r1, [r4, #0]
 8005150:	f021 0104 	bicge.w	r1, r1, #4
 8005154:	6021      	strge	r1, [r4, #0]
 8005156:	b90e      	cbnz	r6, 800515c <_printf_i+0x118>
 8005158:	2d00      	cmp	r5, #0
 800515a:	d04d      	beq.n	80051f8 <_printf_i+0x1b4>
 800515c:	4615      	mov	r5, r2
 800515e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005162:	fb03 6711 	mls	r7, r3, r1, r6
 8005166:	5dc7      	ldrb	r7, [r0, r7]
 8005168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800516c:	4637      	mov	r7, r6
 800516e:	42bb      	cmp	r3, r7
 8005170:	460e      	mov	r6, r1
 8005172:	d9f4      	bls.n	800515e <_printf_i+0x11a>
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10b      	bne.n	8005190 <_printf_i+0x14c>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	07de      	lsls	r6, r3, #31
 800517c:	d508      	bpl.n	8005190 <_printf_i+0x14c>
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	6861      	ldr	r1, [r4, #4]
 8005182:	4299      	cmp	r1, r3
 8005184:	bfde      	ittt	le
 8005186:	2330      	movle	r3, #48	; 0x30
 8005188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800518c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005190:	1b52      	subs	r2, r2, r5
 8005192:	6122      	str	r2, [r4, #16]
 8005194:	f8cd a000 	str.w	sl, [sp]
 8005198:	464b      	mov	r3, r9
 800519a:	aa03      	add	r2, sp, #12
 800519c:	4621      	mov	r1, r4
 800519e:	4640      	mov	r0, r8
 80051a0:	f7ff fee2 	bl	8004f68 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d14c      	bne.n	8005242 <_printf_i+0x1fe>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b004      	add	sp, #16
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	4835      	ldr	r0, [pc, #212]	; (8005288 <_printf_i+0x244>)
 80051b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051b8:	6829      	ldr	r1, [r5, #0]
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80051c0:	6029      	str	r1, [r5, #0]
 80051c2:	061d      	lsls	r5, r3, #24
 80051c4:	d514      	bpl.n	80051f0 <_printf_i+0x1ac>
 80051c6:	07df      	lsls	r7, r3, #31
 80051c8:	bf44      	itt	mi
 80051ca:	f043 0320 	orrmi.w	r3, r3, #32
 80051ce:	6023      	strmi	r3, [r4, #0]
 80051d0:	b91e      	cbnz	r6, 80051da <_printf_i+0x196>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f023 0320 	bic.w	r3, r3, #32
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	2310      	movs	r3, #16
 80051dc:	e7b0      	b.n	8005140 <_printf_i+0xfc>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f043 0320 	orr.w	r3, r3, #32
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	2378      	movs	r3, #120	; 0x78
 80051e8:	4828      	ldr	r0, [pc, #160]	; (800528c <_printf_i+0x248>)
 80051ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ee:	e7e3      	b.n	80051b8 <_printf_i+0x174>
 80051f0:	0659      	lsls	r1, r3, #25
 80051f2:	bf48      	it	mi
 80051f4:	b2b6      	uxthmi	r6, r6
 80051f6:	e7e6      	b.n	80051c6 <_printf_i+0x182>
 80051f8:	4615      	mov	r5, r2
 80051fa:	e7bb      	b.n	8005174 <_printf_i+0x130>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	6826      	ldr	r6, [r4, #0]
 8005200:	6961      	ldr	r1, [r4, #20]
 8005202:	1d18      	adds	r0, r3, #4
 8005204:	6028      	str	r0, [r5, #0]
 8005206:	0635      	lsls	r5, r6, #24
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	d501      	bpl.n	8005210 <_printf_i+0x1cc>
 800520c:	6019      	str	r1, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0x1d2>
 8005210:	0670      	lsls	r0, r6, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0x1c8>
 8005214:	8019      	strh	r1, [r3, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	4615      	mov	r5, r2
 800521c:	e7ba      	b.n	8005194 <_printf_i+0x150>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	1d1a      	adds	r2, r3, #4
 8005222:	602a      	str	r2, [r5, #0]
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	2100      	movs	r1, #0
 800522a:	4628      	mov	r0, r5
 800522c:	f7fa fff8 	bl	8000220 <memchr>
 8005230:	b108      	cbz	r0, 8005236 <_printf_i+0x1f2>
 8005232:	1b40      	subs	r0, r0, r5
 8005234:	6060      	str	r0, [r4, #4]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	2300      	movs	r3, #0
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005240:	e7a8      	b.n	8005194 <_printf_i+0x150>
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	462a      	mov	r2, r5
 8005246:	4649      	mov	r1, r9
 8005248:	4640      	mov	r0, r8
 800524a:	47d0      	blx	sl
 800524c:	3001      	adds	r0, #1
 800524e:	d0ab      	beq.n	80051a8 <_printf_i+0x164>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	079b      	lsls	r3, r3, #30
 8005254:	d413      	bmi.n	800527e <_printf_i+0x23a>
 8005256:	68e0      	ldr	r0, [r4, #12]
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	4298      	cmp	r0, r3
 800525c:	bfb8      	it	lt
 800525e:	4618      	movlt	r0, r3
 8005260:	e7a4      	b.n	80051ac <_printf_i+0x168>
 8005262:	2301      	movs	r3, #1
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d09b      	beq.n	80051a8 <_printf_i+0x164>
 8005270:	3501      	adds	r5, #1
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	9903      	ldr	r1, [sp, #12]
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	42ab      	cmp	r3, r5
 800527a:	dcf2      	bgt.n	8005262 <_printf_i+0x21e>
 800527c:	e7eb      	b.n	8005256 <_printf_i+0x212>
 800527e:	2500      	movs	r5, #0
 8005280:	f104 0619 	add.w	r6, r4, #25
 8005284:	e7f5      	b.n	8005272 <_printf_i+0x22e>
 8005286:	bf00      	nop
 8005288:	080055cd 	.word	0x080055cd
 800528c:	080055de 	.word	0x080055de

08005290 <memcpy>:
 8005290:	440a      	add	r2, r1
 8005292:	4291      	cmp	r1, r2
 8005294:	f100 33ff 	add.w	r3, r0, #4294967295
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	4770      	bx	lr
 800529c:	b510      	push	{r4, lr}
 800529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a6:	4291      	cmp	r1, r2
 80052a8:	d1f9      	bne.n	800529e <memcpy+0xe>
 80052aa:	bd10      	pop	{r4, pc}

080052ac <memmove>:
 80052ac:	4288      	cmp	r0, r1
 80052ae:	b510      	push	{r4, lr}
 80052b0:	eb01 0402 	add.w	r4, r1, r2
 80052b4:	d902      	bls.n	80052bc <memmove+0x10>
 80052b6:	4284      	cmp	r4, r0
 80052b8:	4623      	mov	r3, r4
 80052ba:	d807      	bhi.n	80052cc <memmove+0x20>
 80052bc:	1e43      	subs	r3, r0, #1
 80052be:	42a1      	cmp	r1, r4
 80052c0:	d008      	beq.n	80052d4 <memmove+0x28>
 80052c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ca:	e7f8      	b.n	80052be <memmove+0x12>
 80052cc:	4402      	add	r2, r0
 80052ce:	4601      	mov	r1, r0
 80052d0:	428a      	cmp	r2, r1
 80052d2:	d100      	bne.n	80052d6 <memmove+0x2a>
 80052d4:	bd10      	pop	{r4, pc}
 80052d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052de:	e7f7      	b.n	80052d0 <memmove+0x24>

080052e0 <_free_r>:
 80052e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e2:	2900      	cmp	r1, #0
 80052e4:	d044      	beq.n	8005370 <_free_r+0x90>
 80052e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ea:	9001      	str	r0, [sp, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f1a1 0404 	sub.w	r4, r1, #4
 80052f2:	bfb8      	it	lt
 80052f4:	18e4      	addlt	r4, r4, r3
 80052f6:	f000 f913 	bl	8005520 <__malloc_lock>
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <_free_r+0x94>)
 80052fc:	9801      	ldr	r0, [sp, #4]
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	b933      	cbnz	r3, 8005310 <_free_r+0x30>
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	6014      	str	r4, [r2, #0]
 8005306:	b003      	add	sp, #12
 8005308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800530c:	f000 b90e 	b.w	800552c <__malloc_unlock>
 8005310:	42a3      	cmp	r3, r4
 8005312:	d908      	bls.n	8005326 <_free_r+0x46>
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	1961      	adds	r1, r4, r5
 8005318:	428b      	cmp	r3, r1
 800531a:	bf01      	itttt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	1949      	addeq	r1, r1, r5
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	e7ed      	b.n	8005302 <_free_r+0x22>
 8005326:	461a      	mov	r2, r3
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b10b      	cbz	r3, 8005330 <_free_r+0x50>
 800532c:	42a3      	cmp	r3, r4
 800532e:	d9fa      	bls.n	8005326 <_free_r+0x46>
 8005330:	6811      	ldr	r1, [r2, #0]
 8005332:	1855      	adds	r5, r2, r1
 8005334:	42a5      	cmp	r5, r4
 8005336:	d10b      	bne.n	8005350 <_free_r+0x70>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	4421      	add	r1, r4
 800533c:	1854      	adds	r4, r2, r1
 800533e:	42a3      	cmp	r3, r4
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	d1e0      	bne.n	8005306 <_free_r+0x26>
 8005344:	681c      	ldr	r4, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	4421      	add	r1, r4
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	e7da      	b.n	8005306 <_free_r+0x26>
 8005350:	d902      	bls.n	8005358 <_free_r+0x78>
 8005352:	230c      	movs	r3, #12
 8005354:	6003      	str	r3, [r0, #0]
 8005356:	e7d6      	b.n	8005306 <_free_r+0x26>
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1961      	adds	r1, r4, r5
 800535c:	428b      	cmp	r3, r1
 800535e:	bf04      	itt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	bf04      	itt	eq
 8005368:	1949      	addeq	r1, r1, r5
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	6054      	str	r4, [r2, #4]
 800536e:	e7ca      	b.n	8005306 <_free_r+0x26>
 8005370:	b003      	add	sp, #12
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	20000348 	.word	0x20000348

08005378 <sbrk_aligned>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4e0e      	ldr	r6, [pc, #56]	; (80053b4 <sbrk_aligned+0x3c>)
 800537c:	460c      	mov	r4, r1
 800537e:	6831      	ldr	r1, [r6, #0]
 8005380:	4605      	mov	r5, r0
 8005382:	b911      	cbnz	r1, 800538a <sbrk_aligned+0x12>
 8005384:	f000 f8bc 	bl	8005500 <_sbrk_r>
 8005388:	6030      	str	r0, [r6, #0]
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	f000 f8b7 	bl	8005500 <_sbrk_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d00a      	beq.n	80053ac <sbrk_aligned+0x34>
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d007      	beq.n	80053b0 <sbrk_aligned+0x38>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 f8ac 	bl	8005500 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d101      	bne.n	80053b0 <sbrk_aligned+0x38>
 80053ac:	f04f 34ff 	mov.w	r4, #4294967295
 80053b0:	4620      	mov	r0, r4
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	2000034c 	.word	0x2000034c

080053b8 <_malloc_r>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	1ccd      	adds	r5, r1, #3
 80053be:	f025 0503 	bic.w	r5, r5, #3
 80053c2:	3508      	adds	r5, #8
 80053c4:	2d0c      	cmp	r5, #12
 80053c6:	bf38      	it	cc
 80053c8:	250c      	movcc	r5, #12
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	4607      	mov	r7, r0
 80053ce:	db01      	blt.n	80053d4 <_malloc_r+0x1c>
 80053d0:	42a9      	cmp	r1, r5
 80053d2:	d905      	bls.n	80053e0 <_malloc_r+0x28>
 80053d4:	230c      	movs	r3, #12
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	2600      	movs	r6, #0
 80053da:	4630      	mov	r0, r6
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	4e2e      	ldr	r6, [pc, #184]	; (800549c <_malloc_r+0xe4>)
 80053e2:	f000 f89d 	bl	8005520 <__malloc_lock>
 80053e6:	6833      	ldr	r3, [r6, #0]
 80053e8:	461c      	mov	r4, r3
 80053ea:	bb34      	cbnz	r4, 800543a <_malloc_r+0x82>
 80053ec:	4629      	mov	r1, r5
 80053ee:	4638      	mov	r0, r7
 80053f0:	f7ff ffc2 	bl	8005378 <sbrk_aligned>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	4604      	mov	r4, r0
 80053f8:	d14d      	bne.n	8005496 <_malloc_r+0xde>
 80053fa:	6834      	ldr	r4, [r6, #0]
 80053fc:	4626      	mov	r6, r4
 80053fe:	2e00      	cmp	r6, #0
 8005400:	d140      	bne.n	8005484 <_malloc_r+0xcc>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4631      	mov	r1, r6
 8005406:	4638      	mov	r0, r7
 8005408:	eb04 0803 	add.w	r8, r4, r3
 800540c:	f000 f878 	bl	8005500 <_sbrk_r>
 8005410:	4580      	cmp	r8, r0
 8005412:	d13a      	bne.n	800548a <_malloc_r+0xd2>
 8005414:	6821      	ldr	r1, [r4, #0]
 8005416:	3503      	adds	r5, #3
 8005418:	1a6d      	subs	r5, r5, r1
 800541a:	f025 0503 	bic.w	r5, r5, #3
 800541e:	3508      	adds	r5, #8
 8005420:	2d0c      	cmp	r5, #12
 8005422:	bf38      	it	cc
 8005424:	250c      	movcc	r5, #12
 8005426:	4629      	mov	r1, r5
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff ffa5 	bl	8005378 <sbrk_aligned>
 800542e:	3001      	adds	r0, #1
 8005430:	d02b      	beq.n	800548a <_malloc_r+0xd2>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	442b      	add	r3, r5
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	e00e      	b.n	8005458 <_malloc_r+0xa0>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	1b52      	subs	r2, r2, r5
 800543e:	d41e      	bmi.n	800547e <_malloc_r+0xc6>
 8005440:	2a0b      	cmp	r2, #11
 8005442:	d916      	bls.n	8005472 <_malloc_r+0xba>
 8005444:	1961      	adds	r1, r4, r5
 8005446:	42a3      	cmp	r3, r4
 8005448:	6025      	str	r5, [r4, #0]
 800544a:	bf18      	it	ne
 800544c:	6059      	strne	r1, [r3, #4]
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	bf08      	it	eq
 8005452:	6031      	streq	r1, [r6, #0]
 8005454:	5162      	str	r2, [r4, r5]
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	4638      	mov	r0, r7
 800545a:	f104 060b 	add.w	r6, r4, #11
 800545e:	f000 f865 	bl	800552c <__malloc_unlock>
 8005462:	f026 0607 	bic.w	r6, r6, #7
 8005466:	1d23      	adds	r3, r4, #4
 8005468:	1af2      	subs	r2, r6, r3
 800546a:	d0b6      	beq.n	80053da <_malloc_r+0x22>
 800546c:	1b9b      	subs	r3, r3, r6
 800546e:	50a3      	str	r3, [r4, r2]
 8005470:	e7b3      	b.n	80053da <_malloc_r+0x22>
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	42a3      	cmp	r3, r4
 8005476:	bf0c      	ite	eq
 8005478:	6032      	streq	r2, [r6, #0]
 800547a:	605a      	strne	r2, [r3, #4]
 800547c:	e7ec      	b.n	8005458 <_malloc_r+0xa0>
 800547e:	4623      	mov	r3, r4
 8005480:	6864      	ldr	r4, [r4, #4]
 8005482:	e7b2      	b.n	80053ea <_malloc_r+0x32>
 8005484:	4634      	mov	r4, r6
 8005486:	6876      	ldr	r6, [r6, #4]
 8005488:	e7b9      	b.n	80053fe <_malloc_r+0x46>
 800548a:	230c      	movs	r3, #12
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4638      	mov	r0, r7
 8005490:	f000 f84c 	bl	800552c <__malloc_unlock>
 8005494:	e7a1      	b.n	80053da <_malloc_r+0x22>
 8005496:	6025      	str	r5, [r4, #0]
 8005498:	e7de      	b.n	8005458 <_malloc_r+0xa0>
 800549a:	bf00      	nop
 800549c:	20000348 	.word	0x20000348

080054a0 <_realloc_r>:
 80054a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4680      	mov	r8, r0
 80054a6:	4614      	mov	r4, r2
 80054a8:	460e      	mov	r6, r1
 80054aa:	b921      	cbnz	r1, 80054b6 <_realloc_r+0x16>
 80054ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b0:	4611      	mov	r1, r2
 80054b2:	f7ff bf81 	b.w	80053b8 <_malloc_r>
 80054b6:	b92a      	cbnz	r2, 80054c4 <_realloc_r+0x24>
 80054b8:	f7ff ff12 	bl	80052e0 <_free_r>
 80054bc:	4625      	mov	r5, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c4:	f000 f838 	bl	8005538 <_malloc_usable_size_r>
 80054c8:	4284      	cmp	r4, r0
 80054ca:	4607      	mov	r7, r0
 80054cc:	d802      	bhi.n	80054d4 <_realloc_r+0x34>
 80054ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054d2:	d812      	bhi.n	80054fa <_realloc_r+0x5a>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4640      	mov	r0, r8
 80054d8:	f7ff ff6e 	bl	80053b8 <_malloc_r>
 80054dc:	4605      	mov	r5, r0
 80054de:	2800      	cmp	r0, #0
 80054e0:	d0ed      	beq.n	80054be <_realloc_r+0x1e>
 80054e2:	42bc      	cmp	r4, r7
 80054e4:	4622      	mov	r2, r4
 80054e6:	4631      	mov	r1, r6
 80054e8:	bf28      	it	cs
 80054ea:	463a      	movcs	r2, r7
 80054ec:	f7ff fed0 	bl	8005290 <memcpy>
 80054f0:	4631      	mov	r1, r6
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7ff fef4 	bl	80052e0 <_free_r>
 80054f8:	e7e1      	b.n	80054be <_realloc_r+0x1e>
 80054fa:	4635      	mov	r5, r6
 80054fc:	e7df      	b.n	80054be <_realloc_r+0x1e>
	...

08005500 <_sbrk_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d06      	ldr	r5, [pc, #24]	; (800551c <_sbrk_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fc f9b4 	bl	8001878 <_sbrk>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_sbrk_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_sbrk_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20000350 	.word	0x20000350

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_lock+0x8>)
 8005522:	f000 b811 	b.w	8005548 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20000354 	.word	0x20000354

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_unlock+0x8>)
 800552e:	f000 b80c 	b.w	800554a <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20000354 	.word	0x20000354

08005538 <_malloc_usable_size_r>:
 8005538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553c:	1f18      	subs	r0, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	bfbc      	itt	lt
 8005542:	580b      	ldrlt	r3, [r1, r0]
 8005544:	18c0      	addlt	r0, r0, r3
 8005546:	4770      	bx	lr

08005548 <__retarget_lock_acquire_recursive>:
 8005548:	4770      	bx	lr

0800554a <__retarget_lock_release_recursive>:
 800554a:	4770      	bx	lr

0800554c <_init>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr

08005558 <_fini>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr
