
TM23-VCU-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a38  08004a38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  08004a4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004a4c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f59  00000000  00000000  0002d107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dc0  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceaf  00000000  00000000  00053188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7bf3  00000000  00000000  00060037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137c2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a0c  00000000  00000000  00137c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080049f8 	.word	0x080049f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080049f8 	.word	0x080049f8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0c4      	sub	sp, #272	; 0x110
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fe73 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f8a1 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f000 fab3 	bl	8001260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfa:	f000 fa81 	bl	8001200 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cfe:	f000 fa55 	bl	80011ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d02:	f000 f90b 	bl	8000f1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d06:	f000 f95b 	bl	8000fc0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d0a:	f000 f9ab 	bl	8001064 <MX_ADC3_Init>
  MX_CAN1_Init();
 8000d0e:	f000 f9fb 	bl	8001108 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 8000d12:	2201      	movs	r2, #1
 8000d14:	493a      	ldr	r1, [pc, #232]	; (8000e00 <main+0x118>)
 8000d16:	483b      	ldr	r0, [pc, #236]	; (8000e04 <main+0x11c>)
 8000d18:	f000 ff14 	bl	8001b44 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal, 2); //start the ADC for Brake Pressure Sensors in DMA mode
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	493a      	ldr	r1, [pc, #232]	; (8000e08 <main+0x120>)
 8000d20:	483a      	ldr	r0, [pc, #232]	; (8000e0c <main+0x124>)
 8000d22:	f000 ff0f 	bl	8001b44 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000d26:	2201      	movs	r2, #1
 8000d28:	4939      	ldr	r1, [pc, #228]	; (8000e10 <main+0x128>)
 8000d2a:	483a      	ldr	r0, [pc, #232]	; (8000e14 <main+0x12c>)
 8000d2c:	f000 ff0a 	bl	8001b44 <HAL_ADC_Start_DMA>
//			!= HAL_OK) {
//		Error_Handler();
//	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000d30:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <main+0x130>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	611a      	str	r2, [r3, #16]
//	TxHeader.StdId = 0;
//	TxHeader.ExtId = 0;
//	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
	TxHeader.IDE = CAN_ID_EXT; //specify Extended CAN ID
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <main+0x130>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000d3c:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <main+0x130>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
//	TxHeader.StdId = 0x23;	//CAN ID of this device
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d42:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <main+0x130>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	751a      	strb	r2, [r3, #20]
	uint32_t apps_Pedal_Position[2]; //to store APPS Pedal Position Values (in %)
	char msg[256];
	uint32_t ERPM_command;

	//initialize counters
	prev_time = 0;
 8000d48:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <main+0x134>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	current_time = 0;
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <main+0x138>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
	time_diff = 0;
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <main+0x13c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
	main_loop_count = 0;
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <main+0x140>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		time_diff = current_time - prev_time; //calculate time difference
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <main+0x138>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <main+0x134>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <main+0x13c>)
 8000d6c:	6013      	str	r3, [r2, #0]

		if (time_diff >= LOOP_TIME_INTERVAL) {
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <main+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b63      	cmp	r3, #99	; 0x63
 8000d74:	d934      	bls.n	8000de0 <main+0xf8>

			// if 100ms have elapsed since last time this condition became true,
			// then execute your program functions

			/* execute your program functions*/
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d76:	2120      	movs	r1, #32
 8000d78:	482c      	ldr	r0, [pc, #176]	; (8000e2c <main+0x144>)
 8000d7a:	f002 fcfc 	bl	8003776 <HAL_GPIO_TogglePin>

			APPS_Mapping(&appsVal[0], &appsVal[1], apps_Pedal_Position);
 8000d7e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000d82:	461a      	mov	r2, r3
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <main+0x128>)
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <main+0x118>)
 8000d88:	f000 fb06 	bl	8001398 <APPS_Mapping>

			ERPM_command = apps_Pedal_Position[0] * 1.75 / 100.0 * 35000.0;
 8000d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fb7b 	bl	800048c <__aeabi_ui2d>
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <main+0x148>)
 8000d9c:	f7ff fbf0 	bl	8000580 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <main+0x14c>)
 8000dae:	f7ff fd11 	bl	80007d4 <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	a30f      	add	r3, pc, #60	; (adr r3, 8000df8 <main+0x110>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fbde 	bl	8000580 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff fdea 	bl	80009a4 <__aeabi_d2uiz>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
//			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
//			HAL_MAX_DELAY);

			//Add other tasks to execute

			prev_time = current_time; // update previous time
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <main+0x138>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <main+0x134>)
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e004      	b.n	8000dea <main+0x102>
		}
		else {
			current_time = HAL_GetTick();
 8000de0:	f000 fe60 	bl	8001aa4 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <main+0x138>)
 8000de8:	6013      	str	r3, [r2, #0]
		}
		main_loop_count++;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <main+0x140>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <main+0x140>)
 8000df2:	6013      	str	r3, [r2, #0]
		time_diff = current_time - prev_time; //calculate time difference
 8000df4:	e7b4      	b.n	8000d60 <main+0x78>
 8000df6:	bf00      	nop
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40e11700 	.word	0x40e11700
 8000e00:	2000028c 	.word	0x2000028c
 8000e04:	20000028 	.word	0x20000028
 8000e08:	20000294 	.word	0x20000294
 8000e0c:	200000b8 	.word	0x200000b8
 8000e10:	20000290 	.word	0x20000290
 8000e14:	20000070 	.word	0x20000070
 8000e18:	2000029c 	.word	0x2000029c
 8000e1c:	200002bc 	.word	0x200002bc
 8000e20:	200002b4 	.word	0x200002b4
 8000e24:	200002b8 	.word	0x200002b8
 8000e28:	200002c0 	.word	0x200002c0
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	3ffc0000 	.word	0x3ffc0000
 8000e34:	40590000 	.word	0x40590000

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2234      	movs	r2, #52	; 0x34
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fdce 	bl	80049e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <SystemClock_Config+0xe0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000eac:	23b4      	movs	r3, #180	; 0xb4
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 f80d 	bl	8003ee0 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ecc:	f000 fad2 	bl	8001474 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed0:	f002 fc6c 	bl	80037ac <HAL_PWREx_EnableOverDrive>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eda:	f000 facb 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2105      	movs	r1, #5
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fca5 	bl	800384c <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f08:	f000 fab4 	bl	8001474 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	; 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <MX_ADC1_Init+0xa0>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f7e:	f000 fd9d 	bl	8001abc <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f88:	f000 fa74 	bl	8001474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f9e:	f000 fef5 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 fa64 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000028 	.word	0x20000028
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <MX_ADC2_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ADC2_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC2_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC2_Init+0x98>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <MX_ADC2_Init+0xa0>)
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC2_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC2_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_ADC2_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC2_Init+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC2_Init+0x98>)
 8001022:	f000 fd4b 	bl	8001abc <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800102c:	f000 fa22 	bl	8001474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001030:	2301      	movs	r3, #1
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC2_Init+0x98>)
 8001042:	f000 fea3 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800104c:	f000 fa12 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000070 	.word	0x20000070
 800105c:	40012100 	.word	0x40012100
 8001060:	0f000001 	.word	0x0f000001

08001064 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC3_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <MX_ADC3_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC3_Init+0x98>)
 800107e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001082:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC3_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_ADC3_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ADC3_Init+0x98>)
 8001092:	2201      	movs	r2, #1
 8001094:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC3_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_ADC3_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_ADC3_Init+0x98>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_ADC3_Init+0xa0>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC3_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_ADC3_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ADC3_Init+0x98>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC3_Init+0x98>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_ADC3_Init+0x98>)
 80010c6:	f000 fcf9 	bl	8001abc <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 f9d0 	bl	8001474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d4:	230a      	movs	r3, #10
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC3_Init+0x98>)
 80010e6:	f000 fe51 	bl	8001d8c <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010f0:	f000 f9c0 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000b8 	.word	0x200000b8
 8001100:	40012200 	.word	0x40012200
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <MX_CAN1_Init+0xa0>)
 8001112:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001116:	2212      	movs	r2, #18
 8001118:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_CAN1_Init+0x9c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001128:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001134:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_CAN1_Init+0x9c>)
 800113e:	2200      	movs	r2, #0
 8001140:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001144:	2200      	movs	r2, #0
 8001146:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_CAN1_Init+0x9c>)
 800114a:	2201      	movs	r2, #1
 800114c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001156:	2200      	movs	r2, #0
 8001158:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_CAN1_Init+0x9c>)
 800115c:	f001 f8c6 	bl	80022ec <HAL_CAN_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001166:	f000 f985 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800118a:	2301      	movs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_CAN1_Init+0x9c>)
 8001198:	f001 f9a4 	bl	80024e4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000220 	.word	0x20000220
 80011a8:	40006400 	.word	0x40006400

080011ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART2_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f003 f91a 	bl	800441c <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f941 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000248 	.word	0x20000248
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_DMA_Init+0x5c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_DMA_Init+0x5c>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_DMA_Init+0x5c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2038      	movs	r0, #56	; 0x38
 8001228:	f001 fd51 	bl	8002cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800122c:	2038      	movs	r0, #56	; 0x38
 800122e:	f001 fd6a 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2039      	movs	r0, #57	; 0x39
 8001238:	f001 fd49 	bl	8002cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800123c:	2039      	movs	r0, #57	; 0x39
 800123e:	f001 fd62 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	203a      	movs	r0, #58	; 0x3a
 8001248:	f001 fd41 	bl	8002cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800124c:	203a      	movs	r0, #58	; 0x3a
 800124e:	f001 fd5a 	bl	8002d06 <HAL_NVIC_EnableIRQ>

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <MX_GPIO_Init+0x128>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a42      	ldr	r2, [pc, #264]	; (8001388 <MX_GPIO_Init+0x128>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b40      	ldr	r3, [pc, #256]	; (8001388 <MX_GPIO_Init+0x128>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_GPIO_Init+0x128>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a3b      	ldr	r2, [pc, #236]	; (8001388 <MX_GPIO_Init+0x128>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <MX_GPIO_Init+0x128>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_GPIO_Init+0x128>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <MX_GPIO_Init+0x128>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_GPIO_Init+0x128>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <MX_GPIO_Init+0x128>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <MX_GPIO_Init+0x128>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_GPIO_Init+0x128>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <MX_GPIO_Init+0x12c>)
 80012ec:	f002 fa2a 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2120      	movs	r1, #32
 80012f4:	4826      	ldr	r0, [pc, #152]	; (8001390 <MX_GPIO_Init+0x130>)
 80012f6:	f002 fa25 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001300:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	481e      	ldr	r0, [pc, #120]	; (800138c <MX_GPIO_Init+0x12c>)
 8001312:	f002 f883 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Button_Pin */
  GPIO_InitStruct.Pin = Start_Button_Pin;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4818      	ldr	r0, [pc, #96]	; (800138c <MX_GPIO_Init+0x12c>)
 800132a:	f002 f877 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
  GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <MX_GPIO_Init+0x12c>)
 8001346:	f002 f869 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134a:	2320      	movs	r3, #32
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <MX_GPIO_Init+0x130>)
 8001362:	f002 f85b 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : HV_Present_Pin */
  GPIO_InitStruct.Pin = HV_Present_Pin;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HV_Present_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0x130>)
 800137c:	f002 f84e 	bl	800341c <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	00000000 	.word	0x00000000

08001398 <APPS_Mapping>:
	return false; //shouldn't get to here

} //end Ready_to_Drive()

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0495 * (*appsVal_0) - 24.28;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f86f 	bl	800048c <__aeabi_ui2d>
 80013ae:	a324      	add	r3, pc, #144	; (adr r3, 8001440 <APPS_Mapping+0xa8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f8e4 	bl	8000580 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a321      	add	r3, pc, #132	; (adr r3, 8001448 <APPS_Mapping+0xb0>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7fe ff23 	bl	8000210 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fae7 	bl	80009a4 <__aeabi_d2uiz>
 80013d6:	4602      	mov	r2, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	d902      	bls.n	80013ea <APPS_Mapping+0x52>
		apps_PP[0] = 100;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	601a      	str	r2, [r3, #0]
	}

	apps_PP[1] = 0.034 * (*appsVal_1) - 24.49;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f84c 	bl	800048c <__aeabi_ui2d>
 80013f4:	a316      	add	r3, pc, #88	; (adr r3, 8001450 <APPS_Mapping+0xb8>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8c1 	bl	8000580 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	a314      	add	r3, pc, #80	; (adr r3, 8001458 <APPS_Mapping+0xc0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7fe ff00 	bl	8000210 <__aeabi_dsub>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1d1c      	adds	r4, r3, #4
 800141c:	f7ff fac2 	bl	80009a4 <__aeabi_d2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d903      	bls.n	8001436 <APPS_Mapping+0x9e>
		apps_PP[1] = 100;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	2264      	movs	r2, #100	; 0x64
 8001434:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	624dd2f2 	.word	0x624dd2f2
 8001444:	3fa95810 	.word	0x3fa95810
 8001448:	147ae148 	.word	0x147ae148
 800144c:	403847ae 	.word	0x403847ae
 8001450:	b020c49c 	.word	0xb020c49c
 8001454:	3fa16872 	.word	0x3fa16872
 8001458:	a3d70a3d 	.word	0xa3d70a3d
 800145c:	40387d70 	.word	0x40387d70

08001460 <HAL_ADC_ConvHalfCpltCallback>:
//	printf("Hexadecimal value is: ");
//	for (j = i - 1; j > 0; j--)
//		printf("%c", hexa_Number[j]);
//}        //end dec_to_hexa_conversion

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f001 fbfa 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a9b      	ldr	r2, [pc, #620]	; (800175c <HAL_ADC_MspInit+0x28c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d161      	bne.n	80015b6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
 80014f6:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a99      	ldr	r2, [pc, #612]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_ADC_MspInit+0x290>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_ADC_MspInit+0x290>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a92      	ldr	r2, [pc, #584]	; (8001760 <HAL_ADC_MspInit+0x290>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b90      	ldr	r3, [pc, #576]	; (8001760 <HAL_ADC_MspInit+0x290>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152a:	2301      	movs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4889      	ldr	r0, [pc, #548]	; (8001764 <HAL_ADC_MspInit+0x294>)
 800153e:	f001 ff6d 	bl	800341c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001544:	4a89      	ldr	r2, [pc, #548]	; (800176c <HAL_ADC_MspInit+0x29c>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800155c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001560:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001568:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800156c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001578:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001580:	4b79      	ldr	r3, [pc, #484]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001582:	2204      	movs	r2, #4
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001588:	2203      	movs	r2, #3
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800158e:	2200      	movs	r2, #0
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001592:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_ADC_MspInit+0x298>)
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001598:	4873      	ldr	r0, [pc, #460]	; (8001768 <HAL_ADC_MspInit+0x298>)
 800159a:	f001 fbcf 	bl	8002d3c <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80015a4:	f7ff ff66 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_ADC_MspInit+0x298>)
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_ADC_MspInit+0x298>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015b4:	e0ce      	b.n	8001754 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <HAL_ADC_MspInit+0x2a0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d162      	bne.n	8001686 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	4b66      	ldr	r3, [pc, #408]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6453      	str	r3, [r2, #68]	; 0x44
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4a5e      	ldr	r2, [pc, #376]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6313      	str	r3, [r2, #48]	; 0x30
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f8:	2302      	movs	r3, #2
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fc:	2303      	movs	r3, #3
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4856      	ldr	r0, [pc, #344]	; (8001764 <HAL_ADC_MspInit+0x294>)
 800160c:	f001 ff06 	bl	800341c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001612:	4a59      	ldr	r2, [pc, #356]	; (8001778 <HAL_ADC_MspInit+0x2a8>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001652:	2204      	movs	r2, #4
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001658:	2203      	movs	r2, #3
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001664:	2200      	movs	r2, #0
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001668:	4842      	ldr	r0, [pc, #264]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800166a:	f001 fb67 	bl	8002d3c <HAL_DMA_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8001674:	f7ff fefe 	bl	8001474 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3e      	ldr	r2, [pc, #248]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
 800167e:	4a3d      	ldr	r2, [pc, #244]	; (8001774 <HAL_ADC_MspInit+0x2a4>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001684:	e066      	b.n	8001754 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a3c      	ldr	r2, [pc, #240]	; (800177c <HAL_ADC_MspInit+0x2ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d161      	bne.n	8001754 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_ADC_MspInit+0x290>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4a31      	ldr	r2, [pc, #196]	; (8001760 <HAL_ADC_MspInit+0x290>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6453      	str	r3, [r2, #68]	; 0x44
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_ADC_MspInit+0x290>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016c8:	2309      	movs	r3, #9
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <HAL_ADC_MspInit+0x2b0>)
 80016dc:	f001 fe9e 	bl	800341c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <HAL_ADC_MspInit+0x2b8>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 80016e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001708:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 800170c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001710:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001718:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001722:	2204      	movs	r2, #4
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001728:	2203      	movs	r2, #3
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 800173a:	f001 faff 	bl	8002d3c <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001744:	f7ff fe96 	bl	8001474 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_ADC_MspInit+0x2b4>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	; 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012000 	.word	0x40012000
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000
 8001768:	20000100 	.word	0x20000100
 800176c:	40026410 	.word	0x40026410
 8001770:	40012100 	.word	0x40012100
 8001774:	20000160 	.word	0x20000160
 8001778:	40026440 	.word	0x40026440
 800177c:	40012200 	.word	0x40012200
 8001780:	40020800 	.word	0x40020800
 8001784:	200001c0 	.word	0x200001c0
 8001788:	40026428 	.word	0x40026428

0800178c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_CAN_MspInit+0x94>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d134      	bne.n	8001818 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_CAN_MspInit+0x98>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017f8:	2309      	movs	r3, #9
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_CAN_MspInit+0x9c>)
 8001804:	f001 fe0a 	bl	800341c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2014      	movs	r0, #20
 800180e:	f001 fa5e 	bl	8002cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001812:	2014      	movs	r0, #20
 8001814:	f001 fa77 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40006400 	.word	0x40006400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_UART_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_UART_MspInit+0x88>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001886:	230c      	movs	r3, #12
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001896:	2307      	movs	r3, #7
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_UART_MspInit+0x8c>)
 80018a2:	f001 fdbb 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40004400 	.word	0x40004400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 f8b8 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <CAN1_RX0_IRQHandler+0x10>)
 8001916:	f000 fec5 	bl	80026a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000220 	.word	0x20000220

08001924 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA2_Stream0_IRQHandler+0x10>)
 800192a:	f001 fb0d 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000100 	.word	0x20000100

08001938 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA2_Stream1_IRQHandler+0x10>)
 800193e:	f001 fb03 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001c0 	.word	0x200001c0

0800194c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA2_Stream2_IRQHandler+0x10>)
 8001952:	f001 faf9 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000160 	.word	0x20000160

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ae:	f7ff ffd7 	bl	8001960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f002 fff5 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff f997 	bl	8000ce8 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019c8:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 80019cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019d0:	200002c8 	.word	0x200002c8

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f001 f959 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fd38 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f971 	bl	8002d22 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f001 f939 	bl	8002cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	200002c4 	.word	0x200002c4

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200002c4 	.word	0x200002c4

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e033      	b.n	8001b3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fcf8 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa6e 	bl	8001ff0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2a:	e001      	b.n	8001b30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x1e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0e9      	b.n	8001d36 <HAL_ADC_Start_DMA+0x1f2>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b88:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_ADC_Start_DMA+0x1fc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6d      	ldr	r2, [pc, #436]	; (8001d44 <HAL_ADC_Start_DMA+0x200>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80a1 	bne.w	8001d1c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f023 0206 	bic.w	r2, r3, #6
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_ADC_Start_DMA+0x204>)
 8001c38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <HAL_ADC_Start_DMA+0x208>)
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	4a42      	ldr	r2, [pc, #264]	; (8001d50 <HAL_ADC_Start_DMA+0x20c>)
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <HAL_ADC_Start_DMA+0x210>)
 8001c50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	334c      	adds	r3, #76	; 0x4c
 8001c86:	4619      	mov	r1, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f001 f904 	bl	8002e98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12a      	bne.n	8001cf2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_ADC_Start_DMA+0x214>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d015      	beq.n	8001cd2 <HAL_ADC_Start_DMA+0x18e>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <HAL_ADC_Start_DMA+0x218>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_Start_DMA+0x178>
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_ADC_Start_DMA+0x204>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_ADC_Start_DMA+0x21c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d136      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_ADC_Start_DMA+0x204>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d130      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d129      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e020      	b.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_ADC_Start_DMA+0x214>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d11b      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d114      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	e00b      	b.n	8001d34 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f043 0210 	orr.w	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000
 8001d44:	431bde83 	.word	0x431bde83
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	080021e9 	.word	0x080021e9
 8001d50:	080022a3 	.word	0x080022a3
 8001d54:	080022bf 	.word	0x080022bf
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	40012100 	.word	0x40012100
 8001d60:	40012200 	.word	0x40012200

08001d64 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e113      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x244>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d925      	bls.n	8001e04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68d9      	ldr	r1, [r3, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b1e      	subs	r3, #30
 8001dce:	2207      	movs	r2, #7
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	400a      	ands	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68d9      	ldr	r1, [r3, #12]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4403      	add	r3, r0
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	e022      	b.n	8001e4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	2207      	movs	r2, #7
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4403      	add	r3, r0
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d824      	bhi.n	8001e9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b05      	subs	r3, #5
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9a:	e04c      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d824      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b23      	subs	r3, #35	; 0x23
 8001eb6:	221f      	movs	r2, #31
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b23      	subs	r3, #35	; 0x23
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
 8001eec:	e023      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b41      	subs	r3, #65	; 0x41
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	; 0x41
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_ADC_ConfigChannel+0x250>)
 8001f38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_ADC_ConfigChannel+0x254>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1d8>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d10b      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_ADC_ConfigChannel+0x254>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12b      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_ADC_ConfigChannel+0x258>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x1f4>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d122      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ADC_ConfigChannel+0x258>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d111      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_ADC_ConfigChannel+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_ADC_ConfigChannel+0x260>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9a      	lsrs	r2, r3, #18
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	10000012 	.word	0x10000012
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff8:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <ADC_Init+0x1f0>)
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	021a      	lsls	r2, r3, #8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <ADC_Init+0x1f4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	e00f      	b.n	80020ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0202 	bic.w	r2, r2, #2
 80020fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7e1b      	ldrb	r3, [r3, #24]
 8002108:	005a      	lsls	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800213a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	3b01      	subs	r3, #1
 8002148:	035a      	lsls	r2, r3, #13
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e007      	b.n	8002164 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002162:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	3b01      	subs	r3, #1
 8002180:	051a      	lsls	r2, r3, #20
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a6:	025a      	lsls	r2, r3, #9
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	029a      	lsls	r2, r3, #10
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40012300 	.word	0x40012300
 80021e4:	0f000001 	.word	0x0f000001

080021e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d13c      	bne.n	800227c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12b      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d127      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800223c:	2b00      	cmp	r3, #0
 800223e:	d119      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0220 	bic.w	r2, r2, #32
 800224e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff fd75 	bl	8001d64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800227a:	e00e      	b.n	800229a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fd75 	bl	8001d78 <HAL_ADC_ErrorCallback>
}
 800228e:	e004      	b.n	800229a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff f8d5 	bl	8001460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fd4a 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0ed      	b.n	80024da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fa3e 	bl	800178c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002320:	f7ff fbc0 	bl	8001aa4 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002326:	e012      	b.n	800234e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002328:	f7ff fbbc 	bl	8001aa4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b0a      	cmp	r3, #10
 8002334:	d90b      	bls.n	800234e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0c5      	b.n	80024da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0e5      	beq.n	8002328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0202 	bic.w	r2, r2, #2
 800236a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800236c:	f7ff fb9a 	bl	8001aa4 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002372:	e012      	b.n	800239a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002374:	f7ff fb96 	bl	8001aa4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d90b      	bls.n	800239a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e09f      	b.n	80024da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e5      	bne.n	8002374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e1b      	ldrb	r3, [r3, #24]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e5b      	ldrb	r3, [r3, #25]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e007      	b.n	80023fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e9b      	ldrb	r3, [r3, #26]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0220 	orr.w	r2, r2, #32
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0210 	bic.w	r2, r2, #16
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0210 	orr.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7f1b      	ldrb	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7f5b      	ldrb	r3, [r3, #29]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0204 	orr.w	r2, r2, #4
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d003      	beq.n	800250a <HAL_CAN_ConfigFilter+0x26>
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	2b02      	cmp	r3, #2
 8002506:	f040 80be 	bne.w	8002686 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800250a:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800250c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002524:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	431a      	orrs	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2201      	movs	r2, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d123      	bne.n	80025b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800258e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3248      	adds	r2, #72	; 0x48
 8002594:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025aa:	6979      	ldr	r1, [r7, #20]
 80025ac:	3348      	adds	r3, #72	; 0x48
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d122      	bne.n	8002602 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3248      	adds	r2, #72	; 0x48
 80025e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f8:	6979      	ldr	r1, [r7, #20]
 80025fa:	3348      	adds	r3, #72	; 0x48
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	401a      	ands	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800261c:	e007      	b.n	800262e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	431a      	orrs	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002648:	e007      	b.n	800265a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	431a      	orrs	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002678:	f023 0201 	bic.w	r2, r3, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e006      	b.n	8002694 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40006400 	.word	0x40006400

080026a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07c      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d023      	beq.n	800273c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f983 	bl	8002a12 <HAL_CAN_TxMailbox0CompleteCallback>
 800270c:	e016      	b.n	800273c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	e00c      	b.n	800273c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e002      	b.n	800273c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f989 	bl	8002a4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800274e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f963 	bl	8002a26 <HAL_CAN_TxMailbox1CompleteCallback>
 8002760:	e016      	b.n	8002790 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e00c      	b.n	8002790 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e002      	b.n	8002790 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f969 	bl	8002a62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d024      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f943 	bl	8002a3a <HAL_CAN_TxMailbox2CompleteCallback>
 80027b4:	e016      	b.n	80027e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	e00c      	b.n	80027e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	e002      	b.n	80027e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f949 	bl	8002a76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f93a 	bl	8002a9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f921 	bl	8002a8a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002862:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2208      	movs	r2, #8
 8002886:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f91c 	bl	8002ac6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f903 	bl	8002ab2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f906 	bl	8002ada <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8ff 	bl	8002aee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07b      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d072      	beq.n	80029ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295e:	2b00      	cmp	r3, #0
 8002960:	d043      	beq.n	80029ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03e      	beq.n	80029ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002972:	2b60      	cmp	r3, #96	; 0x60
 8002974:	d02b      	beq.n	80029ce <HAL_CAN_IRQHandler+0x32a>
 8002976:	2b60      	cmp	r3, #96	; 0x60
 8002978:	d82e      	bhi.n	80029d8 <HAL_CAN_IRQHandler+0x334>
 800297a:	2b50      	cmp	r3, #80	; 0x50
 800297c:	d022      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x320>
 800297e:	2b50      	cmp	r3, #80	; 0x50
 8002980:	d82a      	bhi.n	80029d8 <HAL_CAN_IRQHandler+0x334>
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d019      	beq.n	80029ba <HAL_CAN_IRQHandler+0x316>
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d826      	bhi.n	80029d8 <HAL_CAN_IRQHandler+0x334>
 800298a:	2b30      	cmp	r3, #48	; 0x30
 800298c:	d010      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x30c>
 800298e:	2b30      	cmp	r3, #48	; 0x30
 8002990:	d822      	bhi.n	80029d8 <HAL_CAN_IRQHandler+0x334>
 8002992:	2b10      	cmp	r3, #16
 8002994:	d002      	beq.n	800299c <HAL_CAN_IRQHandler+0x2f8>
 8002996:	2b20      	cmp	r3, #32
 8002998:	d005      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800299a:	e01d      	b.n	80029d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a4:	e019      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f043 0310 	orr.w	r3, r3, #16
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ae:	e014      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f043 0320 	orr.w	r3, r3, #32
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b8:	e00f      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029c2:	e00a      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029cc:	e005      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029d6:	e000      	b.n	80029da <HAL_CAN_IRQHandler+0x336>
            break;
 80029d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f87c 	bl	8002b02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <__NVIC_GetPriorityGrouping+0x18>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 0307 	and.w	r3, r3, #7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db0b      	blt.n	8002ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <__NVIC_EnableIRQ+0x38>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e100 	.word	0xe000e100

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db0a      	blt.n	8002be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	490c      	ldr	r1, [pc, #48]	; (8002c04 <__NVIC_SetPriority+0x4c>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be0:	e00a      	b.n	8002bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4908      	ldr	r1, [pc, #32]	; (8002c08 <__NVIC_SetPriority+0x50>)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	3b04      	subs	r3, #4
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	761a      	strb	r2, [r3, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	; 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f1c3 0307 	rsb	r3, r3, #7
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	bf28      	it	cs
 8002c2a:	2304      	movcs	r3, #4
 8002c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d902      	bls.n	8002c3c <NVIC_EncodePriority+0x30>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3b03      	subs	r3, #3
 8002c3a:	e000      	b.n	8002c3e <NVIC_EncodePriority+0x32>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	43d9      	mvns	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	4313      	orrs	r3, r2
         );
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c84:	d301      	bcc.n	8002c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00f      	b.n	8002caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <SysTick_Config+0x40>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c92:	210f      	movs	r1, #15
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f7ff ff8e 	bl	8002bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <SysTick_Config+0x40>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <SysTick_Config+0x40>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff29 	bl	8002b18 <__NVIC_SetPriorityGrouping>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce0:	f7ff ff3e 	bl	8002b60 <__NVIC_GetPriorityGrouping>
 8002ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f7ff ff8e 	bl	8002c0c <NVIC_EncodePriority>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff5d 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff31 	bl	8002b7c <__NVIC_EnableIRQ>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffa2 	bl	8002c74 <SysTick_Config>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7fe feac 	bl	8001aa4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e099      	b.n	8002e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d78:	e00f      	b.n	8002d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d7a:	f7fe fe93 	bl	8001aa4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d908      	bls.n	8002d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e078      	b.n	8002e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e8      	bne.n	8002d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_DMA_Init+0x158>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d107      	bne.n	8002e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d117      	bne.n	8002e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa6f 	bl	8003324 <DMA_CheckFifoParam>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e016      	b.n	8002e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa26 	bl	80032b8 <DMA_CalcBaseAndBitshift>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	223f      	movs	r2, #63	; 0x3f
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	f010803f 	.word	0xf010803f

08002e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_DMA_Start_IT+0x26>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e040      	b.n	8002f40 <HAL_DMA_Start_IT+0xa8>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d12f      	bne.n	8002f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9b8 	bl	800325c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	223f      	movs	r2, #63	; 0x3f
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0216 	orr.w	r2, r2, #22
 8002f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0208 	orr.w	r2, r2, #8
 8002f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e005      	b.n	8002f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f54:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <HAL_DMA_IRQHandler+0x248>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a8e      	ldr	r2, [pc, #568]	; (8003194 <HAL_DMA_IRQHandler+0x24c>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2208      	movs	r2, #8
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	2204      	movs	r2, #4
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2204      	movs	r2, #4
 800300e:	409a      	lsls	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2210      	movs	r2, #16
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d043      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03c      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2210      	movs	r2, #16
 8003044:	409a      	lsls	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d018      	beq.n	800308a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e01f      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
 8003088:	e016      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0208 	bic.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	2220      	movs	r2, #32
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 808f 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8087 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2220      	movs	r2, #32
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d136      	bne.n	8003160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0216 	bic.w	r2, r2, #22
 8003100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_DMA_IRQHandler+0x1da>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0208 	bic.w	r2, r2, #8
 8003130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	223f      	movs	r2, #63	; 0x3f
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	2b00      	cmp	r3, #0
 8003154:	d07e      	beq.n	8003254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
        }
        return;
 800315e:	e079      	b.n	8003254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	2b00      	cmp	r3, #0
 8003182:	d031      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
 800318c:	e02c      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000
 8003194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	e01e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d032      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d307      	bcc.n	8003230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_DMA_IRQHandler+0x2cc>
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e000      	b.n	8003256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003254:	bf00      	nop
    }
  }
}
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d108      	bne.n	800329c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329a:	e007      	b.n	80032ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3b10      	subs	r3, #16
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <DMA_CalcBaseAndBitshift+0x64>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <DMA_CalcBaseAndBitshift+0x68>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d909      	bls.n	80032fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	; 0x58
 80032f8:	e007      	b.n	800330a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	08004a28 	.word	0x08004a28

08003324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d856      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <DMA_CheckFifoParam+0x28>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336f 	.word	0x0800336f
 8003354:	0800335d 	.word	0x0800335d
 8003358:	080033f3 	.word	0x080033f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e043      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003376:	d140      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e03d      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	d121      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d837      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d903      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
      break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;   
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
    }
  } 
  
  return status; 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e165      	b.n	8003704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8154 	bne.w	80036fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d130      	bne.n	80034d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 0201 	and.w	r2, r3, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d017      	beq.n	800350c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ae 	beq.w	80036fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_GPIO_Init+0x300>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_GPIO_Init+0x300>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b5a      	ldr	r3, [pc, #360]	; (800371c <HAL_GPIO_Init+0x300>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x304>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <HAL_GPIO_Init+0x308>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d025      	beq.n	8003636 <HAL_GPIO_Init+0x21a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <HAL_GPIO_Init+0x30c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <HAL_GPIO_Init+0x216>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_GPIO_Init+0x310>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d019      	beq.n	800362e <HAL_GPIO_Init+0x212>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_GPIO_Init+0x314>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x20e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4b      	ldr	r2, [pc, #300]	; (8003734 <HAL_GPIO_Init+0x318>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x20a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <HAL_GPIO_Init+0x31c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x206>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a49      	ldr	r2, [pc, #292]	; (800373c <HAL_GPIO_Init+0x320>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x202>
 800361a:	2306      	movs	r3, #6
 800361c:	e00c      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800361e:	2307      	movs	r3, #7
 8003620:	e00a      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003622:	2305      	movs	r3, #5
 8003624:	e008      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003626:	2304      	movs	r3, #4
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800362a:	2303      	movs	r3, #3
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x21c>
 8003636:	2300      	movs	r3, #0
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f002 0203 	and.w	r2, r2, #3
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	4093      	lsls	r3, r2
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003648:	4935      	ldr	r1, [pc, #212]	; (8003720 <HAL_GPIO_Init+0x304>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003656:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_GPIO_Init+0x324>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367a:	4a31      	ldr	r2, [pc, #196]	; (8003740 <HAL_GPIO_Init+0x324>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x324>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a4:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_GPIO_Init+0x324>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_GPIO_Init+0x324>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ce:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_GPIO_Init+0x324>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_GPIO_Init+0x324>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_GPIO_Init+0x324>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	f67f ae96 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40013800 	.word	0x40013800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400
 800372c:	40020800 	.word	0x40020800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021000 	.word	0x40021000
 8003738:	40021400 	.word	0x40021400
 800373c:	40021800 	.word	0x40021800
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	041a      	lsls	r2, r3, #16
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43d9      	mvns	r1, r3
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	400b      	ands	r3, r1
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_PWREx_EnableOverDrive+0x94>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d8:	f7fe f964 	bl	8001aa4 <HAL_GetTick>
 80037dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037de:	e009      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e0:	f7fe f960 	bl	8001aa4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ee:	d901      	bls.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e01f      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d1ee      	bne.n	80037e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003808:	f7fe f94c 	bl	8001aa4 <HAL_GetTick>
 800380c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380e:	e009      	b.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003810:	f7fe f948 	bl	8001aa4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381e:	d901      	bls.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e007      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003830:	d1ee      	bne.n	8003810 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	420e0040 	.word	0x420e0040
 8003844:	40007000 	.word	0x40007000
 8003848:	420e0044 	.word	0x420e0044

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0cc      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b68      	ldr	r3, [pc, #416]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d90c      	bls.n	8003888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b8      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	494d      	ldr	r1, [pc, #308]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d044      	beq.n	800396c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d119      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d003      	beq.n	800390a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e067      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4934      	ldr	r1, [pc, #208]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fe f8b2 	bl	8001aa4 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fe f8ae 	bl	8001aa4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e04f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d20c      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e032      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	490e      	ldr	r1, [pc, #56]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d2:	f000 f855 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	490a      	ldr	r1, [pc, #40]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	5ccb      	ldrb	r3, [r1, r3]
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe f812 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023c00 	.word	0x40023c00
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	08004a10 	.word	0x08004a10
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000

08003a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0a9b      	lsrs	r3, r3, #10
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08004a20 	.word	0x08004a20

08003a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a5c:	f7ff ffdc 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0b5b      	lsrs	r3, r3, #13
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08004a20 	.word	0x08004a20

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b0ae      	sub	sp, #184	; 0xb8
 8003a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa6:	4bcb      	ldr	r3, [pc, #812]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	f200 8206 	bhi.w	8003ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003ec1 	.word	0x08003ec1
 8003ac4:	08003ec1 	.word	0x08003ec1
 8003ac8:	08003ec1 	.word	0x08003ec1
 8003acc:	08003af9 	.word	0x08003af9
 8003ad0:	08003ec1 	.word	0x08003ec1
 8003ad4:	08003ec1 	.word	0x08003ec1
 8003ad8:	08003ec1 	.word	0x08003ec1
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003ec1 	.word	0x08003ec1
 8003ae4:	08003ec1 	.word	0x08003ec1
 8003ae8:	08003ec1 	.word	0x08003ec1
 8003aec:	08003cf1 	.word	0x08003cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4bb9      	ldr	r3, [pc, #740]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003af6:	e1e7      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af8:	4bb8      	ldr	r3, [pc, #736]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003afe:	e1e3      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b00:	4bb4      	ldr	r3, [pc, #720]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0c:	4bb1      	ldr	r3, [pc, #708]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d071      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b18:	4bae      	ldr	r3, [pc, #696]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b70:	4649      	mov	r1, r9
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4641      	mov	r1, r8
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b84:	4649      	mov	r1, r9
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b98:	4649      	mov	r1, r9
 8003b9a:	00cb      	lsls	r3, r1, #3
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	00ca      	lsls	r2, r1, #3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	4622      	mov	r2, r4
 8003bae:	189b      	adds	r3, r3, r2
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	eb42 0303 	adc.w	r3, r2, r3
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bc8:	4629      	mov	r1, r5
 8003bca:	024b      	lsls	r3, r1, #9
 8003bcc:	4621      	mov	r1, r4
 8003bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	024a      	lsls	r2, r1, #9
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bec:	f7fc fefa 	bl	80009e4 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bfa:	e067      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfc:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	2300      	movs	r3, #0
 8003c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4621      	mov	r1, r4
 8003c38:	1a51      	subs	r1, r2, r1
 8003c3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c50:	4649      	mov	r1, r9
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	4641      	mov	r1, r8
 8003c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	018a      	lsls	r2, r1, #6
 8003c5e:	4641      	mov	r1, r8
 8003c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c64:	4649      	mov	r1, r9
 8003c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c7e:	4692      	mov	sl, r2
 8003c80:	469b      	mov	fp, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	eb1a 0303 	adds.w	r3, sl, r3
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	028b      	lsls	r3, r1, #10
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca8:	4621      	mov	r1, r4
 8003caa:	028a      	lsls	r2, r1, #10
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003cbe:	f7fc fe91 	bl	80009e4 <__aeabi_uldivmod>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cee:	e0eb      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf0:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfc:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d06b      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	2200      	movs	r2, #0
 8003d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d24:	4622      	mov	r2, r4
 8003d26:	462b      	mov	r3, r5
 8003d28:	f04f 0000 	mov.w	r0, #0
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	0159      	lsls	r1, r3, #5
 8003d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d36:	0150      	lsls	r0, r2, #5
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	1a51      	subs	r1, r2, r1
 8003d40:	61b9      	str	r1, [r7, #24]
 8003d42:	4629      	mov	r1, r5
 8003d44:	eb63 0301 	sbc.w	r3, r3, r1
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d56:	4659      	mov	r1, fp
 8003d58:	018b      	lsls	r3, r1, #6
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d60:	4651      	mov	r1, sl
 8003d62:	018a      	lsls	r2, r1, #6
 8003d64:	4651      	mov	r1, sl
 8003d66:	ebb2 0801 	subs.w	r8, r2, r1
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d84:	4690      	mov	r8, r2
 8003d86:	4699      	mov	r9, r3
 8003d88:	4623      	mov	r3, r4
 8003d8a:	eb18 0303 	adds.w	r3, r8, r3
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	462b      	mov	r3, r5
 8003d92:	eb49 0303 	adc.w	r3, r9, r3
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003da4:	4629      	mov	r1, r5
 8003da6:	024b      	lsls	r3, r1, #9
 8003da8:	4621      	mov	r1, r4
 8003daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dae:	4621      	mov	r1, r4
 8003db0:	024a      	lsls	r2, r1, #9
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dba:	2200      	movs	r2, #0
 8003dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dc4:	f7fc fe0e 	bl	80009e4 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd2:	e065      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de0:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	2200      	movs	r2, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	4611      	mov	r1, r2
 8003dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003df0:	653b      	str	r3, [r7, #80]	; 0x50
 8003df2:	2300      	movs	r3, #0
 8003df4:	657b      	str	r3, [r7, #84]	; 0x54
 8003df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	f04f 0000 	mov.w	r0, #0
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0c:	0150      	lsls	r0, r2, #5
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4641      	mov	r1, r8
 8003e14:	1a51      	subs	r1, r2, r1
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	4649      	mov	r1, r9
 8003e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	018b      	lsls	r3, r1, #6
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e36:	4651      	mov	r1, sl
 8003e38:	018a      	lsls	r2, r1, #6
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	1a54      	subs	r4, r2, r1
 8003e3e:	4659      	mov	r1, fp
 8003e40:	eb63 0501 	sbc.w	r5, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	00eb      	lsls	r3, r5, #3
 8003e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e52:	00e2      	lsls	r2, r4, #3
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	4643      	mov	r3, r8
 8003e5a:	18e3      	adds	r3, r4, r3
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	464b      	mov	r3, r9
 8003e60:	eb45 0303 	adc.w	r3, r5, r3
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e72:	4629      	mov	r1, r5
 8003e74:	028b      	lsls	r3, r1, #10
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	028a      	lsls	r2, r1, #10
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e88:	2200      	movs	r2, #0
 8003e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e92:	f7fc fda7 	bl	80009e4 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0f1b      	lsrs	r3, r3, #28
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	37b8      	adds	r7, #184	; 0xb8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400

08003ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e28d      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8083 	beq.w	8004006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f00:	4b94      	ldr	r3, [pc, #592]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d019      	beq.n	8003f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f0c:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f18:	4b8e      	ldr	r3, [pc, #568]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b88      	ldr	r3, [pc, #544]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b84      	ldr	r3, [pc, #528]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x124>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e25a      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x90>
 8003f62:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7b      	ldr	r2, [pc, #492]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xcc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xb4>
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b73      	ldr	r3, [pc, #460]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a72      	ldr	r2, [pc, #456]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xcc>
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fd76 	bl	8001aa4 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd fd72 	bl	8001aa4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e21f      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xdc>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fd62 	bl	8001aa4 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fd5e 	bl	8001aa4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e20b      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x104>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06f      	beq.n	80040f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004012:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d017      	beq.n	800404e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800401e:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800402a:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b44      	ldr	r3, [pc, #272]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b41      	ldr	r3, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x186>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1d3      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4937      	ldr	r1, [pc, #220]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e03a      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_OscConfig+0x278>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd fd0b 	bl	8001aa4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd fd07 	bl	8001aa4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1b4      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4925      	ldr	r1, [pc, #148]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCC_OscConfig+0x278>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fcea 	bl	8001aa4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd fce6 	bl	8001aa4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e193      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d036      	beq.n	800416c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_RCC_OscConfig+0x27c>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fcca 	bl	8001aa4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd fcc6 	bl	8001aa4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e173      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x234>
 8004132:	e01b      	b.n	800416c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_OscConfig+0x27c>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fcb3 	bl	8001aa4 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e00e      	b.n	8004160 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004142:	f7fd fcaf 	bl	8001aa4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d907      	bls.n	8004160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e15c      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
 8004154:	40023800 	.word	0x40023800
 8004158:	42470000 	.word	0x42470000
 800415c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b8a      	ldr	r3, [pc, #552]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ea      	bne.n	8004142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8097 	beq.w	80042a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b83      	ldr	r3, [pc, #524]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b7f      	ldr	r3, [pc, #508]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a7e      	ldr	r2, [pc, #504]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
 800419a:	4b7c      	ldr	r3, [pc, #496]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCC_OscConfig+0x4b0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d118      	bne.n	80041e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x4b0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a75      	ldr	r2, [pc, #468]	; (8004390 <HAL_RCC_OscConfig+0x4b0>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c2:	f7fd fc6f 	bl	8001aa4 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ca:	f7fd fc6b 	bl	8001aa4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e118      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	4b6c      	ldr	r3, [pc, #432]	; (8004390 <HAL_RCC_OscConfig+0x4b0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x31e>
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a65      	ldr	r2, [pc, #404]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	e01c      	b.n	8004238 <HAL_RCC_OscConfig+0x358>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x340>
 8004206:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x358>
 8004220:	4b5a      	ldr	r3, [pc, #360]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	4b57      	ldr	r3, [pc, #348]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a56      	ldr	r2, [pc, #344]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004232:	f023 0304 	bic.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd fc30 	bl	8001aa4 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fc2c 	bl	8001aa4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0d7      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <HAL_RCC_OscConfig+0x368>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fc1a 	bl	8001aa4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fc16 	bl	8001aa4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0c1      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	4b40      	ldr	r3, [pc, #256]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ee      	bne.n	8004274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4a3a      	ldr	r2, [pc, #232]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80ad 	beq.w	800440c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d060      	beq.n	8004380 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d145      	bne.n	8004352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCC_OscConfig+0x4b4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fbea 	bl	8001aa4 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fd fbe6 	bl	8001aa4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e093      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	491b      	ldr	r1, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x4b4>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fd fbbb 	bl	8001aa4 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd fbb7 	bl	8001aa4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e064      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x452>
 8004350:	e05c      	b.n	800440c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCC_OscConfig+0x4b4>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fba4 	bl	8001aa4 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7fd fba0 	bl	8001aa4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04d      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_OscConfig+0x4ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x480>
 800437e:	e045      	b.n	800440c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e040      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
 800438c:	40023800 	.word	0x40023800
 8004390:	40007000 	.word	0x40007000
 8004394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCC_OscConfig+0x538>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d030      	beq.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d129      	bne.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d122      	bne.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d119      	bne.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	3b01      	subs	r3, #1
 80043e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d10f      	bne.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03f      	b.n	80044ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd f9f2 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f829 	bl	80044b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b0c0      	sub	sp, #256	; 0x100
 80044be:	af00      	add	r7, sp, #0
 80044c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	68d9      	ldr	r1, [r3, #12]
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	ea40 0301 	orr.w	r3, r0, r1
 80044e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004510:	f021 010c 	bic.w	r1, r1, #12
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800451e:	430b      	orrs	r3, r1
 8004520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	6999      	ldr	r1, [r3, #24]
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	ea40 0301 	orr.w	r3, r0, r1
 800453e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b8f      	ldr	r3, [pc, #572]	; (8004784 <UART_SetConfig+0x2cc>)
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <UART_SetConfig+0xa0>
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8d      	ldr	r3, [pc, #564]	; (8004788 <UART_SetConfig+0x2d0>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d104      	bne.n	8004562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7ff fa7e 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 800455c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004560:	e003      	b.n	800456a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004562:	f7ff fa65 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 8004566:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004574:	f040 810c 	bne.w	8004790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800457c:	2200      	movs	r2, #0
 800457e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004582:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800458a:	4622      	mov	r2, r4
 800458c:	462b      	mov	r3, r5
 800458e:	1891      	adds	r1, r2, r2
 8004590:	65b9      	str	r1, [r7, #88]	; 0x58
 8004592:	415b      	adcs	r3, r3
 8004594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800459a:	4621      	mov	r1, r4
 800459c:	eb12 0801 	adds.w	r8, r2, r1
 80045a0:	4629      	mov	r1, r5
 80045a2:	eb43 0901 	adc.w	r9, r3, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	eb18 0303 	adds.w	r3, r8, r3
 80045c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045c8:	462b      	mov	r3, r5
 80045ca:	eb49 0303 	adc.w	r3, r9, r3
 80045ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045e6:	460b      	mov	r3, r1
 80045e8:	18db      	adds	r3, r3, r3
 80045ea:	653b      	str	r3, [r7, #80]	; 0x50
 80045ec:	4613      	mov	r3, r2
 80045ee:	eb42 0303 	adc.w	r3, r2, r3
 80045f2:	657b      	str	r3, [r7, #84]	; 0x54
 80045f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045fc:	f7fc f9f2 	bl	80009e4 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b61      	ldr	r3, [pc, #388]	; (800478c <UART_SetConfig+0x2d4>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011c      	lsls	r4, r3, #4
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004618:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800461c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	64b9      	str	r1, [r7, #72]	; 0x48
 8004628:	415b      	adcs	r3, r3
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004630:	4641      	mov	r1, r8
 8004632:	eb12 0a01 	adds.w	sl, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb43 0b01 	adc.w	fp, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800464c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004650:	4692      	mov	sl, r2
 8004652:	469b      	mov	fp, r3
 8004654:	4643      	mov	r3, r8
 8004656:	eb1a 0303 	adds.w	r3, sl, r3
 800465a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800465e:	464b      	mov	r3, r9
 8004660:	eb4b 0303 	adc.w	r3, fp, r3
 8004664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004674:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800467c:	460b      	mov	r3, r1
 800467e:	18db      	adds	r3, r3, r3
 8004680:	643b      	str	r3, [r7, #64]	; 0x40
 8004682:	4613      	mov	r3, r2
 8004684:	eb42 0303 	adc.w	r3, r2, r3
 8004688:	647b      	str	r3, [r7, #68]	; 0x44
 800468a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800468e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004692:	f7fc f9a7 	bl	80009e4 <__aeabi_uldivmod>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4611      	mov	r1, r2
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <UART_SetConfig+0x2d4>)
 800469e:	fba3 2301 	umull	r2, r3, r3, r1
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2264      	movs	r2, #100	; 0x64
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	1acb      	subs	r3, r1, r3
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <UART_SetConfig+0x2d4>)
 80046b4:	fba3 2302 	umull	r2, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046c0:	441c      	add	r4, r3
 80046c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	63b9      	str	r1, [r7, #56]	; 0x38
 80046dc:	415b      	adcs	r3, r3
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6339      	str	r1, [r7, #48]	; 0x30
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004718:	464b      	mov	r3, r9
 800471a:	460a      	mov	r2, r1
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004730:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800474a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800474e:	f7fc f949 	bl	80009e4 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <UART_SetConfig+0x2d4>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	; 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3332      	adds	r3, #50	; 0x32
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <UART_SetConfig+0x2d4>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 0207 	and.w	r2, r3, #7
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4422      	add	r2, r4
 800477e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004780:	e105      	b.n	800498e <UART_SetConfig+0x4d6>
 8004782:	bf00      	nop
 8004784:	40011000 	.word	0x40011000
 8004788:	40011400 	.word	0x40011400
 800478c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800479a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800479e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047a2:	4642      	mov	r2, r8
 80047a4:	464b      	mov	r3, r9
 80047a6:	1891      	adds	r1, r2, r2
 80047a8:	6239      	str	r1, [r7, #32]
 80047aa:	415b      	adcs	r3, r3
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047b2:	4641      	mov	r1, r8
 80047b4:	1854      	adds	r4, r2, r1
 80047b6:	4649      	mov	r1, r9
 80047b8:	eb43 0501 	adc.w	r5, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	00eb      	lsls	r3, r5, #3
 80047c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ca:	00e2      	lsls	r2, r4, #3
 80047cc:	4614      	mov	r4, r2
 80047ce:	461d      	mov	r5, r3
 80047d0:	4643      	mov	r3, r8
 80047d2:	18e3      	adds	r3, r4, r3
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047d8:	464b      	mov	r3, r9
 80047da:	eb45 0303 	adc.w	r3, r5, r3
 80047de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047fe:	4629      	mov	r1, r5
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	4621      	mov	r1, r4
 8004804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004808:	4621      	mov	r1, r4
 800480a:	008a      	lsls	r2, r1, #2
 800480c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004810:	f7fc f8e8 	bl	80009e4 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4b60      	ldr	r3, [pc, #384]	; (800499c <UART_SetConfig+0x4e4>)
 800481a:	fba3 2302 	umull	r2, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	011c      	lsls	r4, r3, #4
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800482c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	61b9      	str	r1, [r7, #24]
 800483c:	415b      	adcs	r3, r3
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004844:	4641      	mov	r1, r8
 8004846:	1851      	adds	r1, r2, r1
 8004848:	6139      	str	r1, [r7, #16]
 800484a:	4649      	mov	r1, r9
 800484c:	414b      	adcs	r3, r1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800485c:	4659      	mov	r1, fp
 800485e:	00cb      	lsls	r3, r1, #3
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004866:	4651      	mov	r1, sl
 8004868:	00ca      	lsls	r2, r1, #3
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	4603      	mov	r3, r0
 8004870:	4642      	mov	r2, r8
 8004872:	189b      	adds	r3, r3, r2
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	67bb      	str	r3, [r7, #120]	; 0x78
 800488e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800489c:	4649      	mov	r1, r9
 800489e:	008b      	lsls	r3, r1, #2
 80048a0:	4641      	mov	r1, r8
 80048a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a6:	4641      	mov	r1, r8
 80048a8:	008a      	lsls	r2, r1, #2
 80048aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ae:	f7fc f899 	bl	80009e4 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b39      	ldr	r3, [pc, #228]	; (800499c <UART_SetConfig+0x4e4>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a34      	ldr	r2, [pc, #208]	; (800499c <UART_SetConfig+0x4e4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d6:	441c      	add	r4, r3
 80048d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048dc:	2200      	movs	r2, #0
 80048de:	673b      	str	r3, [r7, #112]	; 0x70
 80048e0:	677a      	str	r2, [r7, #116]	; 0x74
 80048e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048e6:	4642      	mov	r2, r8
 80048e8:	464b      	mov	r3, r9
 80048ea:	1891      	adds	r1, r2, r2
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	415b      	adcs	r3, r3
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f6:	4641      	mov	r1, r8
 80048f8:	1851      	adds	r1, r2, r1
 80048fa:	6039      	str	r1, [r7, #0]
 80048fc:	4649      	mov	r1, r9
 80048fe:	414b      	adcs	r3, r1
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800490e:	4659      	mov	r1, fp
 8004910:	00cb      	lsls	r3, r1, #3
 8004912:	4651      	mov	r1, sl
 8004914:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004918:	4651      	mov	r1, sl
 800491a:	00ca      	lsls	r2, r1, #3
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	4603      	mov	r3, r0
 8004922:	4642      	mov	r2, r8
 8004924:	189b      	adds	r3, r3, r2
 8004926:	66bb      	str	r3, [r7, #104]	; 0x68
 8004928:	464b      	mov	r3, r9
 800492a:	460a      	mov	r2, r1
 800492c:	eb42 0303 	adc.w	r3, r2, r3
 8004930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	663b      	str	r3, [r7, #96]	; 0x60
 800493c:	667a      	str	r2, [r7, #100]	; 0x64
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800494a:	4649      	mov	r1, r9
 800494c:	008b      	lsls	r3, r1, #2
 800494e:	4641      	mov	r1, r8
 8004950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004954:	4641      	mov	r1, r8
 8004956:	008a      	lsls	r2, r1, #2
 8004958:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800495c:	f7fc f842 	bl	80009e4 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b0d      	ldr	r3, [pc, #52]	; (800499c <UART_SetConfig+0x4e4>)
 8004966:	fba3 1302 	umull	r1, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	2164      	movs	r1, #100	; 0x64
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	3332      	adds	r3, #50	; 0x32
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <UART_SetConfig+0x4e4>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f003 020f 	and.w	r2, r3, #15
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4422      	add	r2, r4
 800498c:	609a      	str	r2, [r3, #8]
}
 800498e:	bf00      	nop
 8004990:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499a:	bf00      	nop
 800499c:	51eb851f 	.word	0x51eb851f

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4d0d      	ldr	r5, [pc, #52]	; (80049d8 <__libc_init_array+0x38>)
 80049a4:	4c0d      	ldr	r4, [pc, #52]	; (80049dc <__libc_init_array+0x3c>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	2600      	movs	r6, #0
 80049ac:	42a6      	cmp	r6, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	4d0b      	ldr	r5, [pc, #44]	; (80049e0 <__libc_init_array+0x40>)
 80049b2:	4c0c      	ldr	r4, [pc, #48]	; (80049e4 <__libc_init_array+0x44>)
 80049b4:	f000 f820 	bl	80049f8 <_init>
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	2600      	movs	r6, #0
 80049be:	42a6      	cmp	r6, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c8:	4798      	blx	r3
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d2:	4798      	blx	r3
 80049d4:	3601      	adds	r6, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	08004a38 	.word	0x08004a38
 80049dc:	08004a38 	.word	0x08004a38
 80049e0:	08004a38 	.word	0x08004a38
 80049e4:	08004a3c 	.word	0x08004a3c

080049e8 <memset>:
 80049e8:	4402      	add	r2, r0
 80049ea:	4603      	mov	r3, r0
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d100      	bne.n	80049f2 <memset+0xa>
 80049f0:	4770      	bx	lr
 80049f2:	f803 1b01 	strb.w	r1, [r3], #1
 80049f6:	e7f9      	b.n	80049ec <memset+0x4>

080049f8 <_init>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

08004a04 <_fini>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr
